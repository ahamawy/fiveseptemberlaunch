"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/investors/[id]/dashboard/route";
exports.ids = ["app/api/investors/[id]/dashboard/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ahmedelhamawy_Desktop_15_1_1_investor_portal_dashboard_app_api_investors_id_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/investors/[id]/dashboard/route.ts */ \"(rsc)/./app/api/investors/[id]/dashboard/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/investors/[id]/dashboard/route\",\n        pathname: \"/api/investors/[id]/dashboard\",\n        filename: \"route\",\n        bundlePath: \"app/api/investors/[id]/dashboard/route\"\n    },\n    resolvedPagePath: \"/Users/ahmedelhamawy/Desktop/15.1.1 investor-portal-dashboard/app/api/investors/[id]/dashboard/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ahmedelhamawy_Desktop_15_1_1_investor_portal_dashboard_app_api_investors_id_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/investors/[id]/dashboard/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbnZlc3RvcnMlMkYlNUJpZCU1RCUyRmRhc2hib2FyZCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGaW52ZXN0b3JzJTJGJTVCaWQlNUQlMkZkYXNoYm9hcmQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZpbnZlc3RvcnMlMkYlNUJpZCU1RCUyRmRhc2hib2FyZCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFobWVkZWxoYW1hd3klMkZEZXNrdG9wJTJGMTUuMS4xJTIwaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZhaG1lZGVsaGFtYXd5JTJGRGVza3RvcCUyRjE1LjEuMSUyMGludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VEO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8/YzYxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYWhtZWRlbGhhbWF3eS9EZXNrdG9wLzE1LjEuMSBpbnZlc3Rvci1wb3J0YWwtZGFzaGJvYXJkL2FwcC9hcGkvaW52ZXN0b3JzL1tpZF0vZGFzaGJvYXJkL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9haG1lZGVsaGFtYXd5L0Rlc2t0b3AvMTUuMS4xIGludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvYXBwL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/investors/[id]/dashboard/route.ts":
/*!***************************************************!*\
  !*** ./app/api/investors/[id]/dashboard/route.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services */ \"(rsc)/./lib/services/index.ts\");\n\n\nasync function GET(request, { params }) {\n    try {\n        const investorId = parseInt(params.id);\n        if (isNaN(investorId)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid investor ID\"\n            }, {\n                status: 400\n            });\n        }\n        // Use the service layer which handles mock vs Supabase\n        const dashboardData = await _lib_services__WEBPACK_IMPORTED_MODULE_1__.investorsService.getDashboardData(investorId);\n        if (!dashboardData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch dashboard data\"\n            }, {\n                status: 404\n            });\n        }\n        // Map service result (summary/recentActivity) to UI shape (portfolio/performance/activeDeals)\n        const s = dashboardData.summary;\n        const ui = {\n            portfolio: {\n                totalValue: s.currentValue,\n                totalCommitted: s.totalCommitted,\n                totalDistributed: s.totalDistributed,\n                unrealizedGain: s.totalGains\n            },\n            performance: {\n                irr: s.portfolioIRR,\n                moic: s.portfolioMOIC,\n                dpi: s.totalDistributed / s.totalCalled || 0,\n                tvpi: s.currentValue / s.totalCalled || 0\n            },\n            recentActivity: dashboardData.recentActivity,\n            activeDeals: s.activeDeals\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(ui);\n    } catch (error) {\n        console.error(\"Error fetching dashboard data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDTjtBQUUzQyxlQUFlRSxJQUNwQkMsT0FBb0IsRUFDcEIsRUFBRUMsTUFBTSxFQUE4QjtJQUV0QyxJQUFJO1FBQ0YsTUFBTUMsYUFBYUMsU0FBU0YsT0FBT0csRUFBRTtRQUVyQyxJQUFJQyxNQUFNSCxhQUFhO1lBQ3JCLE9BQU9MLHFEQUFZQSxDQUFDUyxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQXNCLEdBQy9CO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSx1REFBdUQ7UUFDdkQsTUFBTUMsZ0JBQWdCLE1BQU1YLDJEQUFnQkEsQ0FBQ1ksZ0JBQWdCLENBQUNSO1FBRTlELElBQUksQ0FBQ08sZUFBZTtZQUNsQixPQUFPWixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFpQyxHQUMxQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsOEZBQThGO1FBQzlGLE1BQU1HLElBQUlGLGNBQWNHLE9BQU87UUFDL0IsTUFBTUMsS0FBSztZQUNUQyxXQUFXO2dCQUNUQyxZQUFZSixFQUFFSyxZQUFZO2dCQUMxQkMsZ0JBQWdCTixFQUFFTSxjQUFjO2dCQUNoQ0Msa0JBQWtCUCxFQUFFTyxnQkFBZ0I7Z0JBQ3BDQyxnQkFBZ0JSLEVBQUVTLFVBQVU7WUFDOUI7WUFDQUMsYUFBYTtnQkFDWEMsS0FBS1gsRUFBRVksWUFBWTtnQkFDbkJDLE1BQU1iLEVBQUVjLGFBQWE7Z0JBQ3JCQyxLQUFLZixFQUFFTyxnQkFBZ0IsR0FBR1AsRUFBRWdCLFdBQVcsSUFBSTtnQkFDM0NDLE1BQU1qQixFQUFFSyxZQUFZLEdBQUdMLEVBQUVnQixXQUFXLElBQUk7WUFDMUM7WUFDQUUsZ0JBQWdCcEIsY0FBY29CLGNBQWM7WUFDNUNDLGFBQWFuQixFQUFFbUIsV0FBVztRQUM1QjtRQUVBLE9BQU9qQyxxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDTztJQUMzQixFQUFFLE9BQU9OLE9BQU87UUFDZHdCLFFBQVF4QixLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxPQUFPVixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQXdCLEdBQ2pDO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2FwcC9hcGkvaW52ZXN0b3JzL1tpZF0vZGFzaGJvYXJkL3JvdXRlLnRzPzBiYjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGludmVzdG9yc1NlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogeyBpZDogc3RyaW5nIH0gfVxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgaW52ZXN0b3JJZCA9IHBhcnNlSW50KHBhcmFtcy5pZCk7XG4gICAgXG4gICAgaWYgKGlzTmFOKGludmVzdG9ySWQpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIGludmVzdG9yIElEJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSBzZXJ2aWNlIGxheWVyIHdoaWNoIGhhbmRsZXMgbW9jayB2cyBTdXBhYmFzZVxuICAgIGNvbnN0IGRhc2hib2FyZERhdGEgPSBhd2FpdCBpbnZlc3RvcnNTZXJ2aWNlLmdldERhc2hib2FyZERhdGEoaW52ZXN0b3JJZCk7XG4gICAgXG4gICAgaWYgKCFkYXNoYm9hcmREYXRhKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggZGFzaGJvYXJkIGRhdGEnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTWFwIHNlcnZpY2UgcmVzdWx0IChzdW1tYXJ5L3JlY2VudEFjdGl2aXR5KSB0byBVSSBzaGFwZSAocG9ydGZvbGlvL3BlcmZvcm1hbmNlL2FjdGl2ZURlYWxzKVxuICAgIGNvbnN0IHMgPSBkYXNoYm9hcmREYXRhLnN1bW1hcnk7XG4gICAgY29uc3QgdWkgPSB7XG4gICAgICBwb3J0Zm9saW86IHtcbiAgICAgICAgdG90YWxWYWx1ZTogcy5jdXJyZW50VmFsdWUsXG4gICAgICAgIHRvdGFsQ29tbWl0dGVkOiBzLnRvdGFsQ29tbWl0dGVkLFxuICAgICAgICB0b3RhbERpc3RyaWJ1dGVkOiBzLnRvdGFsRGlzdHJpYnV0ZWQsICBcbiAgICAgICAgdW5yZWFsaXplZEdhaW46IHMudG90YWxHYWluc1xuICAgICAgfSxcbiAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgIGlycjogcy5wb3J0Zm9saW9JUlIsXG4gICAgICAgIG1vaWM6IHMucG9ydGZvbGlvTU9JQyxcbiAgICAgICAgZHBpOiBzLnRvdGFsRGlzdHJpYnV0ZWQgLyBzLnRvdGFsQ2FsbGVkIHx8IDAsXG4gICAgICAgIHR2cGk6IHMuY3VycmVudFZhbHVlIC8gcy50b3RhbENhbGxlZCB8fCAwXG4gICAgICB9LFxuICAgICAgcmVjZW50QWN0aXZpdHk6IGRhc2hib2FyZERhdGEucmVjZW50QWN0aXZpdHksXG4gICAgICBhY3RpdmVEZWFsczogcy5hY3RpdmVEZWFsc1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHVpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXNoYm9hcmQgZGF0YTonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiaW52ZXN0b3JzU2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJwYXJhbXMiLCJpbnZlc3RvcklkIiwicGFyc2VJbnQiLCJpZCIsImlzTmFOIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiZGFzaGJvYXJkRGF0YSIsImdldERhc2hib2FyZERhdGEiLCJzIiwic3VtbWFyeSIsInVpIiwicG9ydGZvbGlvIiwidG90YWxWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInRvdGFsQ29tbWl0dGVkIiwidG90YWxEaXN0cmlidXRlZCIsInVucmVhbGl6ZWRHYWluIiwidG90YWxHYWlucyIsInBlcmZvcm1hbmNlIiwiaXJyIiwicG9ydGZvbGlvSVJSIiwibW9pYyIsInBvcnRmb2xpb01PSUMiLCJkcGkiLCJ0b3RhbENhbGxlZCIsInR2cGkiLCJyZWNlbnRBY3Rpdml0eSIsImFjdGl2ZURlYWxzIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/investors/[id]/dashboard/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/client.ts":
/*!**************************!*\
  !*** ./lib/db/client.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataClient: () => (/* binding */ dataClient),\n/* harmony export */   getDataClient: () => (/* binding */ getDataClient),\n/* harmony export */   isUsingMockData: () => (/* binding */ isUsingMockData),\n/* harmony export */   simulateDelay: () => (/* binding */ simulateDelay)\n/* harmony export */ });\n/* harmony import */ var _mock_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mock-adapter */ \"(rsc)/./lib/db/mock-adapter.ts\");\n/* harmony import */ var _supabase_adapter_simple__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase-adapter-simple */ \"(rsc)/./lib/db/supabase-adapter-simple.ts\");\n/**\n * Database Client Abstraction\n * Switches between mock data and Supabase based on environment configuration\n */ \n\n// Check if we should use mock data\nconst USE_MOCK_DATA = \"false\" === \"true\";\nconst ENABLE_SUPABASE = \"true\" === \"true\";\n/**\n * Database Client Factory\n * Returns appropriate client based on environment configuration\n */ class DataClientFactory {\n    static{\n        this.instance = null;\n    }\n    static getClient() {\n        if (!this.instance) {\n            if (USE_MOCK_DATA || !ENABLE_SUPABASE) {\n                console.log(\"\\uD83D\\uDD27 Using Mock Data Adapter\");\n                this.instance = new _mock_adapter__WEBPACK_IMPORTED_MODULE_0__.MockAdapter();\n            } else {\n                console.log(\"\\uD83D\\uDD27 Using Simple Supabase Adapter\");\n                this.instance = new _supabase_adapter_simple__WEBPACK_IMPORTED_MODULE_1__.SimpleSupabaseAdapter();\n            }\n        }\n        return this.instance;\n    }\n    static resetClient() {\n        this.instance = null;\n    }\n}\n// Export the client getter\nconst getDataClient = ()=>DataClientFactory.getClient();\n// Export a default client instance for convenience\nconst dataClient = getDataClient();\n// Helper function to check if using mock data\nconst isUsingMockData = ()=>USE_MOCK_DATA || !ENABLE_SUPABASE;\n// Helper function to simulate API delay in development\nconst simulateDelay = async (ms = 0)=>{\n    if ( true && USE_MOCK_DATA) {\n        const delay = parseInt(\"0\" || 0);\n        if (delay > 0) {\n            await new Promise((resolve)=>setTimeout(resolve, ms || delay));\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIvY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Q0FHQyxHQUU0QztBQUNxQjtBQWVsRSxtQ0FBbUM7QUFDbkMsTUFBTUUsZ0JBQWdCQyxPQUFxQyxLQUFLO0FBQ2hFLE1BQU1HLGtCQUFrQkgsTUFBdUMsS0FBSztBQXdDcEU7OztDQUdDLEdBQ0QsTUFBTUs7O2FBQ1dDLFdBQStCOztJQUU5QyxPQUFPQyxZQUF5QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDRCxRQUFRLEVBQUU7WUFDbEIsSUFBSVAsaUJBQWlCLENBQUNJLGlCQUFpQjtnQkFDckNLLFFBQVFDLEdBQUcsQ0FBQztnQkFDWixJQUFJLENBQUNILFFBQVEsR0FBRyxJQUFJVCxzREFBV0E7WUFDakMsT0FBTztnQkFDTFcsUUFBUUMsR0FBRyxDQUFDO2dCQUNaLElBQUksQ0FBQ0gsUUFBUSxHQUFHLElBQUlSLDJFQUFxQkE7WUFDM0M7UUFDRjtRQUNBLE9BQU8sSUFBSSxDQUFDUSxRQUFRO0lBQ3RCO0lBRUEsT0FBT0ksY0FBb0I7UUFDekIsSUFBSSxDQUFDSixRQUFRLEdBQUc7SUFDbEI7QUFDRjtBQUVBLDJCQUEyQjtBQUNwQixNQUFNSyxnQkFBZ0IsSUFBTU4sa0JBQWtCRSxTQUFTLEdBQUc7QUFFakUsbURBQW1EO0FBQzVDLE1BQU1LLGFBQWFELGdCQUFnQjtBQUUxQyw4Q0FBOEM7QUFDdkMsTUFBTUUsa0JBQWtCLElBQU1kLGlCQUFpQixDQUFDSSxnQkFBZ0I7QUFFdkUsdURBQXVEO0FBQ2hELE1BQU1XLGdCQUFnQixPQUFPQyxLQUFhLENBQUM7SUFDaEQsSUFBSWYsS0FBeUIsSUFBaUJELGVBQWU7UUFDM0QsTUFBTWlCLFFBQVFDLFNBQVNqQixHQUFxQyxJQUFJO1FBQ2hFLElBQUlnQixRQUFRLEdBQUc7WUFDYixNQUFNLElBQUlHLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVNMLE1BQU1DO1FBQ3pEO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2xpYi9kYi9jbGllbnQudHM/ZmRlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERhdGFiYXNlIENsaWVudCBBYnN0cmFjdGlvblxuICogU3dpdGNoZXMgYmV0d2VlbiBtb2NrIGRhdGEgYW5kIFN1cGFiYXNlIGJhc2VkIG9uIGVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25cbiAqL1xuXG5pbXBvcnQgeyBNb2NrQWRhcHRlciB9IGZyb20gJy4vbW9jay1hZGFwdGVyJztcbmltcG9ydCB7IFNpbXBsZVN1cGFiYXNlQWRhcHRlciB9IGZyb20gJy4vc3VwYWJhc2UtYWRhcHRlci1zaW1wbGUnO1xuaW1wb3J0IHR5cGUgeyBcbiAgRGVhbCwgXG4gIEludmVzdG9yLCBcbiAgQ29tcGFueSwgXG4gIENvbW1pdG1lbnQsIFxuICBUcmFuc2FjdGlvbiwgXG4gIERvY3VtZW50LFxuICBEZWFsRmlsdGVycyxcbiAgVHJhbnNhY3Rpb25GaWx0ZXJzLFxuICBEb2N1bWVudEZpbHRlcnMsXG4gIERhc2hib2FyZERhdGEsXG4gIFBvcnRmb2xpb0RhdGFcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIENoZWNrIGlmIHdlIHNob3VsZCB1c2UgbW9jayBkYXRhXG5jb25zdCBVU0VfTU9DS19EQVRBID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVVNFX01PQ0tfREFUQSA9PT0gJ3RydWUnO1xuY29uc3QgRU5BQkxFX1NVUEFCQVNFID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRU5BQkxFX1NVUEFCQVNFID09PSAndHJ1ZSc7XG5cbi8qKlxuICogRGF0YWJhc2UgQ2xpZW50IEludGVyZmFjZVxuICogQWxsIG1ldGhvZHMgcmV0dXJuIHByb21pc2VzIHRvIG1hdGNoIFN1cGFiYXNlJ3MgYXN5bmMgbmF0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFDbGllbnQge1xuICAvLyBEZWFsc1xuICBnZXREZWFscyhmaWx0ZXJzPzogRGVhbEZpbHRlcnMpOiBQcm9taXNlPERlYWxbXT47XG4gIGdldERlYWxCeUlkKGlkOiBudW1iZXIpOiBQcm9taXNlPERlYWwgfCBudWxsPjtcbiAgZ2V0RGVhbEJ5U2x1ZyhzbHVnOiBzdHJpbmcpOiBQcm9taXNlPERlYWwgfCBudWxsPjtcbiAgXG4gIC8vIEludmVzdG9yc1xuICBnZXRJbnZlc3RvcnMoKTogUHJvbWlzZTxJbnZlc3RvcltdPjtcbiAgZ2V0SW52ZXN0b3JCeUlkKGlkOiBudW1iZXIpOiBQcm9taXNlPEludmVzdG9yIHwgbnVsbD47XG4gIGdldEN1cnJlbnRJbnZlc3RvcigpOiBQcm9taXNlPEludmVzdG9yIHwgbnVsbD47XG4gIFxuICAvLyBDb21wYW5pZXNcbiAgZ2V0Q29tcGFuaWVzKCk6IFByb21pc2U8Q29tcGFueVtdPjtcbiAgZ2V0Q29tcGFueUJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8Q29tcGFueSB8IG51bGw+O1xuICBcbiAgLy8gQ29tbWl0bWVudHNcbiAgZ2V0Q29tbWl0bWVudHMoaW52ZXN0b3JJZD86IG51bWJlcik6IFByb21pc2U8Q29tbWl0bWVudFtdPjtcbiAgZ2V0Q29tbWl0bWVudEJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8Q29tbWl0bWVudCB8IG51bGw+O1xuICBnZXRDb21taXRtZW50c0J5RGVhbElkKGRlYWxJZDogbnVtYmVyKTogUHJvbWlzZTxDb21taXRtZW50W10+O1xuICBcbiAgLy8gVHJhbnNhY3Rpb25zXG4gIGdldFRyYW5zYWN0aW9ucyhmaWx0ZXJzPzogVHJhbnNhY3Rpb25GaWx0ZXJzKTogUHJvbWlzZTxUcmFuc2FjdGlvbltdPjtcbiAgZ2V0VHJhbnNhY3Rpb25CeUlkKGlkOiBudW1iZXIpOiBQcm9taXNlPFRyYW5zYWN0aW9uIHwgbnVsbD47XG4gIFxuICAvLyBEb2N1bWVudHNcbiAgZ2V0RG9jdW1lbnRzKGZpbHRlcnM/OiBEb2N1bWVudEZpbHRlcnMpOiBQcm9taXNlPERvY3VtZW50W10+O1xuICBnZXREb2N1bWVudEJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8RG9jdW1lbnQgfCBudWxsPjtcbiAgXG4gIC8vIERhc2hib2FyZCAmIFBvcnRmb2xpb1xuICBnZXREYXNoYm9hcmREYXRhKGludmVzdG9ySWQ6IG51bWJlcik6IFByb21pc2U8RGFzaGJvYXJkRGF0YT47XG4gIGdldFBvcnRmb2xpb0RhdGEoaW52ZXN0b3JJZDogbnVtYmVyKTogUHJvbWlzZTxQb3J0Zm9saW9EYXRhPjtcbn1cblxuXG4vKipcbiAqIERhdGFiYXNlIENsaWVudCBGYWN0b3J5XG4gKiBSZXR1cm5zIGFwcHJvcHJpYXRlIGNsaWVudCBiYXNlZCBvbiBlbnZpcm9ubWVudCBjb25maWd1cmF0aW9uXG4gKi9cbmNsYXNzIERhdGFDbGllbnRGYWN0b3J5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IElEYXRhQ2xpZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgc3RhdGljIGdldENsaWVudCgpOiBJRGF0YUNsaWVudCB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4gICAgICBpZiAoVVNFX01PQ0tfREFUQSB8fCAhRU5BQkxFX1NVUEFCQVNFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIFVzaW5nIE1vY2sgRGF0YSBBZGFwdGVyJyk7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgTW9ja0FkYXB0ZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIFVzaW5nIFNpbXBsZSBTdXBhYmFzZSBBZGFwdGVyJyk7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgU2ltcGxlU3VwYWJhc2VBZGFwdGVyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG5cbiAgc3RhdGljIHJlc2V0Q2xpZW50KCk6IHZvaWQge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBudWxsO1xuICB9XG59XG5cbi8vIEV4cG9ydCB0aGUgY2xpZW50IGdldHRlclxuZXhwb3J0IGNvbnN0IGdldERhdGFDbGllbnQgPSAoKSA9PiBEYXRhQ2xpZW50RmFjdG9yeS5nZXRDbGllbnQoKTtcblxuLy8gRXhwb3J0IGEgZGVmYXVsdCBjbGllbnQgaW5zdGFuY2UgZm9yIGNvbnZlbmllbmNlXG5leHBvcnQgY29uc3QgZGF0YUNsaWVudCA9IGdldERhdGFDbGllbnQoKTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHVzaW5nIG1vY2sgZGF0YVxuZXhwb3J0IGNvbnN0IGlzVXNpbmdNb2NrRGF0YSA9ICgpID0+IFVTRV9NT0NLX0RBVEEgfHwgIUVOQUJMRV9TVVBBQkFTRTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNpbXVsYXRlIEFQSSBkZWxheSBpbiBkZXZlbG9wbWVudFxuZXhwb3J0IGNvbnN0IHNpbXVsYXRlRGVsYXkgPSBhc3luYyAobXM6IG51bWJlciA9IDApID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIFVTRV9NT0NLX0RBVEEpIHtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX01PQ0tfREVMQVlfTVMgfHwgJzAnKTtcbiAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMgfHwgZGVsYXkpKTtcbiAgICB9XG4gIH1cbn07Il0sIm5hbWVzIjpbIk1vY2tBZGFwdGVyIiwiU2ltcGxlU3VwYWJhc2VBZGFwdGVyIiwiVVNFX01PQ0tfREFUQSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19VU0VfTU9DS19EQVRBIiwiRU5BQkxFX1NVUEFCQVNFIiwiTkVYVF9QVUJMSUNfRU5BQkxFX1NVUEFCQVNFIiwiRGF0YUNsaWVudEZhY3RvcnkiLCJpbnN0YW5jZSIsImdldENsaWVudCIsImNvbnNvbGUiLCJsb2ciLCJyZXNldENsaWVudCIsImdldERhdGFDbGllbnQiLCJkYXRhQ2xpZW50IiwiaXNVc2luZ01vY2tEYXRhIiwic2ltdWxhdGVEZWxheSIsIm1zIiwiZGVsYXkiLCJwYXJzZUludCIsIk5FWFRfUFVCTElDX01PQ0tfREVMQVlfTVMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/mock-adapter.ts":
/*!********************************!*\
  !*** ./lib/db/mock-adapter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockAdapter: () => (/* binding */ MockAdapter)\n/* harmony export */ });\n/* harmony import */ var _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mock-data/deals */ \"(rsc)/./lib/mock-data/deals.ts\");\n/* harmony import */ var _mock_data_investors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mock-data/investors */ \"(rsc)/./lib/mock-data/investors.ts\");\n/* harmony import */ var _mock_data_transactions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mock-data/transactions */ \"(rsc)/./lib/mock-data/transactions.ts\");\n/**\n * Mock Data Adapter\n * Provides Supabase-like API using local mock data\n */ // Import existing mock data\n\n\n\n// Convert existing mock data to match DB types\nconst convertCompany = (company)=>({\n        id: company.id,\n        public_id: company.publicId || `comp_${company.id}`,\n        name: company.name,\n        type: company.type,\n        sector: company.sector,\n        country: company.country,\n        website: company.website,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\nconst convertDeal = (deal)=>({\n        id: deal.id,\n        public_id: deal.publicId || `deal_${deal.id}`,\n        company_id: deal.companyId,\n        code: deal.code,\n        slug: deal.slug,\n        name: deal.name,\n        type: deal.type,\n        stage: deal.stage,\n        currency: deal.currency,\n        opening_date: deal.openingDate,\n        closing_date: deal.closingDate,\n        unit_price_init: deal.unitPriceInit,\n        target_raise: deal.targetRaise || null,\n        current_raise: deal.currentRaise || null,\n        minimum_investment: deal.minimumInvestment || null,\n        description: deal.description || null,\n        created_at: deal.createdAt || new Date().toISOString(),\n        updated_at: deal.updatedAt || new Date().toISOString()\n    });\nconst convertInvestor = (investor)=>({\n        id: investor.id,\n        public_id: investor.publicId || `inv_${investor.id}`,\n        user_id: investor.userId || null,\n        type: investor.type || \"individual\",\n        name: investor.name,\n        email: investor.email,\n        phone: investor.phone || null,\n        country: investor.country || null,\n        kyc_status: investor.kycStatus || \"approved\",\n        accredited: investor.accredited !== false,\n        created_at: investor.createdAt || new Date().toISOString(),\n        updated_at: investor.updatedAt || new Date().toISOString()\n    });\nconst convertCommitment = (commitment)=>({\n        id: commitment.id,\n        public_id: `comm_${commitment.id}`,\n        investor_id: commitment.investorId,\n        deal_id: commitment.dealId,\n        currency: commitment.currency,\n        amount: commitment.amount,\n        status: commitment.status,\n        signed_date: commitment.status === \"signed\" ? commitment.createdAt : null,\n        created_at: commitment.createdAt || new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\nconst convertTransaction = (transaction)=>({\n        id: transaction.id,\n        public_id: transaction.publicId || `txn_${transaction.id}`,\n        investor_id: transaction.investorId || null,\n        deal_id: transaction.dealId || null,\n        type: transaction.type,\n        status: transaction.status,\n        currency: transaction.currency,\n        amount: transaction.amount,\n        fee_amount: transaction.feeAmount || null,\n        reference: transaction.reference || null,\n        description: transaction.description || null,\n        processed_at: transaction.processedAt || null,\n        created_at: transaction.createdAt || new Date().toISOString(),\n        updated_at: transaction.updatedAt || new Date().toISOString()\n    });\n// Mock documents data\nconst mockDocuments = [\n    {\n        id: 1,\n        public_id: \"doc_1\",\n        type: \"termsheet\",\n        name: \"TechVision AI Series A Term Sheet\",\n        url: \"/documents/termsheet-techvision.pdf\",\n        mime_type: \"application/pdf\",\n        size_bytes: 245000,\n        deal_id: 1,\n        investor_id: null,\n        version: \"1.0\",\n        is_signed: false,\n        created_at: \"2024-01-15T10:00:00Z\",\n        updated_at: \"2024-01-15T10:00:00Z\"\n    },\n    {\n        id: 2,\n        public_id: \"doc_2\",\n        type: \"subscription_agreement\",\n        name: \"Subscription Agreement - John Doe\",\n        url: \"/documents/subscription-johndoe.pdf\",\n        mime_type: \"application/pdf\",\n        size_bytes: 512000,\n        deal_id: 1,\n        investor_id: 1,\n        version: \"1.0\",\n        is_signed: true,\n        created_at: \"2024-01-20T10:00:00Z\",\n        updated_at: \"2024-01-20T10:00:00Z\"\n    }\n];\nclass MockAdapter {\n    constructor(){\n        // Convert existing mock data\n        this.companies = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockCompanies.map(convertCompany);\n        this.deals = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockDeals.map(convertDeal);\n        this.investors = _mock_data_investors__WEBPACK_IMPORTED_MODULE_1__.mockInvestors.map(convertInvestor);\n        this.commitments = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockCommitments.map(convertCommitment);\n        this.transactions = _mock_data_transactions__WEBPACK_IMPORTED_MODULE_2__.mockTransactions.map(convertTransaction);\n        this.documents = mockDocuments;\n    }\n    async getDeals(filters) {\n        let results = [\n            ...this.deals\n        ];\n        if (filters) {\n            if (filters.stage) {\n                results = results.filter((d)=>d.stage === filters.stage);\n            }\n            if (filters.type) {\n                results = results.filter((d)=>d.type === filters.type);\n            }\n            if (filters.company_id) {\n                results = results.filter((d)=>d.company_id === filters.company_id);\n            }\n            if (filters.search) {\n                const search = filters.search.toLowerCase();\n                results = results.filter((d)=>d.name.toLowerCase().includes(search) || d.code.toLowerCase().includes(search) || d.slug.toLowerCase().includes(search));\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getDealById(id) {\n        const deal = this.deals.find((d)=>d.id === id);\n        return Promise.resolve(deal || null);\n    }\n    async getDealBySlug(slug) {\n        const deal = this.deals.find((d)=>d.slug === slug);\n        return Promise.resolve(deal || null);\n    }\n    async getInvestors() {\n        return Promise.resolve([\n            ...this.investors\n        ]);\n    }\n    async getInvestorById(id) {\n        const investor = this.investors.find((i)=>i.id === id);\n        return Promise.resolve(investor || null);\n    }\n    async getCurrentInvestor() {\n        // Use mock user ID from environment or default to 1\n        const mockUserId = parseInt(\"1\" || 0);\n        return this.getInvestorById(mockUserId);\n    }\n    async getCompanies() {\n        return Promise.resolve([\n            ...this.companies\n        ]);\n    }\n    async getCompanyById(id) {\n        const company = this.companies.find((c)=>c.id === id);\n        return Promise.resolve(company || null);\n    }\n    async getCommitments(investorId) {\n        let results = [\n            ...this.commitments\n        ];\n        if (investorId) {\n            results = results.filter((c)=>c.investor_id === investorId);\n        }\n        return Promise.resolve(results);\n    }\n    async getCommitmentById(id) {\n        const commitment = this.commitments.find((c)=>c.id === id);\n        return Promise.resolve(commitment || null);\n    }\n    async getCommitmentsByDealId(dealId) {\n        const results = this.commitments.filter((c)=>c.deal_id === dealId);\n        return Promise.resolve(results);\n    }\n    async getTransactions(filters) {\n        let results = [\n            ...this.transactions\n        ];\n        if (filters) {\n            if (filters.investor_id) {\n                results = results.filter((t)=>t.investor_id === filters.investor_id);\n            }\n            if (filters.deal_id) {\n                results = results.filter((t)=>t.deal_id === filters.deal_id);\n            }\n            if (filters.type) {\n                results = results.filter((t)=>t.type === filters.type);\n            }\n            if (filters.status) {\n                results = results.filter((t)=>t.status === filters.status);\n            }\n            if (filters.from_date) {\n                results = results.filter((t)=>t.created_at >= filters.from_date);\n            }\n            if (filters.to_date) {\n                results = results.filter((t)=>t.created_at <= filters.to_date);\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getTransactionById(id) {\n        const transaction = this.transactions.find((t)=>t.id === id);\n        return Promise.resolve(transaction || null);\n    }\n    async getDocuments(filters) {\n        let results = [\n            ...this.documents\n        ];\n        if (filters) {\n            if (filters.deal_id) {\n                results = results.filter((d)=>d.deal_id === filters.deal_id);\n            }\n            if (filters.investor_id) {\n                results = results.filter((d)=>d.investor_id === filters.investor_id);\n            }\n            if (filters.type) {\n                results = results.filter((d)=>d.type === filters.type);\n            }\n            if (filters.is_signed !== undefined) {\n                results = results.filter((d)=>d.is_signed === filters.is_signed);\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getDocumentById(id) {\n        const document = this.documents.find((d)=>d.id === id);\n        return Promise.resolve(document || null);\n    }\n    async getDashboardData(investorId) {\n        const investor = await this.getInvestorById(investorId);\n        if (!investor) {\n            throw new Error(`Investor ${investorId} not found`);\n        }\n        const commitments = await this.getCommitments(investorId);\n        const transactions = await this.getTransactions({\n            investor_id: investorId\n        });\n        const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n        const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n        const capitalCalls = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\");\n        const totalCalled = capitalCalls.reduce((sum, t)=>sum + t.amount, 0);\n        const distributions = transactions.filter((t)=>t.type === \"distribution\" && t.status === \"completed\");\n        const totalDistributed = distributions.reduce((sum, t)=>sum + t.amount, 0);\n        const currentValue = totalCommitted * 1.25; // Mock 25% appreciation\n        const totalGains = currentValue + totalDistributed - totalCalled;\n        const recentActivity = transactions.slice(0, 5).map((t)=>({\n                id: t.public_id,\n                type: t.type,\n                description: t.description || `${t.type} processed`,\n                amount: t.amount,\n                date: t.created_at\n            }));\n        const upcomingCalls = signedCommitments.filter((c)=>{\n            const called = capitalCalls.filter((t)=>t.deal_id === c.deal_id).reduce((sum, t)=>sum + t.amount, 0);\n            return called < c.amount;\n        }).map((c)=>{\n            const deal = this.deals.find((d)=>d.id === c.deal_id);\n            return {\n                dealName: deal?.name || \"Unknown Deal\",\n                amount: c.amount * 0.25,\n                date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                currency: c.currency\n            };\n        });\n        return Promise.resolve({\n            investor,\n            summary: {\n                totalCommitted,\n                totalCalled,\n                totalDistributed,\n                currentValue,\n                totalGains,\n                portfolioIRR: 18.5,\n                portfolioMOIC: 1.45,\n                activeDeals: signedCommitments.length\n            },\n            recentActivity,\n            upcomingCalls\n        });\n    }\n    async getPortfolioData(investorId) {\n        const commitments = await this.getCommitments(investorId);\n        const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n        const holdings = await Promise.all(signedCommitments.map(async (commitment)=>{\n            const deal = await this.getDealById(commitment.deal_id);\n            const company = deal?.company_id ? await this.getCompanyById(deal.company_id) : null;\n            const transactions = await this.getTransactions({\n                investor_id: investorId,\n                deal_id: commitment.deal_id\n            });\n            const capitalCalled = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\").reduce((sum, t)=>sum + t.amount, 0);\n            const capitalDistributed = transactions.filter((t)=>t.type === \"distribution\" && t.status === \"completed\").reduce((sum, t)=>sum + t.amount, 0);\n            const currentValue = capitalCalled * 1.35; // Mock 35% appreciation\n            const irr = 15 + Math.random() * 10; // Mock IRR 15-25%\n            const moic = currentValue / (capitalCalled || 1);\n            return {\n                deal: deal,\n                company: company,\n                commitment,\n                metrics: {\n                    capitalCalled,\n                    capitalDistributed,\n                    currentValue,\n                    irr,\n                    moic\n                }\n            };\n        }));\n        const totalValue = holdings.reduce((sum, h)=>sum + h.metrics.currentValue, 0);\n        const totalCalled = holdings.reduce((sum, h)=>sum + h.metrics.capitalCalled, 0);\n        const totalDistributed = holdings.reduce((sum, h)=>sum + h.metrics.capitalDistributed, 0);\n        const totalGains = totalValue + totalDistributed - totalCalled;\n        const averageIRR = holdings.reduce((sum, h)=>sum + (h.metrics.irr || 0), 0) / holdings.length;\n        const averageMOIC = totalValue / (totalCalled || 1);\n        return Promise.resolve({\n            holdings,\n            summary: {\n                totalHoldings: holdings.length,\n                totalValue,\n                totalGains,\n                averageIRR,\n                averageMOIC\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/mock-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/supabase-adapter-simple.ts":
/*!*******************************************!*\
  !*** ./lib/db/supabase-adapter-simple.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSupabaseAdapter: () => (/* binding */ SimpleSupabaseAdapter)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Simplified Supabase Data Adapter\n * Uses database views for direct data mapping - no transformation needed\n */ \nclass SimpleSupabaseAdapter {\n    constructor(){\n        const supabaseUrl = \"https://ikezqzljrupkzmyytgok.supabase.co\";\n        const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlrZXpxemxqcnVwa3pteXl0Z29rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMTI4ODMsImV4cCI6MjA2NTY4ODg4M30.fZ6X0wQ29LR94ZCtDWJkHD9NXUWPQSQJyscYestOSIs\";\n        if (!supabaseUrl || !supabaseKey) {\n            throw new Error(\"Missing Supabase configuration\");\n        }\n        this.client = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n        console.log(\"✅ Simple Supabase client initialized\");\n    }\n    // ==========================================\n    // DEALS - Direct from deals_view\n    // ==========================================\n    async getDeals(filters) {\n        try {\n            let query = this.client.from(\"deals_view\").select(\"*\").order(\"id\", {\n                ascending: false\n            });\n            // Apply filters\n            if (filters?.stage) query = query.eq(\"stage\", filters.stage);\n            if (filters?.type) query = query.eq(\"type\", filters.type);\n            if (filters?.company_id) query = query.eq(\"company_id\", filters.company_id);\n            if (filters?.search) query = query.ilike(\"name\", `%${filters.search}%`);\n            if (filters?.limit) query = query.limit(filters.limit);\n            if (filters?.offset) {\n                query = query.range(filters.offset, filters.offset + (filters.limit || 50) - 1);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching deals:\", error);\n                return [];\n            }\n            // Direct return - no transformation needed!\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getDeals:\", error);\n            return [];\n        }\n    }\n    async getDealById(id) {\n        try {\n            const { data, error } = await this.client.from(\"deals_view\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching deal:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getDealById:\", error);\n            return null;\n        }\n    }\n    async getDealBySlug(slug) {\n        try {\n            // Create slug from name in view\n            const { data, error } = await this.client.from(\"deals_view\").select(\"*\");\n            if (error || !data) return null;\n            // Find by generated slug\n            return data.find((deal)=>deal.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\") === slug) || null;\n        } catch (error) {\n            console.error(\"Error in getDealBySlug:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // INVESTORS - Direct from investors table\n    // ==========================================\n    async getInvestors() {\n        try {\n            const { data, error } = await this.client.from(\"investors\").select(\"*\").order(\"id\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"Error fetching investors:\", error);\n                return [];\n            }\n            // Simple mapping for investors\n            return (data || []).map((inv)=>({\n                    id: inv.id,\n                    public_id: `inv_${inv.id}`,\n                    user_id: null,\n                    type: inv.investor_type?.toLowerCase() || \"individual\",\n                    name: inv.full_name,\n                    email: inv.primary_email,\n                    phone: inv.phone,\n                    country: inv.country_of_residence,\n                    kyc_status: inv.kyc_status || \"pending\",\n                    accredited: true,\n                    created_at: inv.createdAt || new Date().toISOString(),\n                    updated_at: inv.updatedAt || new Date().toISOString()\n                }));\n        } catch (error) {\n            console.error(\"Error in getInvestors:\", error);\n            return [];\n        }\n    }\n    async getInvestorById(id) {\n        try {\n            const { data, error } = await this.client.from(\"investors\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching investor:\", error);\n                return null;\n            }\n            if (data) {\n                return {\n                    id: data.id,\n                    public_id: `inv_${data.id}`,\n                    user_id: null,\n                    type: data.investor_type?.toLowerCase() || \"individual\",\n                    name: data.full_name,\n                    email: data.primary_email,\n                    phone: data.phone,\n                    country: data.country_of_residence,\n                    kyc_status: data.kyc_status || \"pending\",\n                    accredited: true,\n                    created_at: data.createdAt || new Date().toISOString(),\n                    updated_at: data.updatedAt || new Date().toISOString()\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error in getInvestorById:\", error);\n            return null;\n        }\n    }\n    async getCurrentInvestor() {\n        // Default to investor ID 10 (Yasser) for testing\n        return this.getInvestorById(10);\n    }\n    // ==========================================\n    // COMPANIES - Direct from companies.company\n    // ==========================================\n    async getCompanies() {\n        try {\n            const { data, error } = await this.client.from(\"companies.company\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"Error fetching companies:\", error);\n                return [];\n            }\n            return (data || []).map((c)=>({\n                    id: c.company_id,\n                    name: c.company_name,\n                    description: c.company_description,\n                    website: c.company_website,\n                    sector: c.sector || c.company_sector,\n                    stage: c.funding_round_stage,\n                    valuation: c.latest_valuation_mil\n                }));\n        } catch (error) {\n            console.error(\"Error in getCompanies:\", error);\n            return [];\n        }\n    }\n    async getCompanyById(id) {\n        try {\n            const { data, error } = await this.client.from(\"companies.company\").select(\"*\").eq(\"company_id\", id).single();\n            if (error) {\n                console.error(\"Error fetching company:\", error);\n                return null;\n            }\n            return data ? {\n                id: data.company_id,\n                name: data.company_name,\n                description: data.company_description,\n                website: data.company_website,\n                sector: data.sector || data.company_sector,\n                stage: data.funding_round_stage,\n                valuation: data.latest_valuation_mil\n            } : null;\n        } catch (error) {\n            console.error(\"Error in getCompanyById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // COMMITMENTS - From investor_units\n    // ==========================================\n    async getCommitments(investorId) {\n        try {\n            let query = this.client.from(\"investor_units\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (investorId) {\n                query = query.eq(\"investor_id\", investorId);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching commitments:\", error);\n                return [];\n            }\n            return (data || []).map((unit, index)=>({\n                    id: index + 1,\n                    public_id: `comm_${unit.id}`,\n                    investor_id: unit.investor_id,\n                    deal_id: unit.deal_id,\n                    currency: \"USD\",\n                    amount: parseFloat(unit.investment_amount || unit.net_capital || \"0\"),\n                    status: \"signed\",\n                    signed_date: unit.purchase_date || unit.created_at,\n                    created_at: unit.created_at,\n                    updated_at: unit.updated_at\n                }));\n        } catch (error) {\n            console.error(\"Error in getCommitments:\", error);\n            return [];\n        }\n    }\n    async getCommitmentById(id) {\n        // Not needed for current implementation\n        return null;\n    }\n    async getCommitmentsByDealId(dealId) {\n        return this.getCommitments().then((commitments)=>commitments.filter((c)=>c.deal_id === dealId));\n    }\n    // ==========================================\n    // TRANSACTIONS - Direct from transactions_view\n    // ==========================================\n    async getTransactions(filters) {\n        try {\n            let query = this.client.from(\"transactions_view\").select(\"*\").order(\"date\", {\n                ascending: false\n            });\n            if (filters?.investor_id) query = query.eq(\"investor_id\", filters.investor_id);\n            if (filters?.deal_id) query = query.eq(\"deal_id\", filters.deal_id);\n            if (filters?.type) query = query.eq(\"type\", filters.type);\n            if (filters?.status) query = query.eq(\"status\", filters.status);\n            if (filters?.limit) query = query.limit(filters.limit);\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching transactions:\", error);\n                return [];\n            }\n            // Direct return from view!\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getTransactions:\", error);\n            return [];\n        }\n    }\n    async getTransactionById(id) {\n        try {\n            const { data, error } = await this.client.from(\"transactions_view\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching transaction:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getTransactionById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // DOCUMENTS - Direct from documents_view\n    // ==========================================\n    async getDocuments(filters) {\n        try {\n            let query = this.client.from(\"documents_view\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (filters?.deal_id) query = query.eq(\"deal_id\", filters.deal_id);\n            if (filters?.investor_id) query = query.eq(\"investor_id\", filters.investor_id);\n            if (filters?.type) query = query.eq(\"type\", filters.type);\n            if (filters?.is_signed !== undefined) query = query.eq(\"is_signed\", filters.is_signed);\n            if (filters?.limit) query = query.limit(filters.limit);\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching documents:\", error);\n                return [];\n            }\n            // Direct return from view!\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getDocuments:\", error);\n            return [];\n        }\n    }\n    async getDocumentById(id) {\n        try {\n            const { data, error } = await this.client.from(\"documents_view\").select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching document:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getDocumentById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // DASHBOARD - Direct from dashboard_view!\n    // ==========================================\n    async getDashboardData(investorId) {\n        try {\n            // Get dashboard data from view\n            const { data: dashData, error: dashError } = await this.client.from(\"dashboard_view\").select(\"*\").eq(\"investor_id\", investorId).single();\n            if (dashError || !dashData) {\n                console.error(\"Error fetching dashboard:\", dashError);\n                throw new Error(\"Failed to fetch dashboard data\");\n            }\n            // Get investor details\n            const investor = await this.getInvestorById(investorId);\n            if (!investor) {\n                throw new Error(`Investor ${investorId} not found`);\n            }\n            // Get recent transactions\n            const transactions = await this.getTransactions({\n                investor_id: investorId,\n                limit: 10\n            });\n            // Format recent activity\n            const recentActivity = transactions.map((t)=>({\n                    id: `tx_${t.id}`,\n                    type: t.type,\n                    description: t.description || \"Transaction\",\n                    amount: t.amount,\n                    date: t.created_at\n                }));\n            // Mock upcoming calls (can be enhanced later)\n            const upcomingCalls = [\n                {\n                    dealName: \"Next Capital Call\",\n                    amount: dashData.total_committed * 0.1,\n                    date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                    currency: \"USD\"\n                }\n            ];\n            return {\n                investor,\n                summary: {\n                    totalCommitted: dashData.total_committed,\n                    totalCalled: dashData.total_called,\n                    totalDistributed: dashData.total_distributed,\n                    currentValue: dashData.current_value,\n                    totalGains: dashData.unrealized_gain,\n                    portfolioIRR: dashData.irr,\n                    portfolioMOIC: dashData.moic,\n                    activeDeals: dashData.active_deals\n                },\n                recentActivity,\n                upcomingCalls\n            };\n        } catch (error) {\n            console.error(\"Error in getDashboardData:\", error);\n            throw error;\n        }\n    }\n    // ==========================================\n    // PORTFOLIO - Direct from portfolio_view!\n    // ==========================================\n    async getPortfolioData(investorId) {\n        try {\n            // Get portfolio holdings from view\n            const { data: holdings, error } = await this.client.from(\"portfolio_view\").select(\"*\").eq(\"investor_id\", investorId).order(\"current_value\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"Error fetching portfolio:\", error);\n                return {\n                    holdings: [],\n                    summary: {\n                        totalHoldings: 0,\n                        totalValue: 0,\n                        totalGains: 0,\n                        averageIRR: 0,\n                        averageMOIC: 0\n                    }\n                };\n            }\n            // Transform holdings data\n            const transformedHoldings = await Promise.all((holdings || []).map(async (h)=>{\n                // Get deal and company details\n                const deal = await this.getDealById(h.deal_id);\n                const company = h.company_name ? {\n                    id: h.deal_id,\n                    public_id: `comp_${h.deal_id}`,\n                    name: h.company_name,\n                    type: \"startup\",\n                    sector: h.sector,\n                    country: null,\n                    website: null,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                } : null;\n                return {\n                    deal: deal || {\n                        id: h.deal_id,\n                        public_id: `deal_${h.deal_id}`,\n                        company_id: h.deal_id,\n                        code: `DEAL_${h.deal_id}`,\n                        slug: h.deal_name?.toLowerCase().replace(/[^a-z0-9]+/g, \"-\") || \"\",\n                        name: h.deal_name || \"Unknown Deal\",\n                        type: h.deal_type || \"primary\",\n                        stage: \"active\",\n                        currency: \"USD\",\n                        opening_date: h.investment_date,\n                        closing_date: null,\n                        unit_price_init: 1000,\n                        target_raise: 1000000,\n                        current_raise: 500000,\n                        minimum_investment: 10000,\n                        description: null,\n                        created_at: h.investment_date,\n                        updated_at: h.investment_date\n                    },\n                    company: company,\n                    commitment: {\n                        id: 1,\n                        public_id: `comm_${h.deal_id}`,\n                        investor_id: h.investor_id,\n                        deal_id: h.deal_id,\n                        currency: \"USD\",\n                        amount: h.amount_invested,\n                        status: \"signed\",\n                        signed_date: h.investment_date,\n                        created_at: h.investment_date,\n                        updated_at: h.investment_date\n                    },\n                    metrics: {\n                        capitalCalled: h.amount_invested,\n                        capitalDistributed: h.amount_invested * 0.2,\n                        currentValue: h.current_value,\n                        irr: h.irr,\n                        moic: h.moic\n                    }\n                };\n            }));\n            // Calculate summary\n            const totalHoldings = transformedHoldings.length;\n            const totalValue = holdings?.reduce((sum, h)=>sum + h.current_value, 0) || 0;\n            const totalInvested = holdings?.reduce((sum, h)=>sum + h.amount_invested, 0) || 0;\n            const totalGains = holdings?.reduce((sum, h)=>sum + h.unrealized_gain, 0) || 0;\n            const averageIRR = totalHoldings > 0 ? (holdings?.reduce((sum, h)=>sum + h.irr, 0) || 0) / totalHoldings : 0;\n            const averageMOIC = totalHoldings > 0 ? (holdings?.reduce((sum, h)=>sum + h.moic, 0) || 0) / totalHoldings : 0;\n            return {\n                holdings: transformedHoldings,\n                summary: {\n                    totalHoldings,\n                    totalValue,\n                    totalGains,\n                    averageIRR,\n                    averageMOIC\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in getPortfolioData:\", error);\n            return {\n                holdings: [],\n                summary: {\n                    totalHoldings: 0,\n                    totalValue: 0,\n                    totalGains: 0,\n                    averageIRR: 0,\n                    averageMOIC: 0\n                }\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/supabase-adapter-simple.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/deals.ts":
/*!********************************!*\
  !*** ./lib/mock-data/deals.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCommitmentsByInvestorId: () => (/* binding */ getCommitmentsByInvestorId),\n/* harmony export */   getCompanyById: () => (/* binding */ getCompanyById),\n/* harmony export */   getDealById: () => (/* binding */ getDealById),\n/* harmony export */   getDealsByInvestorId: () => (/* binding */ getDealsByInvestorId),\n/* harmony export */   mockCommitments: () => (/* binding */ mockCommitments),\n/* harmony export */   mockCompanies: () => (/* binding */ mockCompanies),\n/* harmony export */   mockDeals: () => (/* binding */ mockDeals)\n/* harmony export */ });\nconst mockCompanies = [\n    {\n        id: 1,\n        publicId: \"comp_1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d\",\n        name: \"TechVision AI\",\n        type: \"startup\",\n        sector: \"Artificial Intelligence\",\n        country: \"USA\",\n        website: \"https://techvision.ai\",\n        valuation: 50000000\n    },\n    {\n        id: 2,\n        publicId: \"comp_7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b\",\n        name: \"GreenEnergy Solutions\",\n        type: \"growth\",\n        sector: \"Clean Energy\",\n        country: \"Germany\",\n        website: \"https://greenenergy.com\",\n        valuation: 150000000\n    },\n    {\n        id: 3,\n        publicId: \"comp_3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f\",\n        name: \"HealthTech Plus\",\n        type: \"growth\",\n        sector: \"Healthcare\",\n        country: \"UK\",\n        website: \"https://healthtechplus.com\",\n        valuation: 200000000\n    },\n    {\n        id: 4,\n        publicId: \"comp_9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d\",\n        name: \"FinanceFlow\",\n        type: \"mature\",\n        sector: \"Fintech\",\n        country: \"Singapore\",\n        website: \"https://financeflow.sg\",\n        valuation: 500000000\n    },\n    {\n        id: 5,\n        publicId: \"comp_5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f9a0b\",\n        name: \"BioPharm Innovations\",\n        type: \"startup\",\n        sector: \"Biotechnology\",\n        country: \"Switzerland\",\n        website: \"https://biopharm-innovations.ch\",\n        valuation: 75000000\n    }\n];\nconst mockDeals = [\n    {\n        id: 1,\n        publicId: \"deal_a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d\",\n        companyId: 1,\n        code: \"TVA-2024-A\",\n        slug: \"techvision-ai-series-a\",\n        name: \"TechVision AI Series A\",\n        type: \"primary\",\n        stage: \"active\",\n        currency: \"USD\",\n        openingDate: \"2024-01-15\",\n        closingDate: \"2024-03-15\",\n        unitPriceInit: 100,\n        targetRaise: 10000000,\n        currentRaise: 8500000,\n        minimumInvestment: 50000,\n        sector: \"Artificial Intelligence\",\n        description: \"Series A funding round for AI-powered computer vision platform\",\n        createdAt: \"2024-01-01T10:00:00Z\",\n        updatedAt: \"2024-12-15T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"deal_b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e\",\n        companyId: 2,\n        code: \"GES-2024-B\",\n        slug: \"greenenergy-solutions-series-b\",\n        name: \"GreenEnergy Solutions Series B\",\n        type: \"primary\",\n        stage: \"closing\",\n        currency: \"EUR\",\n        openingDate: \"2024-02-01\",\n        closingDate: null,\n        unitPriceInit: 250,\n        targetRaise: 25000000,\n        currentRaise: 22000000,\n        minimumInvestment: 100000,\n        sector: \"Clean Energy\",\n        description: \"Series B funding for expansion of renewable energy infrastructure\",\n        createdAt: \"2024-01-20T10:00:00Z\",\n        updatedAt: \"2024-12-20T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"deal_c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f\",\n        companyId: 3,\n        code: \"HTP-2024-SEC\",\n        slug: \"healthtech-plus-secondary\",\n        name: \"HealthTech Plus Secondary Offering\",\n        type: \"secondary\",\n        stage: \"active\",\n        currency: \"GBP\",\n        openingDate: \"2024-03-01\",\n        closingDate: \"2024-04-30\",\n        unitPriceInit: 175,\n        targetRaise: 15000000,\n        currentRaise: 12000000,\n        minimumInvestment: 75000,\n        sector: \"Healthcare\",\n        description: \"Secondary market opportunity in leading healthcare technology company\",\n        createdAt: \"2024-02-15T10:00:00Z\",\n        updatedAt: \"2024-12-18T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"deal_d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a\",\n        companyId: 4,\n        code: \"FF-2024-DIR\",\n        slug: \"financeflow-direct\",\n        name: \"FinanceFlow Direct Investment\",\n        type: \"direct\",\n        stage: \"due_diligence\",\n        currency: \"USD\",\n        openingDate: \"2024-04-01\",\n        closingDate: null,\n        unitPriceInit: 500,\n        targetRaise: 50000000,\n        currentRaise: 0,\n        minimumInvestment: 250000,\n        sector: \"Fintech\",\n        description: \"Direct investment opportunity in established fintech leader\",\n        createdAt: \"2024-03-15T10:00:00Z\",\n        updatedAt: \"2024-12-22T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"deal_e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b\",\n        companyId: 5,\n        code: \"BPI-2024-SEED\",\n        slug: \"biopharm-innovations-seed\",\n        name: \"BioPharm Innovations Seed Round\",\n        type: \"primary\",\n        stage: \"active\",\n        currency: \"CHF\",\n        openingDate: \"2024-05-01\",\n        closingDate: \"2024-06-30\",\n        unitPriceInit: 50,\n        targetRaise: 5000000,\n        currentRaise: 3500000,\n        minimumInvestment: 25000,\n        sector: \"Biotechnology\",\n        description: \"Seed funding for breakthrough pharmaceutical research platform\",\n        createdAt: \"2024-04-15T10:00:00Z\",\n        updatedAt: \"2024-12-10T10:00:00Z\"\n    },\n    {\n        id: 6,\n        publicId: \"deal_f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c\",\n        companyId: 1,\n        code: \"TVA-2023-SEED\",\n        slug: \"techvision-ai-seed\",\n        name: \"TechVision AI Seed Round\",\n        type: \"primary\",\n        stage: \"exited\",\n        currency: \"USD\",\n        openingDate: \"2023-01-15\",\n        closingDate: \"2023-03-15\",\n        unitPriceInit: 25,\n        targetRaise: 2000000,\n        currentRaise: 2000000,\n        minimumInvestment: 10000,\n        sector: \"Artificial Intelligence\",\n        description: \"Successfully exited seed round with 4x return\",\n        createdAt: \"2023-01-01T10:00:00Z\",\n        updatedAt: \"2024-06-30T10:00:00Z\"\n    }\n];\nconst mockCommitments = [\n    {\n        id: 1,\n        investorId: 1,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 250000,\n        status: \"signed\",\n        createdAt: \"2024-01-20T10:00:00Z\"\n    },\n    {\n        id: 2,\n        investorId: 1,\n        dealId: 3,\n        currency: \"GBP\",\n        amount: 150000,\n        status: \"signed\",\n        createdAt: \"2024-03-10T10:00:00Z\"\n    },\n    {\n        id: 3,\n        investorId: 1,\n        dealId: 6,\n        currency: \"USD\",\n        amount: 50000,\n        status: \"signed\",\n        createdAt: \"2023-01-20T10:00:00Z\"\n    },\n    {\n        id: 4,\n        investorId: 2,\n        dealId: 2,\n        currency: \"EUR\",\n        amount: 500000,\n        status: \"signed\",\n        createdAt: \"2024-02-15T10:00:00Z\"\n    },\n    {\n        id: 5,\n        investorId: 3,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 1000000,\n        status: \"signed\",\n        createdAt: \"2024-01-25T10:00:00Z\"\n    },\n    {\n        id: 6,\n        investorId: 3,\n        dealId: 4,\n        currency: \"USD\",\n        amount: 2000000,\n        status: \"draft\",\n        createdAt: \"2024-04-05T10:00:00Z\"\n    },\n    {\n        id: 7,\n        investorId: 4,\n        dealId: 5,\n        currency: \"CHF\",\n        amount: 100000,\n        status: \"signed\",\n        createdAt: \"2024-05-10T10:00:00Z\"\n    },\n    {\n        id: 8,\n        investorId: 5,\n        dealId: 2,\n        currency: \"EUR\",\n        amount: 750000,\n        status: \"signed\",\n        createdAt: \"2024-02-20T10:00:00Z\"\n    },\n    {\n        id: 9,\n        investorId: 6,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 2000000,\n        status: \"signed\",\n        createdAt: \"2024-01-30T10:00:00Z\"\n    },\n    {\n        id: 10,\n        investorId: 6,\n        dealId: 3,\n        currency: \"GBP\",\n        amount: 1500000,\n        status: \"signed\",\n        createdAt: \"2024-03-15T10:00:00Z\"\n    }\n];\nfunction getDealById(id) {\n    return mockDeals.find((deal)=>deal.id === id);\n}\nfunction getCompanyById(id) {\n    return mockCompanies.find((company)=>company.id === id);\n}\nfunction getCommitmentsByInvestorId(investorId) {\n    return mockCommitments.filter((commitment)=>commitment.investorId === investorId);\n}\nfunction getDealsByInvestorId(investorId) {\n    const commitments = getCommitmentsByInvestorId(investorId);\n    const dealIds = commitments.map((c)=>c.dealId);\n    return mockDeals.filter((deal)=>dealIds.includes(deal.id));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/deals.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/investors.ts":
/*!************************************!*\
  !*** ./lib/mock-data/investors.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInvestorById: () => (/* binding */ getInvestorById),\n/* harmony export */   getInvestorByPublicId: () => (/* binding */ getInvestorByPublicId),\n/* harmony export */   mockInvestors: () => (/* binding */ mockInvestors)\n/* harmony export */ });\nconst mockInvestors = [\n    {\n        id: 1,\n        publicId: \"inv_7f8a9b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c\",\n        fullName: \"John Smith\",\n        primaryEmail: \"john.smith@example.com\",\n        type: \"individual\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-01-15T10:00:00Z\",\n        updatedAt: \"2024-12-01T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"inv_2a3b4c5d-6e7f-8a9b-0c1d-2e3f4a5b6c7d\",\n        fullName: \"Sarah Johnson\",\n        primaryEmail: \"sarah.johnson@example.com\",\n        type: \"individual\",\n        countryResidence: \"UK\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-02-20T10:00:00Z\",\n        updatedAt: \"2024-11-15T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"inv_8e9f0a1b-2c3d-4e5f-6a7b-8c9d0e1f2a3b\",\n        fullName: \"Apex Capital Partners\",\n        primaryEmail: \"contact@apexcapital.com\",\n        type: \"institutional\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2022-11-01T10:00:00Z\",\n        updatedAt: \"2024-12-10T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"inv_4c5d6e7f-8a9b-0c1d-2e3f-4a5b6c7d8e9f\",\n        fullName: \"Michael Chen\",\n        primaryEmail: \"michael.chen@example.com\",\n        type: \"individual\",\n        countryResidence: \"Singapore\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-03-10T10:00:00Z\",\n        updatedAt: \"2024-10-20T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"inv_0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d\",\n        fullName: \"The Richardson Family Office\",\n        primaryEmail: \"office@richardsonfamily.com\",\n        type: \"family_office\",\n        countryResidence: \"Canada\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-04-05T10:00:00Z\",\n        updatedAt: \"2024-09-30T10:00:00Z\"\n    },\n    {\n        id: 6,\n        publicId: \"inv_6e7f8a9b-0c1d-2e3f-4a5b-6c7d8e9f0a1b\",\n        fullName: \"Global Ventures Fund\",\n        primaryEmail: \"info@globalventures.com\",\n        type: \"fund\",\n        countryResidence: \"Switzerland\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2022-09-15T10:00:00Z\",\n        updatedAt: \"2024-12-05T10:00:00Z\"\n    },\n    {\n        id: 7,\n        publicId: \"inv_2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f\",\n        fullName: \"Emma Wilson\",\n        primaryEmail: \"emma.wilson@example.com\",\n        type: \"individual\",\n        countryResidence: \"Australia\",\n        status: \"active\",\n        kycStatus: \"pending\",\n        createdAt: \"2024-11-01T10:00:00Z\",\n        updatedAt: \"2024-12-15T10:00:00Z\"\n    },\n    {\n        id: 8,\n        publicId: \"inv_8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d\",\n        fullName: \"Robert Martinez\",\n        primaryEmail: \"robert.martinez@example.com\",\n        type: \"individual\",\n        countryResidence: \"Spain\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-05-20T10:00:00Z\",\n        updatedAt: \"2024-08-10T10:00:00Z\"\n    },\n    {\n        id: 9,\n        publicId: \"inv_4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b\",\n        fullName: \"Tech Innovation Fund\",\n        primaryEmail: \"invest@techinnovation.com\",\n        type: \"fund\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-06-01T10:00:00Z\",\n        updatedAt: \"2024-11-25T10:00:00Z\"\n    },\n    {\n        id: 10,\n        publicId: \"inv_0c1d2e3f-4a5b-6c7d-8e9f-0a1b2c3d4e5f\",\n        fullName: \"Lisa Anderson\",\n        primaryEmail: \"lisa.anderson@example.com\",\n        type: \"individual\",\n        countryResidence: \"Germany\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-07-15T10:00:00Z\",\n        updatedAt: \"2024-12-20T10:00:00Z\"\n    }\n];\nfunction getInvestorById(id) {\n    return mockInvestors.find((investor)=>investor.id === id);\n}\nfunction getInvestorByPublicId(publicId) {\n    return mockInvestors.find((investor)=>investor.publicId === publicId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/investors.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/transactions.ts":
/*!***************************************!*\
  !*** ./lib/mock-data/transactions.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRecentTransactions: () => (/* binding */ getRecentTransactions),\n/* harmony export */   getTransactionsByDealId: () => (/* binding */ getTransactionsByDealId),\n/* harmony export */   getTransactionsByInvestorId: () => (/* binding */ getTransactionsByInvestorId),\n/* harmony export */   mockTransactions: () => (/* binding */ mockTransactions)\n/* harmony export */ });\nconst mockTransactions = [\n    // Investor 1 transactions\n    {\n        id: 1,\n        publicId: \"txn_a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-02-01\",\n        currency: \"USD\",\n        amount: 125000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-001\",\n        createdAt: \"2024-02-01T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"txn_b2c3d4e5-f6a7-8901-bcde-f23456789012\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-04-01\",\n        currency: \"USD\",\n        amount: 125000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Second capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-002\",\n        createdAt: \"2024-04-01T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"txn_c3d4e5f6-a7b8-9012-cdef-345678901234\",\n        dealId: 3,\n        investorId: 1,\n        occurredOn: \"2024-03-15\",\n        currency: \"GBP\",\n        amount: 150000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Capital call - HealthTech Plus Secondary\",\n        reference: \"CC-HTP-2024-001\",\n        createdAt: \"2024-03-15T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"txn_d4e5f6a7-b8c9-0123-defa-456789012345\",\n        dealId: 6,\n        investorId: 1,\n        occurredOn: \"2024-06-30\",\n        currency: \"USD\",\n        amount: 200000,\n        type: \"distribution\",\n        status: \"completed\",\n        description: \"Exit distribution - TechVision AI Seed Round\",\n        reference: \"DIST-TVA-2024-001\",\n        createdAt: \"2024-06-30T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"txn_e5f6a7b8-c9d0-1234-efab-567890123456\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-10-01\",\n        currency: \"USD\",\n        amount: 2500,\n        type: \"fee\",\n        status: \"completed\",\n        description: \"Management fee Q3 2024\",\n        reference: \"FEE-Q3-2024-001\",\n        createdAt: \"2024-10-01T10:00:00Z\"\n    },\n    // Investor 2 transactions\n    {\n        id: 6,\n        publicId: \"txn_f6a7b8c9-d0e1-2345-fabc-678901234567\",\n        dealId: 2,\n        investorId: 2,\n        occurredOn: \"2024-02-20\",\n        currency: \"EUR\",\n        amount: 250000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-001\",\n        createdAt: \"2024-02-20T10:00:00Z\"\n    },\n    {\n        id: 7,\n        publicId: \"txn_a7b8c9d0-e1f2-3456-abcd-789012345678\",\n        dealId: 2,\n        investorId: 2,\n        occurredOn: \"2024-05-20\",\n        currency: \"EUR\",\n        amount: 250000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-002\",\n        createdAt: \"2024-05-20T10:00:00Z\"\n    },\n    // Investor 3 transactions\n    {\n        id: 8,\n        publicId: \"txn_b8c9d0e1-f2a3-4567-bcde-890123456789\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-02-01\",\n        currency: \"USD\",\n        amount: 500000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-003\",\n        createdAt: \"2024-02-01T10:00:00Z\"\n    },\n    {\n        id: 9,\n        publicId: \"txn_c9d0e1f2-a3b4-5678-cdef-901234567890\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-04-01\",\n        currency: \"USD\",\n        amount: 500000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Second capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-004\",\n        createdAt: \"2024-04-01T10:00:00Z\"\n    },\n    {\n        id: 10,\n        publicId: \"txn_d0e1f2a3-b4c5-6789-defa-012345678901\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-11-01\",\n        currency: \"USD\",\n        amount: 50000,\n        type: \"distribution\",\n        status: \"completed\",\n        description: \"Interim distribution - TechVision AI Series A\",\n        reference: \"DIST-TVA-2024-002\",\n        createdAt: \"2024-11-01T10:00:00Z\"\n    },\n    // More transactions for variety\n    {\n        id: 11,\n        publicId: \"txn_e1f2a3b4-c5d6-7890-efab-123456789012\",\n        dealId: null,\n        investorId: 1,\n        occurredOn: \"2024-12-01\",\n        currency: \"USD\",\n        amount: 5000,\n        type: \"fee\",\n        status: \"completed\",\n        description: \"Annual administration fee\",\n        reference: \"FEE-ANNUAL-2024\",\n        createdAt: \"2024-12-01T10:00:00Z\"\n    },\n    {\n        id: 12,\n        publicId: \"txn_f2a3b4c5-d6e7-8901-fabc-234567890123\",\n        dealId: 5,\n        investorId: 4,\n        occurredOn: \"2024-05-15\",\n        currency: \"CHF\",\n        amount: 50000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - BioPharm Innovations Seed\",\n        reference: \"CC-BPI-2024-001\",\n        createdAt: \"2024-05-15T10:00:00Z\"\n    },\n    {\n        id: 13,\n        publicId: \"txn_a3b4c5d6-e7f8-9012-abcd-345678901234\",\n        dealId: 5,\n        investorId: 4,\n        occurredOn: \"2024-07-15\",\n        currency: \"CHF\",\n        amount: 50000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - BioPharm Innovations Seed\",\n        reference: \"CC-BPI-2024-002\",\n        createdAt: \"2024-07-15T10:00:00Z\"\n    },\n    {\n        id: 14,\n        publicId: \"txn_b4c5d6e7-f8a9-0123-bcde-456789012345\",\n        dealId: 2,\n        investorId: 5,\n        occurredOn: \"2024-02-25\",\n        currency: \"EUR\",\n        amount: 375000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-005\",\n        createdAt: \"2024-02-25T10:00:00Z\"\n    },\n    {\n        id: 15,\n        publicId: \"txn_c5d6e7f8-a9b0-1234-cdef-567890123456\",\n        dealId: 2,\n        investorId: 5,\n        occurredOn: \"2024-05-25\",\n        currency: \"EUR\",\n        amount: 375000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-006\",\n        createdAt: \"2024-05-25T10:00:00Z\"\n    }\n];\nfunction getTransactionsByInvestorId(investorId) {\n    return mockTransactions.filter((transaction)=>transaction.investorId === investorId);\n}\nfunction getTransactionsByDealId(dealId) {\n    return mockTransactions.filter((transaction)=>transaction.dealId === dealId);\n}\nfunction getRecentTransactions(investorId, limit = 5) {\n    return getTransactionsByInvestorId(investorId).sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, limit);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/transactions.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/base.service.ts":
/*!**************************************!*\
  !*** ./lib/services/base.service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseService: () => (/* binding */ BaseService)\n/* harmony export */ });\n/* harmony import */ var _db_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db/client */ \"(rsc)/./lib/db/client.ts\");\n/**\n * Base Service Class\n * Provides common functionality for all service classes\n */ \nclass BaseService {\n    constructor(options = {}){\n        this.cache = new Map();\n        this.dataClient = (0,_db_client__WEBPACK_IMPORTED_MODULE_0__.getDataClient)();\n        this.options = {\n            enableCache: true,\n            cacheTime: 5 * 60 * 1000,\n            enableLogging: \"development\" === \"development\",\n            ...options\n        };\n    }\n    /**\n   * Get cached data if available and not expired\n   */ getCached(key) {\n        if (!this.options.enableCache) return null;\n        const cached = this.cache.get(key);\n        if (!cached) return null;\n        const now = Date.now();\n        if (now - cached.timestamp > (this.options.cacheTime || 0)) {\n            this.cache.delete(key);\n            return null;\n        }\n        if (this.options.enableLogging) {\n            console.log(`📦 Cache hit: ${key}`);\n        }\n        return cached.data;\n    }\n    /**\n   * Set cache data\n   */ setCache(key, data) {\n        if (!this.options.enableCache) return;\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n        if (this.options.enableLogging) {\n            console.log(`💾 Cache set: ${key}`);\n        }\n    }\n    /**\n   * Clear cache\n   */ clearCache() {\n        this.cache.clear();\n        if (this.options.enableLogging) {\n            console.log(\"\\uD83D\\uDDD1️ Cache cleared\");\n        }\n    }\n    /**\n   * Log service action\n   */ log(action, details) {\n        if (this.options.enableLogging) {\n            console.log(`[${this.constructor.name}] ${action}`, details || \"\");\n        }\n    }\n    /**\n   * Handle service errors\n   */ handleError(error, context) {\n        console.error(`[${this.constructor.name}] Error in ${context}:`, error);\n        // You can add error tracking here (e.g., Sentry)\n        if (true) {\n        // Track error to external service\n        }\n        throw error;\n    }\n    /**\n   * Validate required fields\n   */ validateRequired(data, fields, context) {\n        const missing = fields.filter((field)=>!data[field]);\n        if (missing.length > 0) {\n            throw new Error(`${context}: Missing required fields: ${missing.join(\", \")}`);\n        }\n    }\n    /**\n   * Apply pagination to array\n   */ paginate(items, page = 1, limit = 10) {\n        const total = items.length;\n        const totalPages = Math.ceil(total / limit);\n        const start = (page - 1) * limit;\n        const end = start + limit;\n        return {\n            data: items.slice(start, end),\n            pagination: {\n                page,\n                limit,\n                total,\n                totalPages,\n                hasNext: page < totalPages,\n                hasPrev: page > 1\n            }\n        };\n    }\n    /**\n   * Sort array by field\n   */ sortBy(items, field, order = \"asc\") {\n        return [\n            ...items\n        ].sort((a, b)=>{\n            const aVal = a[field];\n            const bVal = b[field];\n            if (aVal === bVal) return 0;\n            if (order === \"asc\") {\n                return aVal < bVal ? -1 : 1;\n            } else {\n                return aVal > bVal ? -1 : 1;\n            }\n        });\n    }\n    /**\n   * Filter by search term\n   */ searchFilter(items, searchTerm, fields) {\n        if (!searchTerm) return items;\n        const term = searchTerm.toLowerCase();\n        return items.filter((item)=>{\n            return fields.some((field)=>{\n                const value = item[field];\n                if (typeof value === \"string\") {\n                    return value.toLowerCase().includes(term);\n                }\n                return false;\n            });\n        });\n    }\n    /**\n   * Simulate API delay (for development)\n   */ async delay(ms) {\n        await (0,_db_client__WEBPACK_IMPORTED_MODULE_0__.simulateDelay)(ms);\n    }\n    /**\n   * Format response with metadata\n   */ formatResponse(data, metadata) {\n        return {\n            success: true,\n            data,\n            metadata,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/base.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/deals.service.ts":
/*!***************************************!*\
  !*** ./lib/services/deals.service.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DealsService: () => (/* binding */ DealsService),\n/* harmony export */   dealsService: () => (/* binding */ dealsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Deals Service\n * Handles all deal-related operations\n */ \nclass DealsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get all deals with optional filters\n   */ async getDeals(options = {}) {\n        const cacheKey = `deals:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDeals\", options);\n            await this.delay();\n            const filters = {\n                stage: options.stage,\n                type: options.type,\n                search: options.search\n            };\n            let deals = await this.dataClient.getDeals(filters);\n            // Enrich with company data\n            const dealsWithCompanies = await Promise.all(deals.map(async (deal)=>{\n                const company = deal.company_id ? await this.dataClient.getCompanyById(deal.company_id) : null;\n                return {\n                    ...deal,\n                    company: company || undefined\n                };\n            }));\n            // Sort\n            if (options.sortBy) {\n                dealsWithCompanies.sort((a, b)=>{\n                    const field = options.sortBy;\n                    const aVal = a[field];\n                    const bVal = b[field];\n                    if (aVal === bVal) return 0;\n                    if (options.sortOrder === \"desc\") {\n                        return aVal > bVal ? -1 : 1;\n                    } else {\n                        return aVal < bVal ? -1 : 1;\n                    }\n                });\n            }\n            // Paginate\n            const paginated = this.paginate(dealsWithCompanies, options.page || 1, options.limit || 10);\n            const result = this.formatResponse(paginated.data, {\n                pagination: paginated.pagination\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDeals\");\n        }\n    }\n    /**\n   * Get a single deal by ID with full details\n   */ async getDealById(id) {\n        const cacheKey = `deal:${id}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealById\", {\n                id\n            });\n            await this.delay();\n            const deal = await this.dataClient.getDealById(id);\n            if (!deal) return null;\n            // Get related data\n            const [company, commitments] = await Promise.all([\n                deal.company_id ? this.dataClient.getCompanyById(deal.company_id) : null,\n                this.dataClient.getCommitmentsByDealId(id)\n            ]);\n            // Calculate aggregates\n            const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n            const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n            const investorCount = new Set(signedCommitments.map((c)=>c.investor_id)).size;\n            const percentageRaised = deal.target_raise ? totalCommitted / deal.target_raise * 100 : 0;\n            const dealDetails = {\n                ...deal,\n                company: company || undefined,\n                commitments,\n                totalCommitted,\n                investorCount,\n                percentageRaised\n            };\n            this.setCache(cacheKey, dealDetails);\n            return dealDetails;\n        } catch (error) {\n            this.handleError(error, \"getDealById\");\n        }\n    }\n    /**\n   * Get a deal by slug\n   */ async getDealBySlug(slug) {\n        const cacheKey = `deal:slug:${slug}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealBySlug\", {\n                slug\n            });\n            await this.delay();\n            const deal = await this.dataClient.getDealBySlug(slug);\n            if (!deal) return null;\n            // Get full details using getDealById\n            const dealDetails = await this.getDealById(deal.id);\n            this.setCache(cacheKey, dealDetails);\n            return dealDetails;\n        } catch (error) {\n            this.handleError(error, \"getDealBySlug\");\n        }\n    }\n    /**\n   * Get deals for a specific investor\n   */ async getDealsByInvestor(investorId) {\n        const cacheKey = `deals:investor:${investorId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealsByInvestor\", {\n                investorId\n            });\n            await this.delay();\n            // Get investor's commitments\n            const commitments = await this.dataClient.getCommitments(investorId);\n            const dealIds = [\n                ...new Set(commitments.map((c)=>c.deal_id))\n            ];\n            // Get deals\n            const deals = await Promise.all(dealIds.map((id)=>this.getDealById(id)));\n            const validDeals = deals.filter((d)=>d !== null);\n            this.setCache(cacheKey, validDeals);\n            return this.formatResponse(validDeals);\n        } catch (error) {\n            this.handleError(error, \"getDealsByInvestor\");\n        }\n    }\n    /**\n   * Get active deals (for dashboard)\n   */ async getActiveDeals() {\n        return this.getDeals({\n            stage: \"active\",\n            sortBy: \"opening_date\",\n            sortOrder: \"desc\",\n            limit: 6\n        });\n    }\n    /**\n   * Get featured deals\n   */ async getFeaturedDeals() {\n        const result = await this.getDeals({\n            limit: 3,\n            sortBy: \"current_raise\",\n            sortOrder: \"desc\"\n        });\n        // Filter to only show deals in active or closing stage\n        if (result && \"data\" in result && Array.isArray(result.data)) {\n            result.data = result.data.filter((d)=>d.stage === \"active\" || d.stage === \"closing\");\n        }\n        return result;\n    }\n    /**\n   * Calculate deal metrics\n   */ async getDealMetrics(dealId) {\n        const cacheKey = `deal:metrics:${dealId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealMetrics\", {\n                dealId\n            });\n            const deal = await this.getDealById(dealId);\n            if (!deal) return null;\n            const metrics = {\n                dealId,\n                name: deal.name,\n                stage: deal.stage,\n                targetRaise: deal.target_raise || 0,\n                currentRaise: deal.current_raise || 0,\n                totalCommitted: deal.totalCommitted || 0,\n                investorCount: deal.investorCount || 0,\n                percentageRaised: deal.percentageRaised || 0,\n                daysRemaining: this.calculateDaysRemaining(deal.closing_date),\n                minimumInvestment: deal.minimum_investment || 0,\n                currency: deal.currency\n            };\n            const result = this.formatResponse(metrics);\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDealMetrics\");\n        }\n    }\n    /**\n   * Search deals\n   */ async searchDeals(query) {\n        return this.getDeals({\n            search: query,\n            limit: 20\n        });\n    }\n    /**\n   * Helper: Calculate days remaining\n   */ calculateDaysRemaining(closingDate) {\n        if (!closingDate) return null;\n        const closing = new Date(closingDate);\n        const now = new Date();\n        const diff = closing.getTime() - now.getTime();\n        if (diff < 0) return 0;\n        return Math.ceil(diff / (1000 * 60 * 60 * 24));\n    }\n}\n// Export singleton instance\nconst dealsService = new DealsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/deals.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/documents.service.ts":
/*!*******************************************!*\
  !*** ./lib/services/documents.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentsService: () => (/* binding */ DocumentsService),\n/* harmony export */   documentsService: () => (/* binding */ documentsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Documents Service\n * Handles all document-related operations\n */ \nclass DocumentsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get documents with filters\n   */ async getDocuments(options = {}) {\n        const cacheKey = `documents:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDocuments\", options);\n            await this.delay();\n            const documents = await this.dataClient.getDocuments(options);\n            const result = this.formatResponse(documents, {\n                count: documents.length\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDocuments\");\n        }\n    }\n    /**\n   * Get documents for a specific deal\n   */ async getDealDocuments(dealId, options = {}) {\n        return this.getDocuments({\n            ...options,\n            deal_id: dealId\n        });\n    }\n    /**\n   * Get documents for a specific investor\n   */ async getInvestorDocuments(investorId, options = {}) {\n        return this.getDocuments({\n            ...options,\n            investor_id: investorId\n        });\n    }\n    /**\n   * Get signed documents\n   */ async getSignedDocuments(options = {}) {\n        return this.getDocuments({\n            ...options,\n            is_signed: true\n        });\n    }\n    /**\n   * Get unsigned documents\n   */ async getUnsignedDocuments(options = {}) {\n        return this.getDocuments({\n            ...options,\n            is_signed: false\n        });\n    }\n}\n// Export singleton instance\nconst documentsService = new DocumentsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZG9jdW1lbnRzLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRTRDO0FBWXRDLE1BQU1DLHlCQUF5QkQsc0RBQVdBO0lBQy9DOztHQUVDLEdBQ0QsTUFBTUUsYUFBYUMsVUFBK0IsQ0FBQyxDQUFDLEVBQUU7UUFDcEQsTUFBTUMsV0FBVyxDQUFDLFVBQVUsRUFBRUMsS0FBS0MsU0FBUyxDQUFDSCxTQUFTLENBQUM7UUFDdkQsTUFBTUksU0FBUyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0o7UUFDOUIsSUFBSUcsUUFBUSxPQUFPQTtRQUVuQixJQUFJO1lBQ0YsSUFBSSxDQUFDRSxHQUFHLENBQUMsZ0JBQWdCTjtZQUN6QixNQUFNLElBQUksQ0FBQ08sS0FBSztZQUVoQixNQUFNQyxZQUFZLE1BQU0sSUFBSSxDQUFDQyxVQUFVLENBQUNWLFlBQVksQ0FBQ0M7WUFFckQsTUFBTVUsU0FBUyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0gsV0FBVztnQkFDNUNJLE9BQU9KLFVBQVVLLE1BQU07WUFDekI7WUFFQSxJQUFJLENBQUNDLFFBQVEsQ0FBQ2IsVUFBVVM7WUFDeEIsT0FBT0E7UUFDVCxFQUFFLE9BQU9LLE9BQU87WUFDZCxJQUFJLENBQUNDLFdBQVcsQ0FBQ0QsT0FBTztRQUMxQjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFNRSxpQkFBaUJDLE1BQWMsRUFBRWxCLFVBQWdELENBQUMsQ0FBQyxFQUFFO1FBQ3pGLE9BQU8sSUFBSSxDQUFDRCxZQUFZLENBQUM7WUFBRSxHQUFHQyxPQUFPO1lBQUVtQixTQUFTRDtRQUFPO0lBQ3pEO0lBRUE7O0dBRUMsR0FDRCxNQUFNRSxxQkFBcUJDLFVBQWtCLEVBQUVyQixVQUFvRCxDQUFDLENBQUMsRUFBRTtRQUNyRyxPQUFPLElBQUksQ0FBQ0QsWUFBWSxDQUFDO1lBQUUsR0FBR0MsT0FBTztZQUFFc0IsYUFBYUQ7UUFBVztJQUNqRTtJQUVBOztHQUVDLEdBQ0QsTUFBTUUsbUJBQW1CdkIsVUFBa0QsQ0FBQyxDQUFDLEVBQUU7UUFDN0UsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQztZQUFFLEdBQUdDLE9BQU87WUFBRXdCLFdBQVc7UUFBSztJQUN6RDtJQUVBOztHQUVDLEdBQ0QsTUFBTUMscUJBQXFCekIsVUFBa0QsQ0FBQyxDQUFDLEVBQUU7UUFDL0UsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQztZQUFFLEdBQUdDLE9BQU87WUFBRXdCLFdBQVc7UUFBTTtJQUMxRDtBQUNGO0FBRUEsNEJBQTRCO0FBQ3JCLE1BQU1FLG1CQUFtQixJQUFJNUIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2xpYi9zZXJ2aWNlcy9kb2N1bWVudHMuc2VydmljZS50cz8yMWU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG9jdW1lbnRzIFNlcnZpY2VcbiAqIEhhbmRsZXMgYWxsIGRvY3VtZW50LXJlbGF0ZWQgb3BlcmF0aW9uc1xuICovXG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCwgRG9jdW1lbnRUeXBlIH0gZnJvbSAnLi4vZGIvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50TGlzdE9wdGlvbnMge1xuICBkZWFsX2lkPzogbnVtYmVyO1xuICBpbnZlc3Rvcl9pZD86IG51bWJlcjtcbiAgdHlwZT86IERvY3VtZW50VHlwZTtcbiAgaXNfc2lnbmVkPzogYm9vbGVhbjtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIERvY3VtZW50c1NlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIC8qKlxuICAgKiBHZXQgZG9jdW1lbnRzIHdpdGggZmlsdGVyc1xuICAgKi9cbiAgYXN5bmMgZ2V0RG9jdW1lbnRzKG9wdGlvbnM6IERvY3VtZW50TGlzdE9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGRvY3VtZW50czoke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfWA7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWQoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coJ2dldERvY3VtZW50cycsIG9wdGlvbnMpO1xuICAgICAgYXdhaXQgdGhpcy5kZWxheSgpO1xuXG4gICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCB0aGlzLmRhdGFDbGllbnQuZ2V0RG9jdW1lbnRzKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZvcm1hdFJlc3BvbnNlKGRvY3VtZW50cywge1xuICAgICAgICBjb3VudDogZG9jdW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2V0Q2FjaGUoY2FjaGVLZXksIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCAnZ2V0RG9jdW1lbnRzJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkb2N1bWVudHMgZm9yIGEgc3BlY2lmaWMgZGVhbFxuICAgKi9cbiAgYXN5bmMgZ2V0RGVhbERvY3VtZW50cyhkZWFsSWQ6IG51bWJlciwgb3B0aW9uczogT21pdDxEb2N1bWVudExpc3RPcHRpb25zLCAnZGVhbF9pZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBkZWFsX2lkOiBkZWFsSWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRvY3VtZW50cyBmb3IgYSBzcGVjaWZpYyBpbnZlc3RvclxuICAgKi9cbiAgYXN5bmMgZ2V0SW52ZXN0b3JEb2N1bWVudHMoaW52ZXN0b3JJZDogbnVtYmVyLCBvcHRpb25zOiBPbWl0PERvY3VtZW50TGlzdE9wdGlvbnMsICdpbnZlc3Rvcl9pZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBpbnZlc3Rvcl9pZDogaW52ZXN0b3JJZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2lnbmVkIGRvY3VtZW50c1xuICAgKi9cbiAgYXN5bmMgZ2V0U2lnbmVkRG9jdW1lbnRzKG9wdGlvbnM6IE9taXQ8RG9jdW1lbnRMaXN0T3B0aW9ucywgJ2lzX3NpZ25lZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBpc19zaWduZWQ6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHVuc2lnbmVkIGRvY3VtZW50c1xuICAgKi9cbiAgYXN5bmMgZ2V0VW5zaWduZWREb2N1bWVudHMob3B0aW9uczogT21pdDxEb2N1bWVudExpc3RPcHRpb25zLCAnaXNfc2lnbmVkJz4gPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50cyh7IC4uLm9wdGlvbnMsIGlzX3NpZ25lZDogZmFsc2UgfSk7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGRvY3VtZW50c1NlcnZpY2UgPSBuZXcgRG9jdW1lbnRzU2VydmljZSgpOyJdLCJuYW1lcyI6WyJCYXNlU2VydmljZSIsIkRvY3VtZW50c1NlcnZpY2UiLCJnZXREb2N1bWVudHMiLCJvcHRpb25zIiwiY2FjaGVLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FjaGVkIiwiZ2V0Q2FjaGVkIiwibG9nIiwiZGVsYXkiLCJkb2N1bWVudHMiLCJkYXRhQ2xpZW50IiwicmVzdWx0IiwiZm9ybWF0UmVzcG9uc2UiLCJjb3VudCIsImxlbmd0aCIsInNldENhY2hlIiwiZXJyb3IiLCJoYW5kbGVFcnJvciIsImdldERlYWxEb2N1bWVudHMiLCJkZWFsSWQiLCJkZWFsX2lkIiwiZ2V0SW52ZXN0b3JEb2N1bWVudHMiLCJpbnZlc3RvcklkIiwiaW52ZXN0b3JfaWQiLCJnZXRTaWduZWREb2N1bWVudHMiLCJpc19zaWduZWQiLCJnZXRVbnNpZ25lZERvY3VtZW50cyIsImRvY3VtZW50c1NlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/documents.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/index.ts":
/*!*******************************!*\
  !*** ./lib/services/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseService: () => (/* reexport safe */ _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService),\n/* harmony export */   DealsService: () => (/* reexport safe */ _deals_service__WEBPACK_IMPORTED_MODULE_1__.DealsService),\n/* harmony export */   DocumentsService: () => (/* reexport safe */ _documents_service__WEBPACK_IMPORTED_MODULE_3__.DocumentsService),\n/* harmony export */   InvestorsService: () => (/* reexport safe */ _investors_service__WEBPACK_IMPORTED_MODULE_2__.InvestorsService),\n/* harmony export */   ServiceFactory: () => (/* binding */ ServiceFactory),\n/* harmony export */   dealsService: () => (/* reexport safe */ _deals_service__WEBPACK_IMPORTED_MODULE_1__.dealsService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   documentsService: () => (/* reexport safe */ _documents_service__WEBPACK_IMPORTED_MODULE_3__.documentsService),\n/* harmony export */   investorsService: () => (/* reexport safe */ _investors_service__WEBPACK_IMPORTED_MODULE_2__.investorsService),\n/* harmony export */   services: () => (/* binding */ services)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/* harmony import */ var _deals_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deals.service */ \"(rsc)/./lib/services/deals.service.ts\");\n/* harmony import */ var _investors_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./investors.service */ \"(rsc)/./lib/services/investors.service.ts\");\n/* harmony import */ var _documents_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./documents.service */ \"(rsc)/./lib/services/documents.service.ts\");\n/**\n * Services Index\n * Export all services from a single location\n */ \n// Import first, then re-export\n\n\n\n\n\n\n// Service factory for creating new instances if needed\nclass ServiceFactory {\n    static createDealsService() {\n        return new _deals_service__WEBPACK_IMPORTED_MODULE_1__.DealsService();\n    }\n    static createInvestorsService() {\n        return new _investors_service__WEBPACK_IMPORTED_MODULE_2__.InvestorsService();\n    }\n    static createDocumentsService() {\n        return new _documents_service__WEBPACK_IMPORTED_MODULE_3__.DocumentsService();\n    }\n}\n// Export default services object for easy access\nconst services = {\n    deals: _deals_service__WEBPACK_IMPORTED_MODULE_1__.dealsService,\n    investors: _investors_service__WEBPACK_IMPORTED_MODULE_2__.investorsService,\n    documents: _documents_service__WEBPACK_IMPORTED_MODULE_3__.documentsService\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (services);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFNEM7QUFFN0MsK0JBQStCO0FBQzBDO0FBQ1k7QUFDSTtBQUV2QztBQUNRO0FBQ0k7QUFjOUQsdURBQXVEO0FBQ2hELE1BQU1hO0lBQ1gsT0FBT0MscUJBQXFCO1FBQzFCLE9BQU8sSUFBSVosd0RBQUVBO0lBQ2Y7SUFFQSxPQUFPYSx5QkFBeUI7UUFDOUIsT0FBTyxJQUFJVCxnRUFBRUE7SUFDZjtJQUVBLE9BQU9VLHlCQUF5QjtRQUM5QixPQUFPLElBQUlOLGdFQUFJQTtJQUNqQjtBQUNGO0FBRUEsaURBQWlEO0FBQzFDLE1BQU1PLFdBQVc7SUFDdEJDLE9BQU9kLHdEQUFFQTtJQUNUZSxXQUFXWCxnRUFBRUE7SUFDYlksV0FBV1IsZ0VBQUlBO0FBQ2pCLEVBQVc7QUFFWCxpRUFBZUssUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvLi9saWIvc2VydmljZXMvaW5kZXgudHM/MjU4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlcnZpY2VzIEluZGV4XG4gKiBFeHBvcnQgYWxsIHNlcnZpY2VzIGZyb20gYSBzaW5nbGUgbG9jYXRpb25cbiAqL1xuXG5leHBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4vYmFzZS5zZXJ2aWNlJztcblxuLy8gSW1wb3J0IGZpcnN0LCB0aGVuIHJlLWV4cG9ydFxuaW1wb3J0IHsgRGVhbHNTZXJ2aWNlIGFzIERTLCBkZWFsc1NlcnZpY2UgYXMgZHMgfSBmcm9tICcuL2RlYWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW52ZXN0b3JzU2VydmljZSBhcyBJUywgaW52ZXN0b3JzU2VydmljZSBhcyBpcyB9IGZyb20gJy4vaW52ZXN0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRzU2VydmljZSBhcyBEb2NTLCBkb2N1bWVudHNTZXJ2aWNlIGFzIGRvY3MgfSBmcm9tICcuL2RvY3VtZW50cy5zZXJ2aWNlJztcblxuZXhwb3J0IHsgRFMgYXMgRGVhbHNTZXJ2aWNlLCBkcyBhcyBkZWFsc1NlcnZpY2UgfTtcbmV4cG9ydCB7IElTIGFzIEludmVzdG9yc1NlcnZpY2UsIGlzIGFzIGludmVzdG9yc1NlcnZpY2UgfTtcbmV4cG9ydCB7IERvY1MgYXMgRG9jdW1lbnRzU2VydmljZSwgZG9jcyBhcyBkb2N1bWVudHNTZXJ2aWNlIH07XG5cbi8vIFJlLWV4cG9ydCB0eXBlcyBmb3IgY29udmVuaWVuY2VcbmV4cG9ydCB0eXBlIHtcbiAgRGVhbFdpdGhDb21wYW55LFxuICBEZWFsRGV0YWlscyxcbiAgRGVhbExpc3RPcHRpb25zXG59IGZyb20gJy4vZGVhbHMuc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIHtcbiAgSW52ZXN0b3JQcm9maWxlLFxuICBJbnZlc3Rvckxpc3RPcHRpb25zXG59IGZyb20gJy4vaW52ZXN0b3JzLnNlcnZpY2UnO1xuXG4vLyBTZXJ2aWNlIGZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXMgaWYgbmVlZGVkXG5leHBvcnQgY2xhc3MgU2VydmljZUZhY3Rvcnkge1xuICBzdGF0aWMgY3JlYXRlRGVhbHNTZXJ2aWNlKCkge1xuICAgIHJldHVybiBuZXcgRFMoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnZlc3RvcnNTZXJ2aWNlKCkge1xuICAgIHJldHVybiBuZXcgSVMoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVEb2N1bWVudHNTZXJ2aWNlKCkge1xuICAgIHJldHVybiBuZXcgRG9jUygpO1xuICB9XG59XG5cbi8vIEV4cG9ydCBkZWZhdWx0IHNlcnZpY2VzIG9iamVjdCBmb3IgZWFzeSBhY2Nlc3NcbmV4cG9ydCBjb25zdCBzZXJ2aWNlcyA9IHtcbiAgZGVhbHM6IGRzLFxuICBpbnZlc3RvcnM6IGlzLFxuICBkb2N1bWVudHM6IGRvY3Ncbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IHNlcnZpY2VzOyJdLCJuYW1lcyI6WyJCYXNlU2VydmljZSIsIkRlYWxzU2VydmljZSIsIkRTIiwiZGVhbHNTZXJ2aWNlIiwiZHMiLCJJbnZlc3RvcnNTZXJ2aWNlIiwiSVMiLCJpbnZlc3RvcnNTZXJ2aWNlIiwiaXMiLCJEb2N1bWVudHNTZXJ2aWNlIiwiRG9jUyIsImRvY3VtZW50c1NlcnZpY2UiLCJkb2NzIiwiU2VydmljZUZhY3RvcnkiLCJjcmVhdGVEZWFsc1NlcnZpY2UiLCJjcmVhdGVJbnZlc3RvcnNTZXJ2aWNlIiwiY3JlYXRlRG9jdW1lbnRzU2VydmljZSIsInNlcnZpY2VzIiwiZGVhbHMiLCJpbnZlc3RvcnMiLCJkb2N1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/index.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/investors.service.ts":
/*!*******************************************!*\
  !*** ./lib/services/investors.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvestorsService: () => (/* binding */ InvestorsService),\n/* harmony export */   investorsService: () => (/* binding */ investorsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Investors Service\n * Handles all investor-related operations\n */ \nclass InvestorsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get current investor (from session/auth)\n   */ async getCurrentInvestor() {\n        const cacheKey = \"investor:current\";\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getCurrentInvestor\");\n            await this.delay();\n            const investor = await this.dataClient.getCurrentInvestor();\n            if (investor) {\n                this.setCache(cacheKey, investor);\n            }\n            return investor;\n        } catch (error) {\n            this.handleError(error, \"getCurrentInvestor\");\n        }\n    }\n    /**\n   * Get investor by ID\n   */ async getInvestorById(id) {\n        const cacheKey = `investor:${id}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getInvestorById\", {\n                id\n            });\n            await this.delay();\n            const investor = await this.dataClient.getInvestorById(id);\n            if (!investor) return null;\n            // Get additional metrics\n            const [commitments, transactions] = await Promise.all([\n                this.dataClient.getCommitments(id),\n                this.dataClient.getTransactions({\n                    investor_id: id\n                })\n            ]);\n            const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n            const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n            const capitalCalls = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\");\n            const totalCalled = capitalCalls.reduce((sum, t)=>sum + t.amount, 0);\n            const profile = {\n                ...investor,\n                totalCommitted,\n                totalCalled,\n                activeDeals: signedCommitments.length,\n                portfolioValue: totalCommitted * 1.25 // Mock 25% appreciation\n            };\n            this.setCache(cacheKey, profile);\n            return profile;\n        } catch (error) {\n            this.handleError(error, \"getInvestorById\");\n        }\n    }\n    /**\n   * Get all investors (admin function)\n   */ async getInvestors(options = {}) {\n        const cacheKey = `investors:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getInvestors\", options);\n            await this.delay();\n            let investors = await this.dataClient.getInvestors();\n            // Filter by type\n            if (options.type) {\n                investors = investors.filter((i)=>i.type === options.type);\n            }\n            // Filter by KYC status\n            if (options.kycStatus) {\n                investors = investors.filter((i)=>i.kyc_status === options.kycStatus);\n            }\n            // Search\n            if (options.search) {\n                investors = this.searchFilter(investors, options.search, [\n                    \"name\",\n                    \"email\"\n                ]);\n            }\n            // Sort\n            if (options.sortBy) {\n                investors = this.sortBy(investors, options.sortBy, options.sortOrder);\n            }\n            // Paginate\n            const paginated = this.paginate(investors, options.page || 1, options.limit || 10);\n            const result = this.formatResponse(paginated.data, {\n                pagination: paginated.pagination\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getInvestors\");\n        }\n    }\n    /**\n   * Get investor dashboard data\n   */ async getDashboardData(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return null;\n                id = currentInvestor.id;\n            }\n            const cacheKey = `dashboard:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getDashboardData\", {\n                investorId: id\n            });\n            await this.delay();\n            const dashboardData = await this.dataClient.getDashboardData(id);\n            this.setCache(cacheKey, dashboardData);\n            return dashboardData;\n        } catch (error) {\n            this.handleError(error, \"getDashboardData\");\n        }\n    }\n    /**\n   * Get investor portfolio data\n   */ async getPortfolioData(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return null;\n                id = currentInvestor.id;\n            }\n            const cacheKey = `portfolio:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getPortfolioData\", {\n                investorId: id\n            });\n            await this.delay();\n            const portfolioData = await this.dataClient.getPortfolioData(id);\n            this.setCache(cacheKey, portfolioData);\n            return portfolioData;\n        } catch (error) {\n            this.handleError(error, \"getPortfolioData\");\n        }\n    }\n    /**\n   * Get investor commitments\n   */ async getCommitments(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return [];\n                id = currentInvestor.id;\n            }\n            const cacheKey = `commitments:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getCommitments\", {\n                investorId: id\n            });\n            await this.delay();\n            const commitments = await this.dataClient.getCommitments(id);\n            this.setCache(cacheKey, commitments);\n            return commitments;\n        } catch (error) {\n            this.handleError(error, \"getCommitments\");\n        }\n    }\n    /**\n   * Get investor transactions\n   */ async getTransactions(investorId, options = {}) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return [];\n                id = currentInvestor.id;\n            }\n            const cacheKey = `transactions:${id}:${JSON.stringify(options)}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getTransactions\", {\n                investorId: id,\n                options\n            });\n            await this.delay();\n            const transactions = await this.dataClient.getTransactions({\n                investor_id: id,\n                type: options.type,\n                status: options.status,\n                limit: options.limit\n            });\n            this.setCache(cacheKey, transactions);\n            return transactions;\n        } catch (error) {\n            this.handleError(error, \"getTransactions\");\n        }\n    }\n    /**\n   * Update investor profile (mock - would integrate with auth)\n   */ async updateProfile(updates) {\n        try {\n            const currentInvestor = await this.getCurrentInvestor();\n            if (!currentInvestor) return null;\n            this.log(\"updateProfile\", updates);\n            // In real implementation, this would update the database\n            // For now, just return the updated investor\n            const updated = {\n                ...currentInvestor,\n                ...updates,\n                updated_at: new Date().toISOString()\n            };\n            // Clear cache\n            this.clearCache();\n            return updated;\n        } catch (error) {\n            this.handleError(error, \"updateProfile\");\n        }\n    }\n    /**\n   * Get investor summary stats\n   */ async getSummaryStats(investorId) {\n        try {\n            const dashboardData = await this.getDashboardData(investorId);\n            if (!dashboardData) return null;\n            return this.formatResponse({\n                totalCommitted: dashboardData.summary.totalCommitted,\n                totalCalled: dashboardData.summary.totalCalled,\n                totalDistributed: dashboardData.summary.totalDistributed,\n                currentValue: dashboardData.summary.currentValue,\n                totalGains: dashboardData.summary.totalGains,\n                irr: dashboardData.summary.portfolioIRR,\n                moic: dashboardData.summary.portfolioMOIC,\n                activeDeals: dashboardData.summary.activeDeals\n            });\n        } catch (error) {\n            this.handleError(error, \"getSummaryStats\");\n        }\n    }\n}\n// Export singleton instance\nconst investorsService = new InvestorsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/investors.service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();