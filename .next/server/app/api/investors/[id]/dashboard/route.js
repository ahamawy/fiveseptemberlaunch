"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/investors/[id]/dashboard/route";
exports.ids = ["app/api/investors/[id]/dashboard/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ahmedelhamawy_Desktop_15_1_1_investor_portal_dashboard_app_api_investors_id_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/investors/[id]/dashboard/route.ts */ \"(rsc)/./app/api/investors/[id]/dashboard/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/investors/[id]/dashboard/route\",\n        pathname: \"/api/investors/[id]/dashboard\",\n        filename: \"route\",\n        bundlePath: \"app/api/investors/[id]/dashboard/route\"\n    },\n    resolvedPagePath: \"/Users/ahmedelhamawy/Desktop/15.1.1 investor-portal-dashboard/app/api/investors/[id]/dashboard/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ahmedelhamawy_Desktop_15_1_1_investor_portal_dashboard_app_api_investors_id_dashboard_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/investors/[id]/dashboard/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbnZlc3RvcnMlMkYlNUJpZCU1RCUyRmRhc2hib2FyZCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGaW52ZXN0b3JzJTJGJTVCaWQlNUQlMkZkYXNoYm9hcmQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZpbnZlc3RvcnMlMkYlNUJpZCU1RCUyRmRhc2hib2FyZCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFobWVkZWxoYW1hd3klMkZEZXNrdG9wJTJGMTUuMS4xJTIwaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZhaG1lZGVsaGFtYXd5JTJGRGVza3RvcCUyRjE1LjEuMSUyMGludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VEO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8/YzYxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYWhtZWRlbGhhbWF3eS9EZXNrdG9wLzE1LjEuMSBpbnZlc3Rvci1wb3J0YWwtZGFzaGJvYXJkL2FwcC9hcGkvaW52ZXN0b3JzL1tpZF0vZGFzaGJvYXJkL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9haG1lZGVsaGFtYXd5L0Rlc2t0b3AvMTUuMS4xIGludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvYXBwL2FwaS9pbnZlc3RvcnMvW2lkXS9kYXNoYm9hcmQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/investors/[id]/dashboard/route.ts":
/*!***************************************************!*\
  !*** ./app/api/investors/[id]/dashboard/route.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services */ \"(rsc)/./lib/services/index.ts\");\n\n\nasync function GET(request, { params }) {\n    try {\n        const investorId = parseInt(params.id);\n        if (isNaN(investorId)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid investor ID\"\n            }, {\n                status: 400\n            });\n        }\n        // Use the service layer which handles mock vs Supabase\n        const dashboardData = await _lib_services__WEBPACK_IMPORTED_MODULE_1__.investorsService.getDashboardData(investorId);\n        if (!dashboardData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch dashboard data\"\n            }, {\n                status: 404\n            });\n        }\n        // Map service result (summary/recentActivity) to UI shape (portfolio/performance/activeDeals)\n        const s = dashboardData.summary;\n        const ui = {\n            portfolio: {\n                totalValue: s.currentValue,\n                totalCommitted: s.totalCommitted,\n                totalDistributed: s.totalDistributed,\n                unrealizedGain: s.totalGains\n            },\n            performance: {\n                irr: s.portfolioIRR,\n                moic: s.portfolioMOIC,\n                dpi: s.totalDistributed / s.totalCalled || 0,\n                tvpi: s.currentValue / s.totalCalled || 0\n            },\n            recentActivity: dashboardData.recentActivity,\n            activeDeals: s.activeDeals\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(ui);\n    } catch (error) {\n        console.error(\"Error fetching dashboard data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2ludmVzdG9ycy9baWRdL2Rhc2hib2FyZC9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDTjtBQUUzQyxlQUFlRSxJQUNwQkMsT0FBb0IsRUFDcEIsRUFBRUMsTUFBTSxFQUE4QjtJQUV0QyxJQUFJO1FBQ0YsTUFBTUMsYUFBYUMsU0FBU0YsT0FBT0csRUFBRTtRQUVyQyxJQUFJQyxNQUFNSCxhQUFhO1lBQ3JCLE9BQU9MLHFEQUFZQSxDQUFDUyxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQXNCLEdBQy9CO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSx1REFBdUQ7UUFDdkQsTUFBTUMsZ0JBQWdCLE1BQU1YLDJEQUFnQkEsQ0FBQ1ksZ0JBQWdCLENBQUNSO1FBRTlELElBQUksQ0FBQ08sZUFBZTtZQUNsQixPQUFPWixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFpQyxHQUMxQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsOEZBQThGO1FBQzlGLE1BQU1HLElBQUlGLGNBQWNHLE9BQU87UUFDL0IsTUFBTUMsS0FBSztZQUNUQyxXQUFXO2dCQUNUQyxZQUFZSixFQUFFSyxZQUFZO2dCQUMxQkMsZ0JBQWdCTixFQUFFTSxjQUFjO2dCQUNoQ0Msa0JBQWtCUCxFQUFFTyxnQkFBZ0I7Z0JBQ3BDQyxnQkFBZ0JSLEVBQUVTLFVBQVU7WUFDOUI7WUFDQUMsYUFBYTtnQkFDWEMsS0FBS1gsRUFBRVksWUFBWTtnQkFDbkJDLE1BQU1iLEVBQUVjLGFBQWE7Z0JBQ3JCQyxLQUFLZixFQUFFTyxnQkFBZ0IsR0FBR1AsRUFBRWdCLFdBQVcsSUFBSTtnQkFDM0NDLE1BQU1qQixFQUFFSyxZQUFZLEdBQUdMLEVBQUVnQixXQUFXLElBQUk7WUFDMUM7WUFDQUUsZ0JBQWdCcEIsY0FBY29CLGNBQWM7WUFDNUNDLGFBQWFuQixFQUFFbUIsV0FBVztRQUM1QjtRQUVBLE9BQU9qQyxxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDTztJQUMzQixFQUFFLE9BQU9OLE9BQU87UUFDZHdCLFFBQVF4QixLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxPQUFPVixxREFBWUEsQ0FBQ1MsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQXdCLEdBQ2pDO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2FwcC9hcGkvaW52ZXN0b3JzL1tpZF0vZGFzaGJvYXJkL3JvdXRlLnRzPzBiYjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGludmVzdG9yc1NlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogeyBpZDogc3RyaW5nIH0gfVxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgaW52ZXN0b3JJZCA9IHBhcnNlSW50KHBhcmFtcy5pZCk7XG4gICAgXG4gICAgaWYgKGlzTmFOKGludmVzdG9ySWQpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIGludmVzdG9yIElEJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSBzZXJ2aWNlIGxheWVyIHdoaWNoIGhhbmRsZXMgbW9jayB2cyBTdXBhYmFzZVxuICAgIGNvbnN0IGRhc2hib2FyZERhdGEgPSBhd2FpdCBpbnZlc3RvcnNTZXJ2aWNlLmdldERhc2hib2FyZERhdGEoaW52ZXN0b3JJZCk7XG4gICAgXG4gICAgaWYgKCFkYXNoYm9hcmREYXRhKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggZGFzaGJvYXJkIGRhdGEnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTWFwIHNlcnZpY2UgcmVzdWx0IChzdW1tYXJ5L3JlY2VudEFjdGl2aXR5KSB0byBVSSBzaGFwZSAocG9ydGZvbGlvL3BlcmZvcm1hbmNlL2FjdGl2ZURlYWxzKVxuICAgIGNvbnN0IHMgPSBkYXNoYm9hcmREYXRhLnN1bW1hcnk7XG4gICAgY29uc3QgdWkgPSB7XG4gICAgICBwb3J0Zm9saW86IHtcbiAgICAgICAgdG90YWxWYWx1ZTogcy5jdXJyZW50VmFsdWUsXG4gICAgICAgIHRvdGFsQ29tbWl0dGVkOiBzLnRvdGFsQ29tbWl0dGVkLFxuICAgICAgICB0b3RhbERpc3RyaWJ1dGVkOiBzLnRvdGFsRGlzdHJpYnV0ZWQsICBcbiAgICAgICAgdW5yZWFsaXplZEdhaW46IHMudG90YWxHYWluc1xuICAgICAgfSxcbiAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgIGlycjogcy5wb3J0Zm9saW9JUlIsXG4gICAgICAgIG1vaWM6IHMucG9ydGZvbGlvTU9JQyxcbiAgICAgICAgZHBpOiBzLnRvdGFsRGlzdHJpYnV0ZWQgLyBzLnRvdGFsQ2FsbGVkIHx8IDAsXG4gICAgICAgIHR2cGk6IHMuY3VycmVudFZhbHVlIC8gcy50b3RhbENhbGxlZCB8fCAwXG4gICAgICB9LFxuICAgICAgcmVjZW50QWN0aXZpdHk6IGRhc2hib2FyZERhdGEucmVjZW50QWN0aXZpdHksXG4gICAgICBhY3RpdmVEZWFsczogcy5hY3RpdmVEZWFsc1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHVpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXNoYm9hcmQgZGF0YTonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiaW52ZXN0b3JzU2VydmljZSIsIkdFVCIsInJlcXVlc3QiLCJwYXJhbXMiLCJpbnZlc3RvcklkIiwicGFyc2VJbnQiLCJpZCIsImlzTmFOIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiZGFzaGJvYXJkRGF0YSIsImdldERhc2hib2FyZERhdGEiLCJzIiwic3VtbWFyeSIsInVpIiwicG9ydGZvbGlvIiwidG90YWxWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInRvdGFsQ29tbWl0dGVkIiwidG90YWxEaXN0cmlidXRlZCIsInVucmVhbGl6ZWRHYWluIiwidG90YWxHYWlucyIsInBlcmZvcm1hbmNlIiwiaXJyIiwicG9ydGZvbGlvSVJSIiwibW9pYyIsInBvcnRmb2xpb01PSUMiLCJkcGkiLCJ0b3RhbENhbGxlZCIsInR2cGkiLCJyZWNlbnRBY3Rpdml0eSIsImFjdGl2ZURlYWxzIiwiY29uc29sZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/investors/[id]/dashboard/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/client.ts":
/*!**************************!*\
  !*** ./lib/db/client.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataClient: () => (/* binding */ dataClient),\n/* harmony export */   getCurrentDataMode: () => (/* binding */ getCurrentDataMode),\n/* harmony export */   getDataClient: () => (/* binding */ getDataClient),\n/* harmony export */   isUsingMockData: () => (/* binding */ isUsingMockData),\n/* harmony export */   resetDataClient: () => (/* binding */ resetDataClient),\n/* harmony export */   simulateDelay: () => (/* binding */ simulateDelay)\n/* harmony export */ });\n/* harmony import */ var _mock_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mock-adapter */ \"(rsc)/./lib/db/mock-adapter.ts\");\n/* harmony import */ var _supabase_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./supabase-unified */ \"(rsc)/./lib/db/supabase-unified.ts\");\n/**\n * Database Client Abstraction\n * Switches between mock data and Supabase based on environment configuration\n */ \n\n// Runtime check for data source - always check at runtime\nconst checkUseMockData = ()=>{\n    // Server-side: always use env variable\n    if (true) {\n        return \"true\" === \"true\";\n    }\n    // Client-side: check localStorage first, then env\n    const localStorageSetting = localStorage.getItem(\"equitie-use-mock-data\");\n    if (localStorageSetting !== null) {\n        return localStorageSetting !== \"false\";\n    }\n    // Fall back to environment variable\n    return \"true\" === \"true\";\n};\n// Check if Supabase is properly configured\nconst checkSupabaseEnabled = ()=>{\n    const url = \"https://ikezqzljrupkzmyytgok.supabase.co\";\n    const key = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlrZXpxemxqcnVwa3pteXl0Z29rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMTI4ODMsImV4cCI6MjA2NTY4ODg4M30.fZ6X0wQ29LR94ZCtDWJkHD9NXUWPQSQJyscYestOSIs\";\n    return !!(url && key && url !== \"https://placeholder.supabase.co\");\n};\n/**\n * Database Client Factory\n * Returns appropriate client based on environment configuration\n */ class DataClientFactory {\n    static{\n        this.mockInstance = null;\n    }\n    static{\n        this.supabaseInstance = null;\n    }\n    static getClient() {\n        // Always check at runtime\n        const useMockData = checkUseMockData();\n        const supabaseEnabled = checkSupabaseEnabled();\n        // Use mock if explicitly set or if Supabase isn't configured\n        if (useMockData || !supabaseEnabled) {\n            if (!this.mockInstance) {\n                console.log(\"\\uD83D\\uDD27 Creating Mock Data Adapter\");\n                this.mockInstance = new _mock_adapter__WEBPACK_IMPORTED_MODULE_0__.MockAdapter();\n            }\n            return this.mockInstance;\n        } else {\n            if (!this.supabaseInstance) {\n                console.log(\"\\uD83D\\uDE80 Creating Supabase Adapter\");\n                this.supabaseInstance = new _supabase_unified__WEBPACK_IMPORTED_MODULE_1__.UnifiedSupabaseAdapter({\n                    useViews: true\n                });\n            }\n            return this.supabaseInstance;\n        }\n    }\n    static resetClient() {\n        // Clear both instances to force recreation\n        this.mockInstance = null;\n        this.supabaseInstance = null;\n        console.log(\"\\uD83D\\uDD04 Data clients reset\");\n    }\n    static getCurrentMode() {\n        const useMockData = checkUseMockData();\n        const supabaseEnabled = checkSupabaseEnabled();\n        return useMockData || !supabaseEnabled ? \"mock\" : \"supabase\";\n    }\n}\n// Export the client getter\nconst getDataClient = ()=>DataClientFactory.getClient();\n// Export a default client instance for convenience\nconst dataClient = getDataClient();\n// Helper function to check if using mock data\nconst isUsingMockData = ()=>checkUseMockData() || !checkSupabaseEnabled();\n// Export factory methods for external use\nconst resetDataClient = ()=>DataClientFactory.resetClient();\nconst getCurrentDataMode = ()=>DataClientFactory.getCurrentMode();\n// Helper function to simulate API delay in development\nconst simulateDelay = async (ms = 0)=>{\n    if ( true && checkUseMockData()) {\n        const delay = parseInt(\"0\" || 0);\n        if (delay > 0) {\n            await new Promise((resolve)=>setTimeout(resolve, ms || delay));\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/mock-adapter.ts":
/*!********************************!*\
  !*** ./lib/db/mock-adapter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockAdapter: () => (/* binding */ MockAdapter)\n/* harmony export */ });\n/* harmony import */ var _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mock-data/deals */ \"(rsc)/./lib/mock-data/deals.ts\");\n/* harmony import */ var _mock_data_investors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mock-data/investors */ \"(rsc)/./lib/mock-data/investors.ts\");\n/* harmony import */ var _mock_data_transactions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mock-data/transactions */ \"(rsc)/./lib/mock-data/transactions.ts\");\n/**\n * Mock Data Adapter\n * Provides Supabase-like API using local mock data\n */ // Import existing mock data\n\n\n\n// Convert existing mock data to match DB types\nconst convertCompany = (company)=>({\n        id: company.id,\n        public_id: company.publicId || `comp_${company.id}`,\n        name: company.name,\n        type: company.type,\n        sector: company.sector,\n        country: company.country,\n        website: company.website,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\nconst convertDeal = (deal)=>({\n        id: deal.id,\n        public_id: deal.publicId || `deal_${deal.id}`,\n        company_id: deal.companyId,\n        code: deal.code,\n        slug: deal.slug,\n        name: deal.name,\n        type: deal.type,\n        stage: deal.stage,\n        currency: deal.currency,\n        opening_date: deal.openingDate,\n        closing_date: deal.closingDate,\n        unit_price_init: deal.unitPriceInit,\n        target_raise: deal.targetRaise || null,\n        current_raise: deal.currentRaise || null,\n        minimum_investment: deal.minimumInvestment || null,\n        description: deal.description || null,\n        created_at: deal.createdAt || new Date().toISOString(),\n        updated_at: deal.updatedAt || new Date().toISOString()\n    });\nconst convertInvestor = (investor)=>({\n        id: investor.id,\n        public_id: investor.publicId || `inv_${investor.id}`,\n        user_id: investor.userId || null,\n        type: investor.type || \"individual\",\n        name: investor.name,\n        email: investor.email,\n        phone: investor.phone || null,\n        country: investor.country || null,\n        kyc_status: investor.kycStatus || \"approved\",\n        accredited: investor.accredited !== false,\n        created_at: investor.createdAt || new Date().toISOString(),\n        updated_at: investor.updatedAt || new Date().toISOString()\n    });\nconst convertCommitment = (commitment)=>({\n        id: commitment.id,\n        public_id: `comm_${commitment.id}`,\n        investor_id: commitment.investorId,\n        deal_id: commitment.dealId,\n        currency: commitment.currency,\n        amount: commitment.amount,\n        status: commitment.status,\n        signed_date: commitment.status === \"signed\" ? commitment.createdAt : null,\n        created_at: commitment.createdAt || new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\nconst convertTransaction = (transaction)=>({\n        id: transaction.id,\n        public_id: transaction.publicId || `txn_${transaction.id}`,\n        investor_id: transaction.investorId || null,\n        deal_id: transaction.dealId || null,\n        type: transaction.type,\n        status: transaction.status,\n        currency: transaction.currency,\n        amount: transaction.amount,\n        fee_amount: transaction.feeAmount || null,\n        reference: transaction.reference || null,\n        description: transaction.description || null,\n        processed_at: transaction.processedAt || null,\n        created_at: transaction.createdAt || new Date().toISOString(),\n        updated_at: transaction.updatedAt || new Date().toISOString()\n    });\n// Mock documents data\nconst mockDocuments = [\n    {\n        id: 1,\n        public_id: \"doc_1\",\n        type: \"termsheet\",\n        name: \"TechVision AI Series A Term Sheet\",\n        url: \"/documents/termsheet-techvision.pdf\",\n        mime_type: \"application/pdf\",\n        size_bytes: 245000,\n        deal_id: 1,\n        investor_id: null,\n        version: \"1.0\",\n        is_signed: false,\n        created_at: \"2024-01-15T10:00:00Z\",\n        updated_at: \"2024-01-15T10:00:00Z\"\n    },\n    {\n        id: 2,\n        public_id: \"doc_2\",\n        type: \"subscription_agreement\",\n        name: \"Subscription Agreement - John Doe\",\n        url: \"/documents/subscription-johndoe.pdf\",\n        mime_type: \"application/pdf\",\n        size_bytes: 512000,\n        deal_id: 1,\n        investor_id: 1,\n        version: \"1.0\",\n        is_signed: true,\n        created_at: \"2024-01-20T10:00:00Z\",\n        updated_at: \"2024-01-20T10:00:00Z\"\n    }\n];\nclass MockAdapter {\n    constructor(){\n        // Convert existing mock data\n        this.companies = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockCompanies.map(convertCompany);\n        this.deals = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockDeals.map(convertDeal);\n        this.investors = _mock_data_investors__WEBPACK_IMPORTED_MODULE_1__.mockInvestors.map(convertInvestor);\n        this.commitments = _mock_data_deals__WEBPACK_IMPORTED_MODULE_0__.mockCommitments.map(convertCommitment);\n        this.transactions = _mock_data_transactions__WEBPACK_IMPORTED_MODULE_2__.mockTransactions.map(convertTransaction);\n        this.documents = mockDocuments;\n    }\n    async getDeals(filters) {\n        let results = [\n            ...this.deals\n        ];\n        if (filters) {\n            if (filters.stage) {\n                results = results.filter((d)=>d.stage === filters.stage);\n            }\n            if (filters.type) {\n                results = results.filter((d)=>d.type === filters.type);\n            }\n            if (filters.company_id) {\n                results = results.filter((d)=>d.company_id === filters.company_id);\n            }\n            if (filters.search) {\n                const search = filters.search.toLowerCase();\n                results = results.filter((d)=>d.name.toLowerCase().includes(search) || d.code.toLowerCase().includes(search) || d.slug.toLowerCase().includes(search));\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getDealById(id) {\n        const deal = this.deals.find((d)=>d.id === id);\n        return Promise.resolve(deal || null);\n    }\n    async getDealBySlug(slug) {\n        const deal = this.deals.find((d)=>d.slug === slug);\n        return Promise.resolve(deal || null);\n    }\n    async getInvestors() {\n        return Promise.resolve([\n            ...this.investors\n        ]);\n    }\n    async getInvestorById(id) {\n        const investor = this.investors.find((i)=>i.id === id);\n        return Promise.resolve(investor || null);\n    }\n    async getCurrentInvestor() {\n        // Use mock user ID from environment or default to 1\n        const mockUserId = parseInt(\"1\" || 0);\n        return this.getInvestorById(mockUserId);\n    }\n    async getCompanies() {\n        return Promise.resolve([\n            ...this.companies\n        ]);\n    }\n    async getCompanyById(id) {\n        const company = this.companies.find((c)=>c.id === id);\n        return Promise.resolve(company || null);\n    }\n    async getCommitments(investorId) {\n        let results = [\n            ...this.commitments\n        ];\n        if (investorId) {\n            results = results.filter((c)=>c.investor_id === investorId);\n        }\n        return Promise.resolve(results);\n    }\n    async getCommitmentById(id) {\n        const commitment = this.commitments.find((c)=>c.id === id);\n        return Promise.resolve(commitment || null);\n    }\n    async getCommitmentsByDealId(dealId) {\n        const results = this.commitments.filter((c)=>c.deal_id === dealId);\n        return Promise.resolve(results);\n    }\n    async getTransactions(filters) {\n        let results = [\n            ...this.transactions\n        ];\n        if (filters) {\n            if (filters.investor_id) {\n                results = results.filter((t)=>t.investor_id === filters.investor_id);\n            }\n            if (filters.deal_id) {\n                results = results.filter((t)=>t.deal_id === filters.deal_id);\n            }\n            if (filters.type) {\n                results = results.filter((t)=>t.type === filters.type);\n            }\n            if (filters.status) {\n                results = results.filter((t)=>t.status === filters.status);\n            }\n            if (filters.from_date) {\n                results = results.filter((t)=>t.created_at >= filters.from_date);\n            }\n            if (filters.to_date) {\n                results = results.filter((t)=>t.created_at <= filters.to_date);\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getTransactionById(id) {\n        const transaction = this.transactions.find((t)=>t.id === id);\n        return Promise.resolve(transaction || null);\n    }\n    async getDocuments(filters) {\n        let results = [\n            ...this.documents\n        ];\n        if (filters) {\n            if (filters.deal_id) {\n                results = results.filter((d)=>d.deal_id === filters.deal_id);\n            }\n            if (filters.investor_id) {\n                results = results.filter((d)=>d.investor_id === filters.investor_id);\n            }\n            if (filters.type) {\n                results = results.filter((d)=>d.type === filters.type);\n            }\n            if (filters.is_signed !== undefined) {\n                results = results.filter((d)=>d.is_signed === filters.is_signed);\n            }\n            if (filters.offset) {\n                results = results.slice(filters.offset);\n            }\n            if (filters.limit) {\n                results = results.slice(0, filters.limit);\n            }\n        }\n        return Promise.resolve(results);\n    }\n    async getDocumentById(id) {\n        const document = this.documents.find((d)=>d.id === id);\n        return Promise.resolve(document || null);\n    }\n    async getDashboardData(investorId) {\n        const investor = await this.getInvestorById(investorId);\n        if (!investor) {\n            throw new Error(`Investor ${investorId} not found`);\n        }\n        const commitments = await this.getCommitments(investorId);\n        const transactions = await this.getTransactions({\n            investor_id: investorId\n        });\n        const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n        const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n        const capitalCalls = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\");\n        const totalCalled = capitalCalls.reduce((sum, t)=>sum + t.amount, 0);\n        const distributions = transactions.filter((t)=>t.type === \"distribution\" && t.status === \"completed\");\n        const totalDistributed = distributions.reduce((sum, t)=>sum + t.amount, 0);\n        const currentValue = totalCommitted * 1.25; // Mock 25% appreciation\n        const totalGains = currentValue + totalDistributed - totalCalled;\n        const recentActivity = transactions.slice(0, 5).map((t)=>({\n                id: t.public_id,\n                type: t.type,\n                description: t.description || `${t.type} processed`,\n                amount: t.amount,\n                date: t.created_at\n            }));\n        const upcomingCalls = signedCommitments.filter((c)=>{\n            const called = capitalCalls.filter((t)=>t.deal_id === c.deal_id).reduce((sum, t)=>sum + t.amount, 0);\n            return called < c.amount;\n        }).map((c)=>{\n            const deal = this.deals.find((d)=>d.id === c.deal_id);\n            return {\n                dealName: deal?.name || \"Unknown Deal\",\n                amount: c.amount * 0.25,\n                date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n                currency: c.currency\n            };\n        });\n        return Promise.resolve({\n            investor,\n            summary: {\n                totalCommitted,\n                totalCalled,\n                totalDistributed,\n                currentValue,\n                totalGains,\n                portfolioIRR: 18.5,\n                portfolioMOIC: 1.45,\n                activeDeals: signedCommitments.length\n            },\n            recentActivity,\n            upcomingCalls\n        });\n    }\n    async getPortfolioData(investorId) {\n        const commitments = await this.getCommitments(investorId);\n        const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n        const holdings = await Promise.all(signedCommitments.map(async (commitment)=>{\n            const deal = await this.getDealById(commitment.deal_id);\n            const company = deal?.company_id ? await this.getCompanyById(deal.company_id) : null;\n            const transactions = await this.getTransactions({\n                investor_id: investorId,\n                deal_id: commitment.deal_id\n            });\n            const capitalCalled = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\").reduce((sum, t)=>sum + t.amount, 0);\n            const capitalDistributed = transactions.filter((t)=>t.type === \"distribution\" && t.status === \"completed\").reduce((sum, t)=>sum + t.amount, 0);\n            const currentValue = capitalCalled * 1.35; // Mock 35% appreciation\n            const irr = 15 + Math.random() * 10; // Mock IRR 15-25%\n            const moic = currentValue / (capitalCalled || 1);\n            return {\n                deal: deal,\n                company: company,\n                commitment,\n                metrics: {\n                    capitalCalled,\n                    capitalDistributed,\n                    currentValue,\n                    irr,\n                    moic\n                }\n            };\n        }));\n        const totalValue = holdings.reduce((sum, h)=>sum + h.metrics.currentValue, 0);\n        const totalCalled = holdings.reduce((sum, h)=>sum + h.metrics.capitalCalled, 0);\n        const totalDistributed = holdings.reduce((sum, h)=>sum + h.metrics.capitalDistributed, 0);\n        const totalGains = totalValue + totalDistributed - totalCalled;\n        const averageIRR = holdings.reduce((sum, h)=>sum + (h.metrics.irr || 0), 0) / holdings.length;\n        const averageMOIC = totalValue / (totalCalled || 1);\n        return Promise.resolve({\n            holdings,\n            summary: {\n                totalHoldings: holdings.length,\n                totalValue,\n                totalGains,\n                averageIRR,\n                averageMOIC\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/mock-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/schema-manager/config.ts":
/*!*****************************************!*\
  !*** ./lib/db/schema-manager/config.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaConfig: () => (/* binding */ SchemaConfig)\n/* harmony export */ });\n/**\n * Schema Configuration\n * Environment detection and configuration management\n */ class SchemaConfig {\n    constructor(){\n        this.env = process.env;\n    }\n    /**\n   * Check if running in development mode\n   */ isDevelopment() {\n        return this.env.NODE_ENV === \"development\";\n    }\n    /**\n   * Check if running in production mode\n   */ isProduction() {\n        return this.env.NODE_ENV === \"production\";\n    }\n    /**\n   * Check if Supabase credentials are available\n   */ hasSupabaseCredentials() {\n        const url = this.env.NEXT_PUBLIC_SUPABASE_URL;\n        const anonKey = this.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n        // Check for placeholder values\n        const isPlaceholder = url === \"https://placeholder.supabase.co\" || anonKey === \"placeholder-anon-key\";\n        // Also check if Supabase is explicitly disabled\n        const isSupabaseEnabled = this.env.NEXT_PUBLIC_ENABLE_SUPABASE === \"true\";\n        return !!(url && anonKey && !isPlaceholder && isSupabaseEnabled);\n    }\n    /**\n   * Check if MCP is explicitly enabled\n   */ isMCPEnabled() {\n        return this.env.NEXT_PUBLIC_ENABLE_MCP === \"true\";\n    }\n    /**\n   * Check if using mock data\n   */ isUsingMockData() {\n        return this.env.NEXT_PUBLIC_USE_MOCK_DATA === \"true\";\n    }\n    /**\n   * Get Supabase URL\n   */ getSupabaseUrl() {\n        const url = this.env.NEXT_PUBLIC_SUPABASE_URL;\n        if (!url) throw new Error(\"Supabase URL not configured\");\n        // Return placeholder if not enabled\n        if (url === \"https://placeholder.supabase.co\" && this.env.NEXT_PUBLIC_ENABLE_SUPABASE !== \"true\") {\n            return url; // Don't throw for placeholders in mock mode\n        }\n        return url;\n    }\n    /**\n   * Get Supabase anonymous key\n   */ getSupabaseAnonKey() {\n        const key = this.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n        if (!key) throw new Error(\"Supabase anon key not configured\");\n        // Return placeholder if not enabled\n        if (key === \"placeholder-anon-key\" && this.env.NEXT_PUBLIC_ENABLE_SUPABASE !== \"true\") {\n            return key; // Don't throw for placeholders in mock mode\n        }\n        return key;\n    }\n    /**\n   * Get Supabase service key (for server-side operations)\n   */ getSupabaseServiceKey() {\n        return this.env.SUPABASE_SERVICE_KEY;\n    }\n    /**\n   * Get database URL (for migrations)\n   */ getDatabaseUrl() {\n        return this.env.DATABASE_URL;\n    }\n    /**\n   * Get Supabase project ID (for MCP)\n   */ getSupabaseProjectId() {\n        return this.env.SUPABASE_PROJECT_ID;\n    }\n    /**\n   * Get configuration for logging\n   */ getLogLevel() {\n        return this.env.NEXT_PUBLIC_LOG_LEVEL || \"info\";\n    }\n    /**\n   * Check if should enable query logging\n   */ shouldLogQueries() {\n        return this.isDevelopment() && this.getLogLevel() === \"debug\";\n    }\n    /**\n   * Get mock delay in milliseconds\n   */ getMockDelay() {\n        return parseInt(this.env.NEXT_PUBLIC_MOCK_DELAY_MS || \"0\", 10);\n    }\n    /**\n   * Get configuration summary\n   */ getSummary() {\n        return {\n            mode: this.isDevelopment() ? \"development\" : \"production\",\n            hasSupabaseCredentials: this.hasSupabaseCredentials(),\n            isMCPEnabled: this.isMCPEnabled(),\n            isUsingMockData: this.isUsingMockData(),\n            logLevel: this.getLogLevel(),\n            mockDelay: this.getMockDelay()\n        };\n    }\n    /**\n   * Validate Node.js version (Supabase JS requires Node >= 20)\n   */ validateNodeVersion() {\n        const nodeVersion = process.version;\n        const majorVersion = parseInt(nodeVersion.slice(1).split(\".\")[0]);\n        const requiredVersion = 20;\n        return {\n            ok: majorVersion >= requiredVersion,\n            version: nodeVersion,\n            required: `v${requiredVersion}.0.0`\n        };\n    }\n    /**\n   * Get Supabase project info from URL\n   */ getSupabaseProjectInfo() {\n        const url = this.env.NEXT_PUBLIC_SUPABASE_URL;\n        if (!url || url === \"https://placeholder.supabase.co\") {\n            return {\n                projectId: null,\n                region: null\n            };\n        }\n        // Extract from URL pattern: https://[projectId].supabase.co\n        const match = url.match(/https:\\/\\/([^.]+)\\.supabase\\.co/);\n        if (match) {\n            return {\n                projectId: match[1],\n                region: null // Region not in URL, would need API call\n            };\n        }\n        return {\n            projectId: null,\n            region: null\n        };\n    }\n    /**\n   * Check if Supabase credentials are valid (not just present)\n   */ hasValidSupabaseCredentials() {\n        if (!this.hasSupabaseCredentials()) return false;\n        const url = this.env.NEXT_PUBLIC_SUPABASE_URL;\n        const key = this.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n        // Check URL format\n        if (!url?.startsWith(\"https://\") || !url?.includes(\".supabase.co\")) {\n            return false;\n        }\n        // Check key format (basic JWT structure check)\n        if (!key?.includes(\".\") || key.split(\".\").length !== 3) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Get data source mode\n   */ getDataSourceMode() {\n        if (this.isUsingMockData()) return \"mock\";\n        if (this.isMCPEnabled() && this.isDevelopment()) return \"mcp\";\n        if (this.hasValidSupabaseCredentials()) return \"supabase\";\n        return \"mock\"; // fallback\n    }\n    /**\n   * Get all environment diagnostics\n   */ getDiagnostics() {\n        const nodeValidation = this.validateNodeVersion();\n        const projectInfo = this.getSupabaseProjectInfo();\n        return {\n            environment: {\n                mode: this.isDevelopment() ? \"development\" : \"production\",\n                nodeVersion: nodeValidation,\n                dataSource: this.getDataSourceMode()\n            },\n            supabase: {\n                configured: this.hasSupabaseCredentials(),\n                valid: this.hasValidSupabaseCredentials(),\n                enabled: this.env.NEXT_PUBLIC_ENABLE_SUPABASE === \"true\",\n                projectId: projectInfo.projectId,\n                url: this.env.NEXT_PUBLIC_SUPABASE_URL || null\n            },\n            features: {\n                mockData: this.isUsingMockData(),\n                mcp: this.isMCPEnabled(),\n                devTools: this.env.NEXT_PUBLIC_ENABLE_DEVTOOLS === \"true\",\n                logging: this.shouldLogQueries()\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/schema-manager/config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/supabase-unified.ts":
/*!************************************!*\
  !*** ./lib/db/supabase-unified.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSupabaseAdapter: () => (/* binding */ SimpleSupabaseAdapter),\n/* harmony export */   SupabaseAdapter: () => (/* binding */ SupabaseAdapter),\n/* harmony export */   UnifiedSupabaseAdapter: () => (/* binding */ UnifiedSupabaseAdapter)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Unified Supabase Data Adapter\n * Consolidates both simple and complex adapter functionality\n * Configurable to use either database views or direct tables\n */ \nclass UnifiedSupabaseAdapter {\n    constructor(options){\n        const supabaseUrl = options?.url || \"https://ikezqzljrupkzmyytgok.supabase.co\";\n        const supabaseKey = options?.anonKey || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlrZXpxemxqcnVwa3pteXl0Z29rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMTI4ODMsImV4cCI6MjA2NTY4ODg4M30.fZ6X0wQ29LR94ZCtDWJkHD9NXUWPQSQJyscYestOSIs\";\n        if (!supabaseUrl || !supabaseKey) {\n            throw new Error(\"Missing Supabase configuration. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n        }\n        this.client = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n        this.useViews = options?.useViews ?? true; // Default to using views for simplicity\n        console.log(`✅ Unified Supabase client initialized (mode: ${this.useViews ? \"views\" : \"tables\"})`);\n    }\n    // ==========================================\n    // DEALS\n    // ==========================================\n    async getDeals(filters) {\n        try {\n            let query = (this.useViews ? this.client.schema(\"analytics\").from(\"v_deals\") : this.client.from(\"deals\")).select(\"*\").order(\"id\", {\n                ascending: false\n            });\n            // Apply filters\n            if (filters?.stage) {\n                const columnName = this.useViews ? \"stage\" : \"deal_stage\";\n                query = query.eq(columnName, filters.stage);\n            }\n            if (filters?.status) {\n                const columnName = this.useViews ? \"status\" : \"deal_status\";\n                query = query.eq(columnName, filters.status);\n            }\n            if (filters?.investorId) {\n                query = query.eq(\"investor_id\", filters.investorId);\n            }\n            if (filters?.search) {\n                query = query.ilike(\"name\", `%${filters.search}%`);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching deals:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getDeals:\", error);\n            return [];\n        }\n    }\n    async getDealById(id) {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_deals\") : this.client.from(\"deals\")).select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching deal:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getDealById:\", error);\n            return null;\n        }\n    }\n    async getDealBySlug(slug) {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_deals\") : this.client.from(\"deals\")).select(\"*\").eq(\"slug\", slug).single();\n            if (error) {\n                console.error(\"Error fetching deal by slug:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getDealBySlug:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // INVESTORS\n    // ==========================================\n    async getInvestors() {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_investors\") : this.client.from(\"investors\")).select(\"*\").order(\"id\");\n            if (error) {\n                console.error(\"Error fetching investors:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getInvestors:\", error);\n            return [];\n        }\n    }\n    async getInvestorById(id) {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_investors\") : this.client.from(\"investors\")).select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching investor:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getInvestorById:\", error);\n            return null;\n        }\n    }\n    async getCurrentInvestor() {\n        // In production, this would get the authenticated user's investor profile\n        // For now, return investor with ID 1 as default\n        return this.getInvestorById(1);\n    }\n    // ==========================================\n    // COMPANIES\n    // ==========================================\n    async getCompanies() {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_companies\") : this.client.from(\"companies\")).select(\"*\").order(\"id\");\n            if (error) {\n                console.error(\"Error fetching companies:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getCompanies:\", error);\n            return [];\n        }\n    }\n    async getCompanyById(id) {\n        try {\n            const { data, error } = await (this.useViews ? this.client.schema(\"analytics\").from(\"v_companies\") : this.client.from(\"companies\")).select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching company:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getCompanyById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // COMMITMENTS\n    // ==========================================\n    async getCommitments(investorId) {\n        try {\n            const tableName = this.useViews ? \"commitments_view\" : \"commitments\";\n            let query = this.client.from(tableName).select(\"*\").order(\"commitment_date\", {\n                ascending: false\n            });\n            if (investorId) {\n                query = query.eq(\"investor_id\", investorId);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching commitments:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getCommitments:\", error);\n            return [];\n        }\n    }\n    async getCommitmentById(id) {\n        try {\n            const tableName = this.useViews ? \"commitments_view\" : \"commitments\";\n            const { data, error } = await this.client.select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching commitment:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getCommitmentById:\", error);\n            return null;\n        }\n    }\n    async getCommitmentsByDealId(dealId) {\n        try {\n            const tableName = this.useViews ? \"commitments_view\" : \"commitments\";\n            const { data, error } = await this.client.select(\"*\").eq(\"deal_id\", dealId).order(\"commitment_date\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"Error fetching commitments by deal:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getCommitmentsByDealId:\", error);\n            return [];\n        }\n    }\n    // ==========================================\n    // TRANSACTIONS\n    // ==========================================\n    async getTransactions(filters) {\n        try {\n            let query = (this.useViews ? this.client.schema(\"analytics\").from(\"v_transactions\") : this.client.from(\"transactions\")).select(\"*\").order(\"transaction_date\", {\n                ascending: false\n            });\n            if (filters?.investorId) {\n                query = query.eq(\"investor_id\", filters.investorId);\n            }\n            if (filters?.dealId) {\n                query = query.eq(\"deal_id\", filters.dealId);\n            }\n            if (filters?.type) {\n                query = query.eq(\"type\", filters.type);\n            }\n            if (filters?.startDate) {\n                query = query.gte(\"transaction_date\", filters.startDate);\n            }\n            if (filters?.endDate) {\n                query = query.lte(\"transaction_date\", filters.endDate);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching transactions:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getTransactions:\", error);\n            return [];\n        }\n    }\n    async getTransactionById(id) {\n        try {\n            const tableName = this.useViews ? \"transactions_view\" : \"transactions\";\n            const { data, error } = await this.client.from(tableName).select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching transaction:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getTransactionById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // DOCUMENTS\n    // ==========================================\n    async getDocuments(filters) {\n        try {\n            const tableName = this.useViews ? \"documents_view\" : \"documents\";\n            let query = this.client.from(tableName).select(\"*\").order(\"uploaded_date\", {\n                ascending: false\n            });\n            if (filters?.investorId) {\n                query = query.eq(\"investor_id\", filters.investorId);\n            }\n            if (filters?.dealId) {\n                query = query.eq(\"deal_id\", filters.dealId);\n            }\n            if (filters?.type) {\n                query = query.eq(\"type\", filters.type);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error(\"Error fetching documents:\", error);\n                return [];\n            }\n            return data || [];\n        } catch (error) {\n            console.error(\"Error in getDocuments:\", error);\n            return [];\n        }\n    }\n    async getDocumentById(id) {\n        try {\n            const tableName = this.useViews ? \"documents_view\" : \"documents\";\n            const { data, error } = await this.client.from(tableName).select(\"*\").eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching document:\", error);\n                return null;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error in getDocumentById:\", error);\n            return null;\n        }\n    }\n    // ==========================================\n    // DASHBOARD & PORTFOLIO\n    // ==========================================\n    async getDashboardData(investorId) {\n        try {\n            // For views mode, use pre-aggregated view\n            if (this.useViews) {\n                const { data, error } = await this.client.from(\"dashboard_view\").select(\"*\").eq(\"investor_id\", investorId).single();\n                if (error || !data) {\n                    console.error(\"Error fetching dashboard data:\", error);\n                    return this.getEmptyDashboard();\n                }\n                return data;\n            }\n            // For tables mode, aggregate manually\n            const [investor, commitments, transactions] = await Promise.all([\n                this.getInvestorById(investorId),\n                this.getCommitments(investorId),\n                this.getTransactions({\n                    investorId\n                })\n            ]);\n            if (!investor) {\n                return this.getEmptyDashboard();\n            }\n            const totalCommitted = commitments.reduce((sum, c)=>sum + c.amount, 0);\n            const totalDeployed = commitments.reduce((sum, c)=>sum + c.deployed_amount, 0);\n            const totalValue = commitments.reduce((sum, c)=>sum + c.current_value, 0);\n            const totalReturns = totalValue - totalDeployed;\n            return {\n                investorId,\n                investorName: investor.name,\n                totalCommitted,\n                totalDeployed,\n                totalValue,\n                totalReturns,\n                irr: this.calculateIRR(transactions),\n                multiple: totalDeployed > 0 ? totalValue / totalDeployed : 0,\n                activeDeals: commitments.length,\n                lastUpdated: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Error in getDashboardData:\", error);\n            return this.getEmptyDashboard();\n        }\n    }\n    async getPortfolioData(investorId) {\n        try {\n            const commitments = await this.getCommitments(investorId);\n            const holdings = await Promise.all(commitments.map(async (commitment)=>{\n                const deal = await this.getDealById(commitment.deal_id);\n                const company = deal ? await this.getCompanyById(deal.company_id) : null;\n                return {\n                    dealId: commitment.deal_id,\n                    dealName: deal?.name || \"Unknown Deal\",\n                    companyName: company?.name || \"Unknown Company\",\n                    investmentDate: commitment.commitment_date,\n                    investedAmount: commitment.deployed_amount,\n                    currentValue: commitment.current_value,\n                    ownership: commitment.ownership_percentage || 0,\n                    status: deal?.status || \"active\"\n                };\n            }));\n            const totalInvested = holdings.reduce((sum, h)=>sum + h.investedAmount, 0);\n            const totalValue = holdings.reduce((sum, h)=>sum + h.currentValue, 0);\n            return {\n                investorId,\n                holdings,\n                totalInvested,\n                totalValue,\n                totalReturn: totalValue - totalInvested,\n                returnPercentage: totalInvested > 0 ? (totalValue - totalInvested) / totalInvested * 100 : 0\n            };\n        } catch (error) {\n            console.error(\"Error in getPortfolioData:\", error);\n            return {\n                investorId,\n                holdings: [],\n                totalInvested: 0,\n                totalValue: 0,\n                totalReturn: 0,\n                returnPercentage: 0\n            };\n        }\n    }\n    // ==========================================\n    // HELPER METHODS\n    // ==========================================\n    getEmptyDashboard() {\n        return {\n            investorId: 0,\n            investorName: \"\",\n            totalCommitted: 0,\n            totalDeployed: 0,\n            totalValue: 0,\n            totalReturns: 0,\n            irr: 0,\n            multiple: 0,\n            activeDeals: 0,\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    calculateIRR(transactions) {\n        // Simplified IRR calculation - in production, use proper XIRR formula\n        if (transactions.length === 0) return 0;\n        const totalInflows = transactions.filter((t)=>t.type === \"distribution\").reduce((sum, t)=>sum + t.amount, 0);\n        const totalOutflows = transactions.filter((t)=>t.type === \"capital_call\").reduce((sum, t)=>sum + t.amount, 0);\n        if (totalOutflows === 0) return 0;\n        // Simplified return calculation\n        const simpleReturn = (totalInflows - totalOutflows) / totalOutflows * 100;\n        return Math.round(simpleReturn * 100) / 100;\n    }\n}\n// Export for backward compatibility\nconst SupabaseAdapter = UnifiedSupabaseAdapter;\nconst SimpleSupabaseAdapter = UnifiedSupabaseAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/supabase-unified.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/supabase/client.ts":
/*!***********************************!*\
  !*** ./lib/db/supabase/client.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseDirectClient: () => (/* binding */ SupabaseDirectClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Supabase Direct Client\n * Production-optimized direct SQL connection to Supabase\n * No MCP overhead - maximum performance for feature shipping\n */ \nclass SupabaseDirectClient {\n    constructor(config){\n        this.client = null;\n        this.cacheTimeout = 60000 // 1 minute default cache\n        ;\n        this.config = config;\n        // Initialize Supabase client\n        this.client = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(config.getSupabaseUrl(), config.getSupabaseAnonKey(), {\n            auth: {\n                persistSession: true,\n                autoRefreshToken: true\n            },\n            db: {\n                schema: \"public\"\n            }\n        });\n        // Initialize query cache\n        this.queryCache = new Map();\n    }\n    /**\n   * Get the raw Supabase client\n   */ getClient() {\n        return this.client;\n    }\n    /**\n   * Execute raw SQL query\n   */ async executeSQL(query, params) {\n        try {\n            if (this.config.shouldLogQueries()) {\n                console.log(\"Executing SQL:\", query, params);\n            }\n            const { data, error } = await this.client.rpc(\"execute_sql\", {\n                query,\n                params: params || {}\n            });\n            if (error) {\n                console.error(\"SQL execution error:\", error);\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Direct SQL execution failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Execute a prepared statement (stored procedure)\n   */ async executePrepared(functionName, params) {\n        try {\n            if (this.config.shouldLogQueries()) {\n                console.log(\"Executing function:\", functionName, params);\n            }\n            const { data, error } = await this.client.rpc(functionName, params);\n            if (error) {\n                console.error(\"Function execution error:\", error);\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Prepared statement failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Query builder for common operations\n   */ from(table) {\n        return this.client.from(table);\n    }\n    /**\n   * Transaction support\n   */ async transaction(callback) {\n        // Supabase doesn't have built-in transaction support in JS client\n        // This would need to be implemented as a stored procedure\n        try {\n            return await callback(this.client);\n        } catch (error) {\n            console.error(\"Transaction failed:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Cached query execution\n   */ async queryCached(key, queryFn, ttl) {\n        const cached = this.queryCache.get(key);\n        const now = Date.now();\n        if (cached && now - cached.timestamp < (ttl || this.cacheTimeout)) {\n            if (this.config.shouldLogQueries()) {\n                console.log(\"Cache hit:\", key);\n            }\n            return cached.data;\n        }\n        const data = await queryFn();\n        this.queryCache.set(key, {\n            data,\n            timestamp: now\n        });\n        return data;\n    }\n    /**\n   * Clear cache\n   */ clearCache(key) {\n        if (key) {\n            this.queryCache.delete(key);\n        } else {\n            this.queryCache.clear();\n        }\n    }\n    /**\n   * Batch operations\n   */ async batchInsert(table, records) {\n        const { data, error } = await this.client.from(table).insert(records);\n        if (error) throw error;\n        return data;\n    }\n    async batchUpdate(table, updates) {\n        // Supabase doesn't have native batch update, use Promise.all\n        const promises = updates.map(({ id, data })=>this.client.from(table).update(data).eq(\"id\", id));\n        const results = await Promise.all(promises);\n        return results.map((r)=>r.data);\n    }\n    /**\n   * Complex queries for specific entities\n   */ async getDealsWithDetails() {\n        return this.queryCached(\"deals_with_details\", async ()=>{\n            const { data, error } = await this.client.from(\"deals.deal\").select(`\n          *,\n          company:underlying_company_id (\n            company_name,\n            company_sector,\n            latest_valuation_mil\n          ),\n          valuations:deal_valuations (\n            valuation_date,\n            moic,\n            irr\n          ),\n          transactions:transactions.transaction.primary (\n            investor_id,\n            gross_capital,\n            transaction_date\n          )\n        `).eq(\"deal_status\", \"ACTIVE\").order(\"deal_date\", {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        });\n    }\n    async getInvestorPortfolio(investorId) {\n        return this.queryCached(`investor_portfolio_${investorId}`, async ()=>{\n            const { data, error } = await this.client.from(\"investment_snapshots\").select(`\n          *,\n          deal:deal_id (\n            deal_name,\n            deal_status,\n            deal_currency\n          ),\n          company:company_id (\n            company_name,\n            sector\n          )\n        `).eq(\"investor_id\", investorId).order(\"snapshot_date\", {\n                ascending: false\n            });\n            if (error) throw error;\n            return data;\n        });\n    }\n    async getTransactionHistory(filters = {}) {\n        const query = this.client.from(\"transactions.transaction.primary\").select(`\n        *,\n        deal:deal_id (deal_name),\n        investor:investor_id (full_name, primary_email)\n      `);\n        // Apply filters\n        if (filters.investor_id) {\n            query.eq(\"investor_id\", filters.investor_id);\n        }\n        if (filters.deal_id) {\n            query.eq(\"deal_id\", filters.deal_id);\n        }\n        if (filters.status) {\n            query.eq(\"status\", filters.status);\n        }\n        if (filters.from_date) {\n            query.gte(\"transaction_date\", filters.from_date);\n        }\n        if (filters.to_date) {\n            query.lte(\"transaction_date\", filters.to_date);\n        }\n        const { data, error } = await query.order(\"transaction_date\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    /**\n   * Real-time subscriptions\n   */ subscribeToTable(table, callback, filter) {\n        const channel = this.client.channel(`public:${table}`).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: table,\n            filter\n        }, callback).subscribe();\n        return channel;\n    }\n    /**\n   * Storage operations (for documents)\n   */ async uploadDocument(bucket, path, file) {\n        const { data, error } = await this.client.storage.from(bucket).upload(path, file);\n        if (error) throw error;\n        return data;\n    }\n    async getDocumentUrl(bucket, path) {\n        const { data } = this.client.storage.from(bucket).getPublicUrl(path);\n        return data.publicUrl;\n    }\n    /**\n   * Auth operations\n   */ async signIn(email, password) {\n        const { data, error } = await this.client.auth.signInWithPassword({\n            email,\n            password\n        });\n        if (error) throw error;\n        return data;\n    }\n    async signOut() {\n        const { error } = await this.client.auth.signOut();\n        if (error) throw error;\n    }\n    async getCurrentUser() {\n        const { data: { user } } = await this.client.auth.getUser();\n        return user;\n    }\n    /**\n   * Helper for checking connection\n   */ async checkConnection() {\n        try {\n            const { data, error } = await this.client.from(\"companies\").select(\"count\").limit(1);\n            return !error;\n        } catch  {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/supabase/client.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/deals.ts":
/*!********************************!*\
  !*** ./lib/mock-data/deals.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCommitmentsByInvestorId: () => (/* binding */ getCommitmentsByInvestorId),\n/* harmony export */   getCompanyById: () => (/* binding */ getCompanyById),\n/* harmony export */   getDealById: () => (/* binding */ getDealById),\n/* harmony export */   getDealsByInvestorId: () => (/* binding */ getDealsByInvestorId),\n/* harmony export */   mockCommitments: () => (/* binding */ mockCommitments),\n/* harmony export */   mockCompanies: () => (/* binding */ mockCompanies),\n/* harmony export */   mockDeals: () => (/* binding */ mockDeals)\n/* harmony export */ });\nconst mockCompanies = [\n    {\n        id: 1,\n        publicId: \"comp_1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d\",\n        name: \"TechVision AI\",\n        type: \"startup\",\n        sector: \"Artificial Intelligence\",\n        country: \"USA\",\n        website: \"https://techvision.ai\",\n        valuation: 50000000\n    },\n    {\n        id: 2,\n        publicId: \"comp_7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b\",\n        name: \"GreenEnergy Solutions\",\n        type: \"growth\",\n        sector: \"Clean Energy\",\n        country: \"Germany\",\n        website: \"https://greenenergy.com\",\n        valuation: 150000000\n    },\n    {\n        id: 3,\n        publicId: \"comp_3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f\",\n        name: \"HealthTech Plus\",\n        type: \"growth\",\n        sector: \"Healthcare\",\n        country: \"UK\",\n        website: \"https://healthtechplus.com\",\n        valuation: 200000000\n    },\n    {\n        id: 4,\n        publicId: \"comp_9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d\",\n        name: \"FinanceFlow\",\n        type: \"mature\",\n        sector: \"Fintech\",\n        country: \"Singapore\",\n        website: \"https://financeflow.sg\",\n        valuation: 500000000\n    },\n    {\n        id: 5,\n        publicId: \"comp_5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f9a0b\",\n        name: \"BioPharm Innovations\",\n        type: \"startup\",\n        sector: \"Biotechnology\",\n        country: \"Switzerland\",\n        website: \"https://biopharm-innovations.ch\",\n        valuation: 75000000\n    }\n];\nconst mockDeals = [\n    {\n        id: 1,\n        publicId: \"deal_a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d\",\n        companyId: 1,\n        code: \"TVA-2024-A\",\n        slug: \"techvision-ai-series-a\",\n        name: \"TechVision AI Series A\",\n        type: \"primary\",\n        stage: \"active\",\n        currency: \"USD\",\n        openingDate: \"2024-01-15\",\n        closingDate: \"2024-03-15\",\n        unitPriceInit: 100,\n        targetRaise: 10000000,\n        currentRaise: 8500000,\n        minimumInvestment: 50000,\n        sector: \"Artificial Intelligence\",\n        description: \"Series A funding round for AI-powered computer vision platform\",\n        createdAt: \"2024-01-01T10:00:00Z\",\n        updatedAt: \"2024-12-15T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"deal_b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e\",\n        companyId: 2,\n        code: \"GES-2024-B\",\n        slug: \"greenenergy-solutions-series-b\",\n        name: \"GreenEnergy Solutions Series B\",\n        type: \"primary\",\n        stage: \"closing\",\n        currency: \"EUR\",\n        openingDate: \"2024-02-01\",\n        closingDate: null,\n        unitPriceInit: 250,\n        targetRaise: 25000000,\n        currentRaise: 22000000,\n        minimumInvestment: 100000,\n        sector: \"Clean Energy\",\n        description: \"Series B funding for expansion of renewable energy infrastructure\",\n        createdAt: \"2024-01-20T10:00:00Z\",\n        updatedAt: \"2024-12-20T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"deal_c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f\",\n        companyId: 3,\n        code: \"HTP-2024-SEC\",\n        slug: \"healthtech-plus-secondary\",\n        name: \"HealthTech Plus Secondary Offering\",\n        type: \"secondary\",\n        stage: \"active\",\n        currency: \"GBP\",\n        openingDate: \"2024-03-01\",\n        closingDate: \"2024-04-30\",\n        unitPriceInit: 175,\n        targetRaise: 15000000,\n        currentRaise: 12000000,\n        minimumInvestment: 75000,\n        sector: \"Healthcare\",\n        description: \"Secondary market opportunity in leading healthcare technology company\",\n        createdAt: \"2024-02-15T10:00:00Z\",\n        updatedAt: \"2024-12-18T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"deal_d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a\",\n        companyId: 4,\n        code: \"FF-2024-DIR\",\n        slug: \"financeflow-direct\",\n        name: \"FinanceFlow Direct Investment\",\n        type: \"direct\",\n        stage: \"due_diligence\",\n        currency: \"USD\",\n        openingDate: \"2024-04-01\",\n        closingDate: null,\n        unitPriceInit: 500,\n        targetRaise: 50000000,\n        currentRaise: 0,\n        minimumInvestment: 250000,\n        sector: \"Fintech\",\n        description: \"Direct investment opportunity in established fintech leader\",\n        createdAt: \"2024-03-15T10:00:00Z\",\n        updatedAt: \"2024-12-22T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"deal_e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b\",\n        companyId: 5,\n        code: \"BPI-2024-SEED\",\n        slug: \"biopharm-innovations-seed\",\n        name: \"BioPharm Innovations Seed Round\",\n        type: \"primary\",\n        stage: \"active\",\n        currency: \"CHF\",\n        openingDate: \"2024-05-01\",\n        closingDate: \"2024-06-30\",\n        unitPriceInit: 50,\n        targetRaise: 5000000,\n        currentRaise: 3500000,\n        minimumInvestment: 25000,\n        sector: \"Biotechnology\",\n        description: \"Seed funding for breakthrough pharmaceutical research platform\",\n        createdAt: \"2024-04-15T10:00:00Z\",\n        updatedAt: \"2024-12-10T10:00:00Z\"\n    },\n    {\n        id: 6,\n        publicId: \"deal_f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c\",\n        companyId: 1,\n        code: \"TVA-2023-SEED\",\n        slug: \"techvision-ai-seed\",\n        name: \"TechVision AI Seed Round\",\n        type: \"primary\",\n        stage: \"exited\",\n        currency: \"USD\",\n        openingDate: \"2023-01-15\",\n        closingDate: \"2023-03-15\",\n        unitPriceInit: 25,\n        targetRaise: 2000000,\n        currentRaise: 2000000,\n        minimumInvestment: 10000,\n        sector: \"Artificial Intelligence\",\n        description: \"Successfully exited seed round with 4x return\",\n        createdAt: \"2023-01-01T10:00:00Z\",\n        updatedAt: \"2024-06-30T10:00:00Z\"\n    }\n];\nconst mockCommitments = [\n    {\n        id: 1,\n        investorId: 1,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 250000,\n        status: \"signed\",\n        createdAt: \"2024-01-20T10:00:00Z\"\n    },\n    {\n        id: 2,\n        investorId: 1,\n        dealId: 3,\n        currency: \"GBP\",\n        amount: 150000,\n        status: \"signed\",\n        createdAt: \"2024-03-10T10:00:00Z\"\n    },\n    {\n        id: 3,\n        investorId: 1,\n        dealId: 6,\n        currency: \"USD\",\n        amount: 50000,\n        status: \"signed\",\n        createdAt: \"2023-01-20T10:00:00Z\"\n    },\n    {\n        id: 4,\n        investorId: 2,\n        dealId: 2,\n        currency: \"EUR\",\n        amount: 500000,\n        status: \"signed\",\n        createdAt: \"2024-02-15T10:00:00Z\"\n    },\n    {\n        id: 5,\n        investorId: 3,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 1000000,\n        status: \"signed\",\n        createdAt: \"2024-01-25T10:00:00Z\"\n    },\n    {\n        id: 6,\n        investorId: 3,\n        dealId: 4,\n        currency: \"USD\",\n        amount: 2000000,\n        status: \"draft\",\n        createdAt: \"2024-04-05T10:00:00Z\"\n    },\n    {\n        id: 7,\n        investorId: 4,\n        dealId: 5,\n        currency: \"CHF\",\n        amount: 100000,\n        status: \"signed\",\n        createdAt: \"2024-05-10T10:00:00Z\"\n    },\n    {\n        id: 8,\n        investorId: 5,\n        dealId: 2,\n        currency: \"EUR\",\n        amount: 750000,\n        status: \"signed\",\n        createdAt: \"2024-02-20T10:00:00Z\"\n    },\n    {\n        id: 9,\n        investorId: 6,\n        dealId: 1,\n        currency: \"USD\",\n        amount: 2000000,\n        status: \"signed\",\n        createdAt: \"2024-01-30T10:00:00Z\"\n    },\n    {\n        id: 10,\n        investorId: 6,\n        dealId: 3,\n        currency: \"GBP\",\n        amount: 1500000,\n        status: \"signed\",\n        createdAt: \"2024-03-15T10:00:00Z\"\n    }\n];\nfunction getDealById(id) {\n    return mockDeals.find((deal)=>deal.id === id);\n}\nfunction getCompanyById(id) {\n    return mockCompanies.find((company)=>company.id === id);\n}\nfunction getCommitmentsByInvestorId(investorId) {\n    return mockCommitments.filter((commitment)=>commitment.investorId === investorId);\n}\nfunction getDealsByInvestorId(investorId) {\n    const commitments = getCommitmentsByInvestorId(investorId);\n    const dealIds = commitments.map((c)=>c.dealId);\n    return mockDeals.filter((deal)=>dealIds.includes(deal.id));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/deals.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/investors.ts":
/*!************************************!*\
  !*** ./lib/mock-data/investors.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInvestorById: () => (/* binding */ getInvestorById),\n/* harmony export */   getInvestorByPublicId: () => (/* binding */ getInvestorByPublicId),\n/* harmony export */   mockInvestors: () => (/* binding */ mockInvestors)\n/* harmony export */ });\nconst mockInvestors = [\n    {\n        id: 1,\n        publicId: \"inv_7f8a9b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c\",\n        fullName: \"John Smith\",\n        primaryEmail: \"john.smith@example.com\",\n        type: \"individual\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-01-15T10:00:00Z\",\n        updatedAt: \"2024-12-01T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"inv_2a3b4c5d-6e7f-8a9b-0c1d-2e3f4a5b6c7d\",\n        fullName: \"Sarah Johnson\",\n        primaryEmail: \"sarah.johnson@example.com\",\n        type: \"individual\",\n        countryResidence: \"UK\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-02-20T10:00:00Z\",\n        updatedAt: \"2024-11-15T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"inv_8e9f0a1b-2c3d-4e5f-6a7b-8c9d0e1f2a3b\",\n        fullName: \"Apex Capital Partners\",\n        primaryEmail: \"contact@apexcapital.com\",\n        type: \"institutional\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2022-11-01T10:00:00Z\",\n        updatedAt: \"2024-12-10T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"inv_4c5d6e7f-8a9b-0c1d-2e3f-4a5b6c7d8e9f\",\n        fullName: \"Michael Chen\",\n        primaryEmail: \"michael.chen@example.com\",\n        type: \"individual\",\n        countryResidence: \"Singapore\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-03-10T10:00:00Z\",\n        updatedAt: \"2024-10-20T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"inv_0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d\",\n        fullName: \"The Richardson Family Office\",\n        primaryEmail: \"office@richardsonfamily.com\",\n        type: \"family_office\",\n        countryResidence: \"Canada\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-04-05T10:00:00Z\",\n        updatedAt: \"2024-09-30T10:00:00Z\"\n    },\n    {\n        id: 6,\n        publicId: \"inv_6e7f8a9b-0c1d-2e3f-4a5b-6c7d8e9f0a1b\",\n        fullName: \"Global Ventures Fund\",\n        primaryEmail: \"info@globalventures.com\",\n        type: \"fund\",\n        countryResidence: \"Switzerland\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2022-09-15T10:00:00Z\",\n        updatedAt: \"2024-12-05T10:00:00Z\"\n    },\n    {\n        id: 7,\n        publicId: \"inv_2c3d4e5f-6a7b-8c9d-0e1f-2a3b4c5d6e7f\",\n        fullName: \"Emma Wilson\",\n        primaryEmail: \"emma.wilson@example.com\",\n        type: \"individual\",\n        countryResidence: \"Australia\",\n        status: \"active\",\n        kycStatus: \"pending\",\n        createdAt: \"2024-11-01T10:00:00Z\",\n        updatedAt: \"2024-12-15T10:00:00Z\"\n    },\n    {\n        id: 8,\n        publicId: \"inv_8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d\",\n        fullName: \"Robert Martinez\",\n        primaryEmail: \"robert.martinez@example.com\",\n        type: \"individual\",\n        countryResidence: \"Spain\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-05-20T10:00:00Z\",\n        updatedAt: \"2024-08-10T10:00:00Z\"\n    },\n    {\n        id: 9,\n        publicId: \"inv_4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b\",\n        fullName: \"Tech Innovation Fund\",\n        primaryEmail: \"invest@techinnovation.com\",\n        type: \"fund\",\n        countryResidence: \"USA\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-06-01T10:00:00Z\",\n        updatedAt: \"2024-11-25T10:00:00Z\"\n    },\n    {\n        id: 10,\n        publicId: \"inv_0c1d2e3f-4a5b-6c7d-8e9f-0a1b2c3d4e5f\",\n        fullName: \"Lisa Anderson\",\n        primaryEmail: \"lisa.anderson@example.com\",\n        type: \"individual\",\n        countryResidence: \"Germany\",\n        status: \"active\",\n        kycStatus: \"approved\",\n        createdAt: \"2023-07-15T10:00:00Z\",\n        updatedAt: \"2024-12-20T10:00:00Z\"\n    }\n];\nfunction getInvestorById(id) {\n    return mockInvestors.find((investor)=>investor.id === id);\n}\nfunction getInvestorByPublicId(publicId) {\n    return mockInvestors.find((investor)=>investor.publicId === publicId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvbW9jay1kYXRhL2ludmVzdG9ycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFhTyxNQUFNQSxnQkFBNEI7SUFDdkM7UUFDRUMsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0lBQ0E7UUFDRVQsSUFBSTtRQUNKQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsY0FBYztRQUNkQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsUUFBUTtRQUNSQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsV0FBVztJQUNiO0NBQ0QsQ0FBQztBQUVLLFNBQVNDLGdCQUFnQlYsRUFBVTtJQUN4QyxPQUFPRCxjQUFjWSxJQUFJLENBQUNDLENBQUFBLFdBQVlBLFNBQVNaLEVBQUUsS0FBS0E7QUFDeEQ7QUFFTyxTQUFTYSxzQkFBc0JaLFFBQWdCO0lBQ3BELE9BQU9GLGNBQWNZLElBQUksQ0FBQ0MsQ0FBQUEsV0FBWUEsU0FBU1gsUUFBUSxLQUFLQTtBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvLi9saWIvbW9jay1kYXRhL2ludmVzdG9ycy50cz8wY2UzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSW52ZXN0b3Ige1xuICBpZDogbnVtYmVyO1xuICBwdWJsaWNJZDogc3RyaW5nO1xuICBmdWxsTmFtZTogc3RyaW5nO1xuICBwcmltYXJ5RW1haWw6IHN0cmluZztcbiAgdHlwZTogJ2luZGl2aWR1YWwnIHwgJ2luc3RpdHV0aW9uYWwnIHwgJ2ZhbWlseV9vZmZpY2UnIHwgJ2Z1bmQnO1xuICBjb3VudHJ5UmVzaWRlbmNlOiBzdHJpbmc7XG4gIHN0YXR1czogJ2FjdGl2ZScgfCAnYmxvY2tlZCcgfCAnYXJjaGl2ZWQnO1xuICBreWNTdGF0dXM6ICdwZW5kaW5nJyB8ICdhcHByb3ZlZCcgfCAncmVqZWN0ZWQnIHwgJ2V4cGlyZWQnO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBtb2NrSW52ZXN0b3JzOiBJbnZlc3RvcltdID0gW1xuICB7XG4gICAgaWQ6IDEsXG4gICAgcHVibGljSWQ6ICdpbnZfN2Y4YTliMWMtMmQzZS00ZjVhLTZiN2MtOGQ5ZTBmMWEyYjNjJyxcbiAgICBmdWxsTmFtZTogJ0pvaG4gU21pdGgnLFxuICAgIHByaW1hcnlFbWFpbDogJ2pvaG4uc21pdGhAZXhhbXBsZS5jb20nLFxuICAgIHR5cGU6ICdpbmRpdmlkdWFsJyxcbiAgICBjb3VudHJ5UmVzaWRlbmNlOiAnVVNBJyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGt5Y1N0YXR1czogJ2FwcHJvdmVkJyxcbiAgICBjcmVhdGVkQXQ6ICcyMDIzLTAxLTE1VDEwOjAwOjAwWicsXG4gICAgdXBkYXRlZEF0OiAnMjAyNC0xMi0wMVQxMDowMDowMFonLFxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgcHVibGljSWQ6ICdpbnZfMmEzYjRjNWQtNmU3Zi04YTliLTBjMWQtMmUzZjRhNWI2YzdkJyxcbiAgICBmdWxsTmFtZTogJ1NhcmFoIEpvaG5zb24nLFxuICAgIHByaW1hcnlFbWFpbDogJ3NhcmFoLmpvaG5zb25AZXhhbXBsZS5jb20nLFxuICAgIHR5cGU6ICdpbmRpdmlkdWFsJyxcbiAgICBjb3VudHJ5UmVzaWRlbmNlOiAnVUsnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAga3ljU3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjMtMDItMjBUMTA6MDA6MDBaJyxcbiAgICB1cGRhdGVkQXQ6ICcyMDI0LTExLTE1VDEwOjAwOjAwWicsXG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBwdWJsaWNJZDogJ2ludl84ZTlmMGExYi0yYzNkLTRlNWYtNmE3Yi04YzlkMGUxZjJhM2InLFxuICAgIGZ1bGxOYW1lOiAnQXBleCBDYXBpdGFsIFBhcnRuZXJzJyxcbiAgICBwcmltYXJ5RW1haWw6ICdjb250YWN0QGFwZXhjYXBpdGFsLmNvbScsXG4gICAgdHlwZTogJ2luc3RpdHV0aW9uYWwnLFxuICAgIGNvdW50cnlSZXNpZGVuY2U6ICdVU0EnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAga3ljU3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjItMTEtMDFUMTA6MDA6MDBaJyxcbiAgICB1cGRhdGVkQXQ6ICcyMDI0LTEyLTEwVDEwOjAwOjAwWicsXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBwdWJsaWNJZDogJ2ludl80YzVkNmU3Zi04YTliLTBjMWQtMmUzZi00YTViNmM3ZDhlOWYnLFxuICAgIGZ1bGxOYW1lOiAnTWljaGFlbCBDaGVuJyxcbiAgICBwcmltYXJ5RW1haWw6ICdtaWNoYWVsLmNoZW5AZXhhbXBsZS5jb20nLFxuICAgIHR5cGU6ICdpbmRpdmlkdWFsJyxcbiAgICBjb3VudHJ5UmVzaWRlbmNlOiAnU2luZ2Fwb3JlJyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGt5Y1N0YXR1czogJ2FwcHJvdmVkJyxcbiAgICBjcmVhdGVkQXQ6ICcyMDIzLTAzLTEwVDEwOjAwOjAwWicsXG4gICAgdXBkYXRlZEF0OiAnMjAyNC0xMC0yMFQxMDowMDowMFonLFxuICB9LFxuICB7XG4gICAgaWQ6IDUsXG4gICAgcHVibGljSWQ6ICdpbnZfMGExYjJjM2QtNGU1Zi02YTdiLThjOWQtMGUxZjJhM2I0YzVkJyxcbiAgICBmdWxsTmFtZTogJ1RoZSBSaWNoYXJkc29uIEZhbWlseSBPZmZpY2UnLFxuICAgIHByaW1hcnlFbWFpbDogJ29mZmljZUByaWNoYXJkc29uZmFtaWx5LmNvbScsXG4gICAgdHlwZTogJ2ZhbWlseV9vZmZpY2UnLFxuICAgIGNvdW50cnlSZXNpZGVuY2U6ICdDYW5hZGEnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAga3ljU3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjMtMDQtMDVUMTA6MDA6MDBaJyxcbiAgICB1cGRhdGVkQXQ6ICcyMDI0LTA5LTMwVDEwOjAwOjAwWicsXG4gIH0sXG4gIHtcbiAgICBpZDogNixcbiAgICBwdWJsaWNJZDogJ2ludl82ZTdmOGE5Yi0wYzFkLTJlM2YtNGE1Yi02YzdkOGU5ZjBhMWInLFxuICAgIGZ1bGxOYW1lOiAnR2xvYmFsIFZlbnR1cmVzIEZ1bmQnLFxuICAgIHByaW1hcnlFbWFpbDogJ2luZm9AZ2xvYmFsdmVudHVyZXMuY29tJyxcbiAgICB0eXBlOiAnZnVuZCcsXG4gICAgY291bnRyeVJlc2lkZW5jZTogJ1N3aXR6ZXJsYW5kJyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGt5Y1N0YXR1czogJ2FwcHJvdmVkJyxcbiAgICBjcmVhdGVkQXQ6ICcyMDIyLTA5LTE1VDEwOjAwOjAwWicsXG4gICAgdXBkYXRlZEF0OiAnMjAyNC0xMi0wNVQxMDowMDowMFonLFxuICB9LFxuICB7XG4gICAgaWQ6IDcsXG4gICAgcHVibGljSWQ6ICdpbnZfMmMzZDRlNWYtNmE3Yi04YzlkLTBlMWYtMmEzYjRjNWQ2ZTdmJyxcbiAgICBmdWxsTmFtZTogJ0VtbWEgV2lsc29uJyxcbiAgICBwcmltYXJ5RW1haWw6ICdlbW1hLndpbHNvbkBleGFtcGxlLmNvbScsXG4gICAgdHlwZTogJ2luZGl2aWR1YWwnLFxuICAgIGNvdW50cnlSZXNpZGVuY2U6ICdBdXN0cmFsaWEnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAga3ljU3RhdHVzOiAncGVuZGluZycsXG4gICAgY3JlYXRlZEF0OiAnMjAyNC0xMS0wMVQxMDowMDowMFonLFxuICAgIHVwZGF0ZWRBdDogJzIwMjQtMTItMTVUMTA6MDA6MDBaJyxcbiAgfSxcbiAge1xuICAgIGlkOiA4LFxuICAgIHB1YmxpY0lkOiAnaW52XzhhOWIwYzFkLTJlM2YtNGE1Yi02YzdkLThlOWYwYTFiMmMzZCcsXG4gICAgZnVsbE5hbWU6ICdSb2JlcnQgTWFydGluZXonLFxuICAgIHByaW1hcnlFbWFpbDogJ3JvYmVydC5tYXJ0aW5lekBleGFtcGxlLmNvbScsXG4gICAgdHlwZTogJ2luZGl2aWR1YWwnLFxuICAgIGNvdW50cnlSZXNpZGVuY2U6ICdTcGFpbicsXG4gICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBreWNTdGF0dXM6ICdhcHByb3ZlZCcsXG4gICAgY3JlYXRlZEF0OiAnMjAyMy0wNS0yMFQxMDowMDowMFonLFxuICAgIHVwZGF0ZWRBdDogJzIwMjQtMDgtMTBUMTA6MDA6MDBaJyxcbiAgfSxcbiAge1xuICAgIGlkOiA5LFxuICAgIHB1YmxpY0lkOiAnaW52XzRlNWY2YTdiLThjOWQtMGUxZi0yYTNiLTRjNWQ2ZTdmOGE5YicsXG4gICAgZnVsbE5hbWU6ICdUZWNoIElubm92YXRpb24gRnVuZCcsXG4gICAgcHJpbWFyeUVtYWlsOiAnaW52ZXN0QHRlY2hpbm5vdmF0aW9uLmNvbScsXG4gICAgdHlwZTogJ2Z1bmQnLFxuICAgIGNvdW50cnlSZXNpZGVuY2U6ICdVU0EnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAga3ljU3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjMtMDYtMDFUMTA6MDA6MDBaJyxcbiAgICB1cGRhdGVkQXQ6ICcyMDI0LTExLTI1VDEwOjAwOjAwWicsXG4gIH0sXG4gIHtcbiAgICBpZDogMTAsXG4gICAgcHVibGljSWQ6ICdpbnZfMGMxZDJlM2YtNGE1Yi02YzdkLThlOWYtMGExYjJjM2Q0ZTVmJyxcbiAgICBmdWxsTmFtZTogJ0xpc2EgQW5kZXJzb24nLFxuICAgIHByaW1hcnlFbWFpbDogJ2xpc2EuYW5kZXJzb25AZXhhbXBsZS5jb20nLFxuICAgIHR5cGU6ICdpbmRpdmlkdWFsJyxcbiAgICBjb3VudHJ5UmVzaWRlbmNlOiAnR2VybWFueScsXG4gICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBreWNTdGF0dXM6ICdhcHByb3ZlZCcsXG4gICAgY3JlYXRlZEF0OiAnMjAyMy0wNy0xNVQxMDowMDowMFonLFxuICAgIHVwZGF0ZWRBdDogJzIwMjQtMTItMjBUMTA6MDA6MDBaJyxcbiAgfSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnZlc3RvckJ5SWQoaWQ6IG51bWJlcik6IEludmVzdG9yIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIG1vY2tJbnZlc3RvcnMuZmluZChpbnZlc3RvciA9PiBpbnZlc3Rvci5pZCA9PT0gaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52ZXN0b3JCeVB1YmxpY0lkKHB1YmxpY0lkOiBzdHJpbmcpOiBJbnZlc3RvciB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBtb2NrSW52ZXN0b3JzLmZpbmQoaW52ZXN0b3IgPT4gaW52ZXN0b3IucHVibGljSWQgPT09IHB1YmxpY0lkKTtcbn0iXSwibmFtZXMiOlsibW9ja0ludmVzdG9ycyIsImlkIiwicHVibGljSWQiLCJmdWxsTmFtZSIsInByaW1hcnlFbWFpbCIsInR5cGUiLCJjb3VudHJ5UmVzaWRlbmNlIiwic3RhdHVzIiwia3ljU3RhdHVzIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwiZ2V0SW52ZXN0b3JCeUlkIiwiZmluZCIsImludmVzdG9yIiwiZ2V0SW52ZXN0b3JCeVB1YmxpY0lkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/investors.ts\n");

/***/ }),

/***/ "(rsc)/./lib/mock-data/transactions.ts":
/*!***************************************!*\
  !*** ./lib/mock-data/transactions.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRecentTransactions: () => (/* binding */ getRecentTransactions),\n/* harmony export */   getTransactionsByDealId: () => (/* binding */ getTransactionsByDealId),\n/* harmony export */   getTransactionsByInvestorId: () => (/* binding */ getTransactionsByInvestorId),\n/* harmony export */   mockTransactions: () => (/* binding */ mockTransactions)\n/* harmony export */ });\nconst mockTransactions = [\n    // Investor 1 transactions\n    {\n        id: 1,\n        publicId: \"txn_a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-02-01\",\n        currency: \"USD\",\n        amount: 125000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-001\",\n        createdAt: \"2024-02-01T10:00:00Z\"\n    },\n    {\n        id: 2,\n        publicId: \"txn_b2c3d4e5-f6a7-8901-bcde-f23456789012\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-04-01\",\n        currency: \"USD\",\n        amount: 125000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Second capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-002\",\n        createdAt: \"2024-04-01T10:00:00Z\"\n    },\n    {\n        id: 3,\n        publicId: \"txn_c3d4e5f6-a7b8-9012-cdef-345678901234\",\n        dealId: 3,\n        investorId: 1,\n        occurredOn: \"2024-03-15\",\n        currency: \"GBP\",\n        amount: 150000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Capital call - HealthTech Plus Secondary\",\n        reference: \"CC-HTP-2024-001\",\n        createdAt: \"2024-03-15T10:00:00Z\"\n    },\n    {\n        id: 4,\n        publicId: \"txn_d4e5f6a7-b8c9-0123-defa-456789012345\",\n        dealId: 6,\n        investorId: 1,\n        occurredOn: \"2024-06-30\",\n        currency: \"USD\",\n        amount: 200000,\n        type: \"distribution\",\n        status: \"completed\",\n        description: \"Exit distribution - TechVision AI Seed Round\",\n        reference: \"DIST-TVA-2024-001\",\n        createdAt: \"2024-06-30T10:00:00Z\"\n    },\n    {\n        id: 5,\n        publicId: \"txn_e5f6a7b8-c9d0-1234-efab-567890123456\",\n        dealId: 1,\n        investorId: 1,\n        occurredOn: \"2024-10-01\",\n        currency: \"USD\",\n        amount: 2500,\n        type: \"fee\",\n        status: \"completed\",\n        description: \"Management fee Q3 2024\",\n        reference: \"FEE-Q3-2024-001\",\n        createdAt: \"2024-10-01T10:00:00Z\"\n    },\n    // Investor 2 transactions\n    {\n        id: 6,\n        publicId: \"txn_f6a7b8c9-d0e1-2345-fabc-678901234567\",\n        dealId: 2,\n        investorId: 2,\n        occurredOn: \"2024-02-20\",\n        currency: \"EUR\",\n        amount: 250000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-001\",\n        createdAt: \"2024-02-20T10:00:00Z\"\n    },\n    {\n        id: 7,\n        publicId: \"txn_a7b8c9d0-e1f2-3456-abcd-789012345678\",\n        dealId: 2,\n        investorId: 2,\n        occurredOn: \"2024-05-20\",\n        currency: \"EUR\",\n        amount: 250000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-002\",\n        createdAt: \"2024-05-20T10:00:00Z\"\n    },\n    // Investor 3 transactions\n    {\n        id: 8,\n        publicId: \"txn_b8c9d0e1-f2a3-4567-bcde-890123456789\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-02-01\",\n        currency: \"USD\",\n        amount: 500000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-003\",\n        createdAt: \"2024-02-01T10:00:00Z\"\n    },\n    {\n        id: 9,\n        publicId: \"txn_c9d0e1f2-a3b4-5678-cdef-901234567890\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-04-01\",\n        currency: \"USD\",\n        amount: 500000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"Second capital call - TechVision AI Series A\",\n        reference: \"CC-TVA-2024-004\",\n        createdAt: \"2024-04-01T10:00:00Z\"\n    },\n    {\n        id: 10,\n        publicId: \"txn_d0e1f2a3-b4c5-6789-defa-012345678901\",\n        dealId: 1,\n        investorId: 3,\n        occurredOn: \"2024-11-01\",\n        currency: \"USD\",\n        amount: 50000,\n        type: \"distribution\",\n        status: \"completed\",\n        description: \"Interim distribution - TechVision AI Series A\",\n        reference: \"DIST-TVA-2024-002\",\n        createdAt: \"2024-11-01T10:00:00Z\"\n    },\n    // More transactions for variety\n    {\n        id: 11,\n        publicId: \"txn_e1f2a3b4-c5d6-7890-efab-123456789012\",\n        dealId: null,\n        investorId: 1,\n        occurredOn: \"2024-12-01\",\n        currency: \"USD\",\n        amount: 5000,\n        type: \"fee\",\n        status: \"completed\",\n        description: \"Annual administration fee\",\n        reference: \"FEE-ANNUAL-2024\",\n        createdAt: \"2024-12-01T10:00:00Z\"\n    },\n    {\n        id: 12,\n        publicId: \"txn_f2a3b4c5-d6e7-8901-fabc-234567890123\",\n        dealId: 5,\n        investorId: 4,\n        occurredOn: \"2024-05-15\",\n        currency: \"CHF\",\n        amount: 50000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - BioPharm Innovations Seed\",\n        reference: \"CC-BPI-2024-001\",\n        createdAt: \"2024-05-15T10:00:00Z\"\n    },\n    {\n        id: 13,\n        publicId: \"txn_a3b4c5d6-e7f8-9012-abcd-345678901234\",\n        dealId: 5,\n        investorId: 4,\n        occurredOn: \"2024-07-15\",\n        currency: \"CHF\",\n        amount: 50000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - BioPharm Innovations Seed\",\n        reference: \"CC-BPI-2024-002\",\n        createdAt: \"2024-07-15T10:00:00Z\"\n    },\n    {\n        id: 14,\n        publicId: \"txn_b4c5d6e7-f8a9-0123-bcde-456789012345\",\n        dealId: 2,\n        investorId: 5,\n        occurredOn: \"2024-02-25\",\n        currency: \"EUR\",\n        amount: 375000,\n        type: \"capital_call\",\n        status: \"completed\",\n        description: \"First capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-005\",\n        createdAt: \"2024-02-25T10:00:00Z\"\n    },\n    {\n        id: 15,\n        publicId: \"txn_c5d6e7f8-a9b0-1234-cdef-567890123456\",\n        dealId: 2,\n        investorId: 5,\n        occurredOn: \"2024-05-25\",\n        currency: \"EUR\",\n        amount: 375000,\n        type: \"capital_call\",\n        status: \"pending\",\n        description: \"Second capital call - GreenEnergy Solutions Series B\",\n        reference: \"CC-GES-2024-006\",\n        createdAt: \"2024-05-25T10:00:00Z\"\n    }\n];\nfunction getTransactionsByInvestorId(investorId) {\n    return mockTransactions.filter((transaction)=>transaction.investorId === investorId);\n}\nfunction getTransactionsByDealId(dealId) {\n    return mockTransactions.filter((transaction)=>transaction.dealId === dealId);\n}\nfunction getRecentTransactions(investorId, limit = 5) {\n    return getTransactionsByInvestorId(investorId).sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, limit);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/mock-data/transactions.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/base.service.ts":
/*!**************************************!*\
  !*** ./lib/services/base.service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseService: () => (/* binding */ BaseService)\n/* harmony export */ });\n/* harmony import */ var _db_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db/client */ \"(rsc)/./lib/db/client.ts\");\n/**\n * Base Service Class\n * Provides common functionality for all service classes\n */ \nclass BaseService {\n    constructor(options = {}){\n        this.cache = new Map();\n        this.dataClient = (0,_db_client__WEBPACK_IMPORTED_MODULE_0__.getDataClient)();\n        this.options = {\n            enableCache: true,\n            cacheTime: 5 * 60 * 1000,\n            enableLogging: \"development\" === \"development\",\n            ...options\n        };\n    }\n    /**\n   * Get cached data if available and not expired\n   */ getCached(key) {\n        if (!this.options.enableCache) return null;\n        const cached = this.cache.get(key);\n        if (!cached) return null;\n        const now = Date.now();\n        if (now - cached.timestamp > (this.options.cacheTime || 0)) {\n            this.cache.delete(key);\n            return null;\n        }\n        if (this.options.enableLogging) {\n            console.log(`📦 Cache hit: ${key}`);\n        }\n        return cached.data;\n    }\n    /**\n   * Set cache data\n   */ setCache(key, data) {\n        if (!this.options.enableCache) return;\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n        if (this.options.enableLogging) {\n            console.log(`💾 Cache set: ${key}`);\n        }\n    }\n    /**\n   * Clear cache\n   */ clearCache() {\n        this.cache.clear();\n        if (this.options.enableLogging) {\n            console.log(\"\\uD83D\\uDDD1️ Cache cleared\");\n        }\n    }\n    /**\n   * Log service action\n   */ log(action, details) {\n        if (this.options.enableLogging) {\n            console.log(`[${this.constructor.name}] ${action}`, details || \"\");\n        }\n    }\n    /**\n   * Handle service errors\n   */ handleError(error, context) {\n        console.error(`[${this.constructor.name}] Error in ${context}:`, error);\n        // You can add error tracking here (e.g., Sentry)\n        if (true) {\n        // Track error to external service\n        }\n        throw error;\n    }\n    /**\n   * Validate required fields\n   */ validateRequired(data, fields, context) {\n        const missing = fields.filter((field)=>!data[field]);\n        if (missing.length > 0) {\n            throw new Error(`${context}: Missing required fields: ${missing.join(\", \")}`);\n        }\n    }\n    /**\n   * Apply pagination to array\n   */ paginate(items, page = 1, limit = 10) {\n        const total = items.length;\n        const totalPages = Math.ceil(total / limit);\n        const start = (page - 1) * limit;\n        const end = start + limit;\n        return {\n            data: items.slice(start, end),\n            pagination: {\n                page,\n                limit,\n                total,\n                totalPages,\n                hasNext: page < totalPages,\n                hasPrev: page > 1\n            }\n        };\n    }\n    /**\n   * Sort array by field\n   */ sortBy(items, field, order = \"asc\") {\n        return [\n            ...items\n        ].sort((a, b)=>{\n            const aVal = a[field];\n            const bVal = b[field];\n            if (aVal === bVal) return 0;\n            if (order === \"asc\") {\n                return aVal < bVal ? -1 : 1;\n            } else {\n                return aVal > bVal ? -1 : 1;\n            }\n        });\n    }\n    /**\n   * Filter by search term\n   */ searchFilter(items, searchTerm, fields) {\n        if (!searchTerm) return items;\n        const term = searchTerm.toLowerCase();\n        return items.filter((item)=>{\n            return fields.some((field)=>{\n                const value = item[field];\n                if (typeof value === \"string\") {\n                    return value.toLowerCase().includes(term);\n                }\n                return false;\n            });\n        });\n    }\n    /**\n   * Simulate API delay (for development)\n   */ async delay(ms) {\n        await (0,_db_client__WEBPACK_IMPORTED_MODULE_0__.simulateDelay)(ms);\n    }\n    /**\n   * Format response with metadata\n   */ formatResponse(data, metadata) {\n        return {\n            success: true,\n            data,\n            metadata,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/base.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/deals.service.ts":
/*!***************************************!*\
  !*** ./lib/services/deals.service.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DealsService: () => (/* binding */ DealsService),\n/* harmony export */   dealsService: () => (/* binding */ dealsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Deals Service\n * Handles all deal-related operations\n */ \nclass DealsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get all deals with optional filters\n   */ async getDeals(options = {}) {\n        const cacheKey = `deals:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDeals\", options);\n            await this.delay();\n            const filters = {\n                stage: options.stage,\n                type: options.type,\n                search: options.search\n            };\n            let deals = await this.dataClient.getDeals(filters);\n            // Enrich with company data\n            const dealsWithCompanies = await Promise.all(deals.map(async (deal)=>{\n                const company = deal.company_id ? await this.dataClient.getCompanyById(deal.company_id) : null;\n                return {\n                    ...deal,\n                    company: company || undefined\n                };\n            }));\n            // Sort\n            if (options.sortBy) {\n                dealsWithCompanies.sort((a, b)=>{\n                    const field = options.sortBy;\n                    const aVal = a[field];\n                    const bVal = b[field];\n                    if (aVal === bVal) return 0;\n                    if (options.sortOrder === \"desc\") {\n                        return aVal > bVal ? -1 : 1;\n                    } else {\n                        return aVal < bVal ? -1 : 1;\n                    }\n                });\n            }\n            // Paginate\n            const paginated = this.paginate(dealsWithCompanies, options.page || 1, options.limit || 10);\n            const result = this.formatResponse(paginated.data, {\n                pagination: paginated.pagination\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDeals\");\n        }\n    }\n    /**\n   * Get a single deal by ID with full details\n   */ async getDealById(id) {\n        const cacheKey = `deal:${id}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealById\", {\n                id\n            });\n            await this.delay();\n            const deal = await this.dataClient.getDealById(id);\n            if (!deal) return null;\n            // Get related data\n            const [company, commitments] = await Promise.all([\n                deal.company_id ? this.dataClient.getCompanyById(deal.company_id) : null,\n                this.dataClient.getCommitmentsByDealId(id)\n            ]);\n            // Calculate aggregates\n            const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n            const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n            const investorCount = new Set(signedCommitments.map((c)=>c.investor_id)).size;\n            const percentageRaised = deal.target_raise ? totalCommitted / deal.target_raise * 100 : 0;\n            const dealDetails = {\n                ...deal,\n                company: company || undefined,\n                commitments,\n                totalCommitted,\n                investorCount,\n                percentageRaised\n            };\n            this.setCache(cacheKey, dealDetails);\n            return dealDetails;\n        } catch (error) {\n            this.handleError(error, \"getDealById\");\n        }\n    }\n    /**\n   * Get a deal by slug\n   */ async getDealBySlug(slug) {\n        const cacheKey = `deal:slug:${slug}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealBySlug\", {\n                slug\n            });\n            await this.delay();\n            const deal = await this.dataClient.getDealBySlug(slug);\n            if (!deal) return null;\n            // Get full details using getDealById\n            const dealDetails = await this.getDealById(deal.id);\n            this.setCache(cacheKey, dealDetails);\n            return dealDetails;\n        } catch (error) {\n            this.handleError(error, \"getDealBySlug\");\n        }\n    }\n    /**\n   * Get deals for a specific investor\n   */ async getDealsByInvestor(investorId) {\n        const cacheKey = `deals:investor:${investorId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealsByInvestor\", {\n                investorId\n            });\n            await this.delay();\n            // Get investor's commitments\n            const commitments = await this.dataClient.getCommitments(investorId);\n            const dealIds = [\n                ...new Set(commitments.map((c)=>c.deal_id))\n            ];\n            // Get deals\n            const deals = await Promise.all(dealIds.map((id)=>this.getDealById(id)));\n            const validDeals = deals.filter((d)=>d !== null);\n            this.setCache(cacheKey, validDeals);\n            return this.formatResponse(validDeals);\n        } catch (error) {\n            this.handleError(error, \"getDealsByInvestor\");\n        }\n    }\n    /**\n   * Get active deals (for dashboard)\n   */ async getActiveDeals() {\n        return this.getDeals({\n            stage: \"active\",\n            sortBy: \"opening_date\",\n            sortOrder: \"desc\",\n            limit: 6\n        });\n    }\n    /**\n   * Get featured deals\n   */ async getFeaturedDeals() {\n        const result = await this.getDeals({\n            limit: 3,\n            sortBy: \"current_raise\",\n            sortOrder: \"desc\"\n        });\n        // Filter to only show deals in active or closing stage\n        if (result && \"data\" in result && Array.isArray(result.data)) {\n            result.data = result.data.filter((d)=>d.stage === \"active\" || d.stage === \"closing\");\n        }\n        return result;\n    }\n    /**\n   * Calculate deal metrics\n   */ async getDealMetrics(dealId) {\n        const cacheKey = `deal:metrics:${dealId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDealMetrics\", {\n                dealId\n            });\n            const deal = await this.getDealById(dealId);\n            if (!deal) return null;\n            const metrics = {\n                dealId,\n                name: deal.name,\n                stage: deal.stage,\n                targetRaise: deal.target_raise || 0,\n                currentRaise: deal.current_raise || 0,\n                totalCommitted: deal.totalCommitted || 0,\n                investorCount: deal.investorCount || 0,\n                percentageRaised: deal.percentageRaised || 0,\n                daysRemaining: this.calculateDaysRemaining(deal.closing_date),\n                minimumInvestment: deal.minimum_investment || 0,\n                currency: deal.currency\n            };\n            const result = this.formatResponse(metrics);\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDealMetrics\");\n        }\n    }\n    /**\n   * Search deals\n   */ async searchDeals(query) {\n        return this.getDeals({\n            search: query,\n            limit: 20\n        });\n    }\n    /**\n   * Helper: Calculate days remaining\n   */ calculateDaysRemaining(closingDate) {\n        if (!closingDate) return null;\n        const closing = new Date(closingDate);\n        const now = new Date();\n        const diff = closing.getTime() - now.getTime();\n        if (diff < 0) return 0;\n        return Math.ceil(diff / (1000 * 60 * 60 * 24));\n    }\n}\n// Export singleton instance\nconst dealsService = new DealsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/deals.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/documents.service.ts":
/*!*******************************************!*\
  !*** ./lib/services/documents.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentsService: () => (/* binding */ DocumentsService),\n/* harmony export */   documentsService: () => (/* binding */ documentsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Documents Service\n * Handles all document-related operations\n */ \nclass DocumentsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get documents with filters\n   */ async getDocuments(options = {}) {\n        const cacheKey = `documents:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getDocuments\", options);\n            await this.delay();\n            const documents = await this.dataClient.getDocuments(options);\n            const result = this.formatResponse(documents, {\n                count: documents.length\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getDocuments\");\n        }\n    }\n    /**\n   * Get documents for a specific deal\n   */ async getDealDocuments(dealId, options = {}) {\n        return this.getDocuments({\n            ...options,\n            deal_id: dealId\n        });\n    }\n    /**\n   * Get documents for a specific investor\n   */ async getInvestorDocuments(investorId, options = {}) {\n        return this.getDocuments({\n            ...options,\n            investor_id: investorId\n        });\n    }\n    /**\n   * Get signed documents\n   */ async getSignedDocuments(options = {}) {\n        return this.getDocuments({\n            ...options,\n            is_signed: true\n        });\n    }\n    /**\n   * Get unsigned documents\n   */ async getUnsignedDocuments(options = {}) {\n        return this.getDocuments({\n            ...options,\n            is_signed: false\n        });\n    }\n}\n// Export singleton instance\nconst documentsService = new DocumentsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZG9jdW1lbnRzLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRTRDO0FBWXRDLE1BQU1DLHlCQUF5QkQsc0RBQVdBO0lBQy9DOztHQUVDLEdBQ0QsTUFBTUUsYUFBYUMsVUFBK0IsQ0FBQyxDQUFDLEVBQUU7UUFDcEQsTUFBTUMsV0FBVyxDQUFDLFVBQVUsRUFBRUMsS0FBS0MsU0FBUyxDQUFDSCxTQUFTLENBQUM7UUFDdkQsTUFBTUksU0FBUyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0o7UUFDOUIsSUFBSUcsUUFBUSxPQUFPQTtRQUVuQixJQUFJO1lBQ0YsSUFBSSxDQUFDRSxHQUFHLENBQUMsZ0JBQWdCTjtZQUN6QixNQUFNLElBQUksQ0FBQ08sS0FBSztZQUVoQixNQUFNQyxZQUFZLE1BQU0sSUFBSSxDQUFDQyxVQUFVLENBQUNWLFlBQVksQ0FBQ0M7WUFFckQsTUFBTVUsU0FBUyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0gsV0FBVztnQkFDNUNJLE9BQU9KLFVBQVVLLE1BQU07WUFDekI7WUFFQSxJQUFJLENBQUNDLFFBQVEsQ0FBQ2IsVUFBVVM7WUFDeEIsT0FBT0E7UUFDVCxFQUFFLE9BQU9LLE9BQU87WUFDZCxJQUFJLENBQUNDLFdBQVcsQ0FBQ0QsT0FBTztRQUMxQjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFNRSxpQkFBaUJDLE1BQWMsRUFBRWxCLFVBQWdELENBQUMsQ0FBQyxFQUFFO1FBQ3pGLE9BQU8sSUFBSSxDQUFDRCxZQUFZLENBQUM7WUFBRSxHQUFHQyxPQUFPO1lBQUVtQixTQUFTRDtRQUFPO0lBQ3pEO0lBRUE7O0dBRUMsR0FDRCxNQUFNRSxxQkFBcUJDLFVBQWtCLEVBQUVyQixVQUFvRCxDQUFDLENBQUMsRUFBRTtRQUNyRyxPQUFPLElBQUksQ0FBQ0QsWUFBWSxDQUFDO1lBQUUsR0FBR0MsT0FBTztZQUFFc0IsYUFBYUQ7UUFBVztJQUNqRTtJQUVBOztHQUVDLEdBQ0QsTUFBTUUsbUJBQW1CdkIsVUFBa0QsQ0FBQyxDQUFDLEVBQUU7UUFDN0UsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQztZQUFFLEdBQUdDLE9BQU87WUFBRXdCLFdBQVc7UUFBSztJQUN6RDtJQUVBOztHQUVDLEdBQ0QsTUFBTUMscUJBQXFCekIsVUFBa0QsQ0FBQyxDQUFDLEVBQUU7UUFDL0UsT0FBTyxJQUFJLENBQUNELFlBQVksQ0FBQztZQUFFLEdBQUdDLE9BQU87WUFBRXdCLFdBQVc7UUFBTTtJQUMxRDtBQUNGO0FBRUEsNEJBQTRCO0FBQ3JCLE1BQU1FLG1CQUFtQixJQUFJNUIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2xpYi9zZXJ2aWNlcy9kb2N1bWVudHMuc2VydmljZS50cz8yMWU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG9jdW1lbnRzIFNlcnZpY2VcbiAqIEhhbmRsZXMgYWxsIGRvY3VtZW50LXJlbGF0ZWQgb3BlcmF0aW9uc1xuICovXG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudCwgRG9jdW1lbnRUeXBlIH0gZnJvbSAnLi4vZGIvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50TGlzdE9wdGlvbnMge1xuICBkZWFsX2lkPzogbnVtYmVyO1xuICBpbnZlc3Rvcl9pZD86IG51bWJlcjtcbiAgdHlwZT86IERvY3VtZW50VHlwZTtcbiAgaXNfc2lnbmVkPzogYm9vbGVhbjtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIERvY3VtZW50c1NlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIC8qKlxuICAgKiBHZXQgZG9jdW1lbnRzIHdpdGggZmlsdGVyc1xuICAgKi9cbiAgYXN5bmMgZ2V0RG9jdW1lbnRzKG9wdGlvbnM6IERvY3VtZW50TGlzdE9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGRvY3VtZW50czoke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfWA7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWQoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coJ2dldERvY3VtZW50cycsIG9wdGlvbnMpO1xuICAgICAgYXdhaXQgdGhpcy5kZWxheSgpO1xuXG4gICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCB0aGlzLmRhdGFDbGllbnQuZ2V0RG9jdW1lbnRzKG9wdGlvbnMpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZvcm1hdFJlc3BvbnNlKGRvY3VtZW50cywge1xuICAgICAgICBjb3VudDogZG9jdW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2V0Q2FjaGUoY2FjaGVLZXksIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCAnZ2V0RG9jdW1lbnRzJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkb2N1bWVudHMgZm9yIGEgc3BlY2lmaWMgZGVhbFxuICAgKi9cbiAgYXN5bmMgZ2V0RGVhbERvY3VtZW50cyhkZWFsSWQ6IG51bWJlciwgb3B0aW9uczogT21pdDxEb2N1bWVudExpc3RPcHRpb25zLCAnZGVhbF9pZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBkZWFsX2lkOiBkZWFsSWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRvY3VtZW50cyBmb3IgYSBzcGVjaWZpYyBpbnZlc3RvclxuICAgKi9cbiAgYXN5bmMgZ2V0SW52ZXN0b3JEb2N1bWVudHMoaW52ZXN0b3JJZDogbnVtYmVyLCBvcHRpb25zOiBPbWl0PERvY3VtZW50TGlzdE9wdGlvbnMsICdpbnZlc3Rvcl9pZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBpbnZlc3Rvcl9pZDogaW52ZXN0b3JJZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2lnbmVkIGRvY3VtZW50c1xuICAgKi9cbiAgYXN5bmMgZ2V0U2lnbmVkRG9jdW1lbnRzKG9wdGlvbnM6IE9taXQ8RG9jdW1lbnRMaXN0T3B0aW9ucywgJ2lzX3NpZ25lZCc+ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudHMoeyAuLi5vcHRpb25zLCBpc19zaWduZWQ6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHVuc2lnbmVkIGRvY3VtZW50c1xuICAgKi9cbiAgYXN5bmMgZ2V0VW5zaWduZWREb2N1bWVudHMob3B0aW9uczogT21pdDxEb2N1bWVudExpc3RPcHRpb25zLCAnaXNfc2lnbmVkJz4gPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50cyh7IC4uLm9wdGlvbnMsIGlzX3NpZ25lZDogZmFsc2UgfSk7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGRvY3VtZW50c1NlcnZpY2UgPSBuZXcgRG9jdW1lbnRzU2VydmljZSgpOyJdLCJuYW1lcyI6WyJCYXNlU2VydmljZSIsIkRvY3VtZW50c1NlcnZpY2UiLCJnZXREb2N1bWVudHMiLCJvcHRpb25zIiwiY2FjaGVLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FjaGVkIiwiZ2V0Q2FjaGVkIiwibG9nIiwiZGVsYXkiLCJkb2N1bWVudHMiLCJkYXRhQ2xpZW50IiwicmVzdWx0IiwiZm9ybWF0UmVzcG9uc2UiLCJjb3VudCIsImxlbmd0aCIsInNldENhY2hlIiwiZXJyb3IiLCJoYW5kbGVFcnJvciIsImdldERlYWxEb2N1bWVudHMiLCJkZWFsSWQiLCJkZWFsX2lkIiwiZ2V0SW52ZXN0b3JEb2N1bWVudHMiLCJpbnZlc3RvcklkIiwiaW52ZXN0b3JfaWQiLCJnZXRTaWduZWREb2N1bWVudHMiLCJpc19zaWduZWQiLCJnZXRVbnNpZ25lZERvY3VtZW50cyIsImRvY3VtZW50c1NlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/documents.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/fees.service.ts":
/*!**************************************!*\
  !*** ./lib/services/fees.service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeesService: () => (/* binding */ FeesService),\n/* harmony export */   feesService: () => (/* binding */ feesService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/* harmony import */ var _lib_db_supabase_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db/supabase/client */ \"(rsc)/./lib/db/supabase/client.ts\");\n/* harmony import */ var _lib_db_schema_manager_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db/schema-manager/config */ \"(rsc)/./lib/db/schema-manager/config.ts\");\n\n\n\nclass FeesService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    constructor(){\n        super();\n        this.direct = new _lib_db_supabase_client__WEBPACK_IMPORTED_MODULE_1__.SupabaseDirectClient(new _lib_db_schema_manager_config__WEBPACK_IMPORTED_MODULE_2__.SchemaConfig());\n    }\n    async applyFeeLine(params) {\n        this.validateRequired(params, [\n            \"transaction_id\",\n            \"component\"\n        ], \"applyFeeLine\");\n        const client = this.direct.getClient();\n        const { data, error } = await client.from(\"fees.fee_application\").insert({\n            transaction_id: params.transaction_id,\n            deal_id: params.deal_id ?? null,\n            component: params.component,\n            amount: params.amount ?? null,\n            percent: params.percent ?? null,\n            applied: params.applied ?? true,\n            notes: params.notes ?? null\n        }).select(\"*\").single();\n        if (error) this.handleError(error, \"applyFeeLine\");\n        this.clearCache();\n        return data;\n    }\n    async listByTx(transaction_id) {\n        const client = this.direct.getClient();\n        const { data, error } = await client.from(\"fees.fee_application\").select(\"*\").eq(\"transaction_id\", transaction_id).order(\"id\", {\n            ascending: true\n        });\n        if (error) this.handleError(error, \"listByTx\");\n        return data || [];\n    }\n    async lock(transaction_id, locked) {\n        const client = this.direct.getClient();\n        const { data, error } = await client.from(\"transactions.transaction.primary\").update({\n            fee_calc_is_locked: locked,\n            fee_calc_locked_at: locked ? new Date().toISOString() : null\n        }).eq(\"transaction_id\", transaction_id).select(\"*\").single();\n        if (error) this.handleError(error, \"lock\");\n        this.clearCache();\n        return data;\n    }\n}\nconst feesService = new FeesService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZmVlcy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDO0FBQ21CO0FBQ0Y7QUFJdkQsTUFBTUcsb0JBQW9CSCxzREFBV0E7SUFHMUNJLGFBQWE7UUFDWCxLQUFLO1FBQ0wsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUoseUVBQW9CQSxDQUFDLElBQUlDLHVFQUFZQTtJQUN6RDtJQUVBLE1BQU1JLGFBQWFDLE1BUWxCLEVBQUM7UUFDQSxJQUFJLENBQUNDLGdCQUFnQixDQUFDRCxRQUFRO1lBQUM7WUFBa0I7U0FBWSxFQUFFO1FBQy9ELE1BQU1FLFNBQVMsSUFBSSxDQUFDSixNQUFNLENBQUNLLFNBQVM7UUFDcEMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1ILE9BQzNCSSxJQUFJLENBQUMsd0JBQ0xDLE1BQU0sQ0FBQztZQUNOQyxnQkFBZ0JSLE9BQU9RLGNBQWM7WUFDckNDLFNBQVNULE9BQU9TLE9BQU8sSUFBSTtZQUMzQkMsV0FBV1YsT0FBT1UsU0FBUztZQUMzQkMsUUFBUVgsT0FBT1csTUFBTSxJQUFJO1lBQ3pCQyxTQUFTWixPQUFPWSxPQUFPLElBQUk7WUFDM0JDLFNBQVNiLE9BQU9hLE9BQU8sSUFBSTtZQUMzQkMsT0FBT2QsT0FBT2MsS0FBSyxJQUFJO1FBQ3pCLEdBQ0NDLE1BQU0sQ0FBQyxLQUNQQyxNQUFNO1FBQ1QsSUFBSVgsT0FBTyxJQUFJLENBQUNZLFdBQVcsQ0FBQ1osT0FBTztRQUNuQyxJQUFJLENBQUNhLFVBQVU7UUFDZixPQUFPZDtJQUNUO0lBRUEsTUFBTWUsU0FBU1gsY0FBc0IsRUFBQztRQUNwQyxNQUFNTixTQUFTLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxTQUFTO1FBQ3BDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNSCxPQUMzQkksSUFBSSxDQUFDLHdCQUNMUyxNQUFNLENBQUMsS0FDUEssRUFBRSxDQUFDLGtCQUFrQlosZ0JBQ3JCYSxLQUFLLENBQUMsTUFBTTtZQUFFQyxXQUFXO1FBQUs7UUFDakMsSUFBSWpCLE9BQU8sSUFBSSxDQUFDWSxXQUFXLENBQUNaLE9BQU87UUFDbkMsT0FBT0QsUUFBUSxFQUFFO0lBQ25CO0lBRUEsTUFBTW1CLEtBQUtmLGNBQXNCLEVBQUVnQixNQUFlLEVBQUM7UUFDakQsTUFBTXRCLFNBQVMsSUFBSSxDQUFDSixNQUFNLENBQUNLLFNBQVM7UUFDcEMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1ILE9BQzNCSSxJQUFJLENBQUMsb0NBQ0xtQixNQUFNLENBQUM7WUFBRUMsb0JBQW9CRjtZQUFRRyxvQkFBb0JILFNBQVMsSUFBSUksT0FBT0MsV0FBVyxLQUFLO1FBQUssR0FDbEdULEVBQUUsQ0FBQyxrQkFBa0JaLGdCQUNyQk8sTUFBTSxDQUFDLEtBQ1BDLE1BQU07UUFDVCxJQUFJWCxPQUFPLElBQUksQ0FBQ1ksV0FBVyxDQUFDWixPQUFPO1FBQ25DLElBQUksQ0FBQ2EsVUFBVTtRQUNmLE9BQU9kO0lBQ1Q7QUFDRjtBQUVPLE1BQU0wQixjQUFjLElBQUlsQyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2xpYi9zZXJ2aWNlcy9mZWVzLnNlcnZpY2UudHM/ZDk5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4vYmFzZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN1cGFiYXNlRGlyZWN0Q2xpZW50IH0gZnJvbSAnQC9saWIvZGIvc3VwYWJhc2UvY2xpZW50JztcbmltcG9ydCB7IFNjaGVtYUNvbmZpZyB9IGZyb20gJ0AvbGliL2RiL3NjaGVtYS1tYW5hZ2VyL2NvbmZpZyc7XG5cbmV4cG9ydCB0eXBlIEZlZUNvbXBvbmVudCA9ICdTVFJVQ1RVUklORyd8J01BTkFHRU1FTlQnfCdQRVJGT1JNQU5DRSd8J0FETUlOJ3wnUFJFTUlVTSd8J09USEVSJztcblxuZXhwb3J0IGNsYXNzIEZlZXNTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBwcml2YXRlIGRpcmVjdDogU3VwYWJhc2VEaXJlY3RDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGlyZWN0ID0gbmV3IFN1cGFiYXNlRGlyZWN0Q2xpZW50KG5ldyBTY2hlbWFDb25maWcoKSk7XG4gIH1cblxuICBhc3luYyBhcHBseUZlZUxpbmUocGFyYW1zOiB7XG4gICAgdHJhbnNhY3Rpb25faWQ6IG51bWJlcjtcbiAgICBkZWFsX2lkPzogbnVtYmVyO1xuICAgIGNvbXBvbmVudDogRmVlQ29tcG9uZW50O1xuICAgIGFtb3VudD86IG51bWJlcjtcbiAgICBwZXJjZW50PzogbnVtYmVyO1xuICAgIGFwcGxpZWQ/OiBib29sZWFuO1xuICAgIG5vdGVzPzogc3RyaW5nO1xuICB9KXtcbiAgICB0aGlzLnZhbGlkYXRlUmVxdWlyZWQocGFyYW1zLCBbJ3RyYW5zYWN0aW9uX2lkJywgJ2NvbXBvbmVudCddLCAnYXBwbHlGZWVMaW5lJyk7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5kaXJlY3QuZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgY2xpZW50XG4gICAgICAuZnJvbSgnZmVlcy5mZWVfYXBwbGljYXRpb24nKVxuICAgICAgLmluc2VydCh7XG4gICAgICAgIHRyYW5zYWN0aW9uX2lkOiBwYXJhbXMudHJhbnNhY3Rpb25faWQsXG4gICAgICAgIGRlYWxfaWQ6IHBhcmFtcy5kZWFsX2lkID8/IG51bGwsXG4gICAgICAgIGNvbXBvbmVudDogcGFyYW1zLmNvbXBvbmVudCxcbiAgICAgICAgYW1vdW50OiBwYXJhbXMuYW1vdW50ID8/IG51bGwsXG4gICAgICAgIHBlcmNlbnQ6IHBhcmFtcy5wZXJjZW50ID8/IG51bGwsXG4gICAgICAgIGFwcGxpZWQ6IHBhcmFtcy5hcHBsaWVkID8/IHRydWUsXG4gICAgICAgIG5vdGVzOiBwYXJhbXMubm90ZXMgPz8gbnVsbFxuICAgICAgfSlcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLnNpbmdsZSgpO1xuICAgIGlmIChlcnJvcikgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgJ2FwcGx5RmVlTGluZScpO1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgYXN5bmMgbGlzdEJ5VHgodHJhbnNhY3Rpb25faWQ6IG51bWJlcil7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5kaXJlY3QuZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgY2xpZW50XG4gICAgICAuZnJvbSgnZmVlcy5mZWVfYXBwbGljYXRpb24nKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3RyYW5zYWN0aW9uX2lkJywgdHJhbnNhY3Rpb25faWQpXG4gICAgICAub3JkZXIoJ2lkJywgeyBhc2NlbmRpbmc6IHRydWUgfSk7XG4gICAgaWYgKGVycm9yKSB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCAnbGlzdEJ5VHgnKTtcbiAgICByZXR1cm4gZGF0YSB8fCBbXTtcbiAgfVxuXG4gIGFzeW5jIGxvY2sodHJhbnNhY3Rpb25faWQ6IG51bWJlciwgbG9ja2VkOiBib29sZWFuKXtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmRpcmVjdC5nZXRDbGllbnQoKTtcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBjbGllbnRcbiAgICAgIC5mcm9tKCd0cmFuc2FjdGlvbnMudHJhbnNhY3Rpb24ucHJpbWFyeScpXG4gICAgICAudXBkYXRlKHsgZmVlX2NhbGNfaXNfbG9ja2VkOiBsb2NrZWQsIGZlZV9jYWxjX2xvY2tlZF9hdDogbG9ja2VkID8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpIDogbnVsbCB9KVxuICAgICAgLmVxKCd0cmFuc2FjdGlvbl9pZCcsIHRyYW5zYWN0aW9uX2lkKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuc2luZ2xlKCk7XG4gICAgaWYgKGVycm9yKSB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCAnbG9jaycpO1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmZWVzU2VydmljZSA9IG5ldyBGZWVzU2VydmljZSgpO1xuXG5cbiJdLCJuYW1lcyI6WyJCYXNlU2VydmljZSIsIlN1cGFiYXNlRGlyZWN0Q2xpZW50IiwiU2NoZW1hQ29uZmlnIiwiRmVlc1NlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImRpcmVjdCIsImFwcGx5RmVlTGluZSIsInBhcmFtcyIsInZhbGlkYXRlUmVxdWlyZWQiLCJjbGllbnQiLCJnZXRDbGllbnQiLCJkYXRhIiwiZXJyb3IiLCJmcm9tIiwiaW5zZXJ0IiwidHJhbnNhY3Rpb25faWQiLCJkZWFsX2lkIiwiY29tcG9uZW50IiwiYW1vdW50IiwicGVyY2VudCIsImFwcGxpZWQiLCJub3RlcyIsInNlbGVjdCIsInNpbmdsZSIsImhhbmRsZUVycm9yIiwiY2xlYXJDYWNoZSIsImxpc3RCeVR4IiwiZXEiLCJvcmRlciIsImFzY2VuZGluZyIsImxvY2siLCJsb2NrZWQiLCJ1cGRhdGUiLCJmZWVfY2FsY19pc19sb2NrZWQiLCJmZWVfY2FsY19sb2NrZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmZWVzU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/fees.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/index.ts":
/*!*******************************!*\
  !*** ./lib/services/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseService: () => (/* reexport safe */ _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService),\n/* harmony export */   DealsService: () => (/* reexport safe */ _deals_service__WEBPACK_IMPORTED_MODULE_1__.DealsService),\n/* harmony export */   DocumentsService: () => (/* reexport safe */ _documents_service__WEBPACK_IMPORTED_MODULE_3__.DocumentsService),\n/* harmony export */   FeesService: () => (/* reexport safe */ _fees_service__WEBPACK_IMPORTED_MODULE_5__.FeesService),\n/* harmony export */   InvestorsService: () => (/* reexport safe */ _investors_service__WEBPACK_IMPORTED_MODULE_2__.InvestorsService),\n/* harmony export */   RouterService: () => (/* reexport safe */ _router_service__WEBPACK_IMPORTED_MODULE_6__.RouterService),\n/* harmony export */   ServiceFactory: () => (/* binding */ ServiceFactory),\n/* harmony export */   TransactionsService: () => (/* reexport safe */ _transactions_service__WEBPACK_IMPORTED_MODULE_4__.TransactionsService),\n/* harmony export */   dealsService: () => (/* reexport safe */ _deals_service__WEBPACK_IMPORTED_MODULE_1__.dealsService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   documentsService: () => (/* reexport safe */ _documents_service__WEBPACK_IMPORTED_MODULE_3__.documentsService),\n/* harmony export */   feesService: () => (/* reexport safe */ _fees_service__WEBPACK_IMPORTED_MODULE_5__.feesService),\n/* harmony export */   investorsService: () => (/* reexport safe */ _investors_service__WEBPACK_IMPORTED_MODULE_2__.investorsService),\n/* harmony export */   routerService: () => (/* reexport safe */ _router_service__WEBPACK_IMPORTED_MODULE_6__.routerService),\n/* harmony export */   services: () => (/* binding */ services),\n/* harmony export */   transactionsService: () => (/* reexport safe */ _transactions_service__WEBPACK_IMPORTED_MODULE_4__.transactionsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/* harmony import */ var _deals_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deals.service */ \"(rsc)/./lib/services/deals.service.ts\");\n/* harmony import */ var _investors_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./investors.service */ \"(rsc)/./lib/services/investors.service.ts\");\n/* harmony import */ var _documents_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./documents.service */ \"(rsc)/./lib/services/documents.service.ts\");\n/* harmony import */ var _transactions_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transactions.service */ \"(rsc)/./lib/services/transactions.service.ts\");\n/* harmony import */ var _fees_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fees.service */ \"(rsc)/./lib/services/fees.service.ts\");\n/* harmony import */ var _router_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.service */ \"(rsc)/./lib/services/router.service.ts\");\n/**\n * Services Index\n * Export all services from a single location\n */ \n// Direct exports without confusing aliases\n\n\n\n\n\n\n// Import services for factory\n\n\n\n\n\n\n// Service factory for creating new instances if needed\nclass ServiceFactory {\n    static createDealsService() {\n        return new _deals_service__WEBPACK_IMPORTED_MODULE_1__.DealsService();\n    }\n    static createInvestorsService() {\n        return new _investors_service__WEBPACK_IMPORTED_MODULE_2__.InvestorsService();\n    }\n    static createDocumentsService() {\n        return new _documents_service__WEBPACK_IMPORTED_MODULE_3__.DocumentsService();\n    }\n    static createTransactionsService() {\n        return new _transactions_service__WEBPACK_IMPORTED_MODULE_4__.TransactionsService();\n    }\n    static createFeesService() {\n        return new _fees_service__WEBPACK_IMPORTED_MODULE_5__.FeesService();\n    }\n    static createRouterService() {\n        return new _router_service__WEBPACK_IMPORTED_MODULE_6__.RouterService();\n    }\n}\n// Import singleton instances for services object\n\n\n\n\n\n\n// Export default services object for easy access\nconst services = {\n    deals: _deals_service__WEBPACK_IMPORTED_MODULE_1__.dealsService,\n    investors: _investors_service__WEBPACK_IMPORTED_MODULE_2__.investorsService,\n    documents: _documents_service__WEBPACK_IMPORTED_MODULE_3__.documentsService,\n    transactions: _transactions_service__WEBPACK_IMPORTED_MODULE_4__.transactionsService,\n    fees: _fees_service__WEBPACK_IMPORTED_MODULE_5__.feesService,\n    router: _router_service__WEBPACK_IMPORTED_MODULE_6__.routerService\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (services);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFNEM7QUFFN0MsMkNBQTJDO0FBQ2tCO0FBQ1k7QUFDQTtBQUNTO0FBQ3hCO0FBQ007QUFjaEUsOEJBQThCO0FBQ2lCO0FBQ1E7QUFDQTtBQUNNO0FBQ2hCO0FBQ0k7QUFFakQsdURBQXVEO0FBQ2hELE1BQU1hO0lBQ1gsT0FBT0MscUJBQXFCO1FBQzFCLE9BQU8sSUFBSWIsd0RBQVlBO0lBQ3pCO0lBRUEsT0FBT2MseUJBQXlCO1FBQzlCLE9BQU8sSUFBSVosZ0VBQWdCQTtJQUM3QjtJQUVBLE9BQU9hLHlCQUF5QjtRQUM5QixPQUFPLElBQUlYLGdFQUFnQkE7SUFDN0I7SUFFQSxPQUFPWSw0QkFBNEI7UUFDakMsT0FBTyxJQUFJVixzRUFBbUJBO0lBQ2hDO0lBRUEsT0FBT1csb0JBQW9CO1FBQ3pCLE9BQU8sSUFBSVQsc0RBQVdBO0lBQ3hCO0lBRUEsT0FBT1Usc0JBQXNCO1FBQzNCLE9BQU8sSUFBSVIsMERBQWFBO0lBQzFCO0FBQ0Y7QUFFQSxpREFBaUQ7QUFDRjtBQUNRO0FBQ0E7QUFDTTtBQUNoQjtBQUNJO0FBRWpELGlEQUFpRDtBQUMxQyxNQUFNUyxXQUFXO0lBQ3RCQyxPQUFPbkIsd0RBQVlBO0lBQ25Cb0IsV0FBV2xCLGdFQUFnQkE7SUFDM0JtQixXQUFXakIsZ0VBQWdCQTtJQUMzQmtCLGNBQWNoQixzRUFBbUJBO0lBQ2pDaUIsTUFBTWYsc0RBQVdBO0lBQ2pCZ0IsUUFBUWQsMERBQWFBO0FBQ3ZCLEVBQVc7QUFFWCxpRUFBZVEsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvLi9saWIvc2VydmljZXMvaW5kZXgudHM/MjU4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlcnZpY2VzIEluZGV4XG4gKiBFeHBvcnQgYWxsIHNlcnZpY2VzIGZyb20gYSBzaW5nbGUgbG9jYXRpb25cbiAqL1xuXG5leHBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4vYmFzZS5zZXJ2aWNlJztcblxuLy8gRGlyZWN0IGV4cG9ydHMgd2l0aG91dCBjb25mdXNpbmcgYWxpYXNlc1xuZXhwb3J0IHsgRGVhbHNTZXJ2aWNlLCBkZWFsc1NlcnZpY2UgfSBmcm9tICcuL2RlYWxzLnNlcnZpY2UnO1xuZXhwb3J0IHsgSW52ZXN0b3JzU2VydmljZSwgaW52ZXN0b3JzU2VydmljZSB9IGZyb20gJy4vaW52ZXN0b3JzLnNlcnZpY2UnO1xuZXhwb3J0IHsgRG9jdW1lbnRzU2VydmljZSwgZG9jdW1lbnRzU2VydmljZSB9IGZyb20gJy4vZG9jdW1lbnRzLnNlcnZpY2UnO1xuZXhwb3J0IHsgVHJhbnNhY3Rpb25zU2VydmljZSwgdHJhbnNhY3Rpb25zU2VydmljZSB9IGZyb20gJy4vdHJhbnNhY3Rpb25zLnNlcnZpY2UnO1xuZXhwb3J0IHsgRmVlc1NlcnZpY2UsIGZlZXNTZXJ2aWNlIH0gZnJvbSAnLi9mZWVzLnNlcnZpY2UnO1xuZXhwb3J0IHsgUm91dGVyU2VydmljZSwgcm91dGVyU2VydmljZSB9IGZyb20gJy4vcm91dGVyLnNlcnZpY2UnO1xuXG4vLyBSZS1leHBvcnQgdHlwZXMgZm9yIGNvbnZlbmllbmNlXG5leHBvcnQgdHlwZSB7XG4gIERlYWxXaXRoQ29tcGFueSxcbiAgRGVhbERldGFpbHMsXG4gIERlYWxMaXN0T3B0aW9uc1xufSBmcm9tICcuL2RlYWxzLnNlcnZpY2UnO1xuXG5leHBvcnQgdHlwZSB7XG4gIEludmVzdG9yUHJvZmlsZSxcbiAgSW52ZXN0b3JMaXN0T3B0aW9uc1xufSBmcm9tICcuL2ludmVzdG9ycy5zZXJ2aWNlJztcblxuLy8gSW1wb3J0IHNlcnZpY2VzIGZvciBmYWN0b3J5XG5pbXBvcnQgeyBEZWFsc1NlcnZpY2UgfSBmcm9tICcuL2RlYWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW52ZXN0b3JzU2VydmljZSB9IGZyb20gJy4vaW52ZXN0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRzU2VydmljZSB9IGZyb20gJy4vZG9jdW1lbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25zU2VydmljZSB9IGZyb20gJy4vdHJhbnNhY3Rpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmVlc1NlcnZpY2UgfSBmcm9tICcuL2ZlZXMuc2VydmljZSc7XG5pbXBvcnQgeyBSb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9yb3V0ZXIuc2VydmljZSc7XG5cbi8vIFNlcnZpY2UgZmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlcyBpZiBuZWVkZWRcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlRmFjdG9yeSB7XG4gIHN0YXRpYyBjcmVhdGVEZWFsc1NlcnZpY2UoKSB7XG4gICAgcmV0dXJuIG5ldyBEZWFsc1NlcnZpY2UoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJbnZlc3RvcnNTZXJ2aWNlKCkge1xuICAgIHJldHVybiBuZXcgSW52ZXN0b3JzU2VydmljZSgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZURvY3VtZW50c1NlcnZpY2UoKSB7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudHNTZXJ2aWNlKCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlVHJhbnNhY3Rpb25zU2VydmljZSgpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uc1NlcnZpY2UoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVGZWVzU2VydmljZSgpIHtcbiAgICByZXR1cm4gbmV3IEZlZXNTZXJ2aWNlKCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUm91dGVyU2VydmljZSgpIHtcbiAgICByZXR1cm4gbmV3IFJvdXRlclNlcnZpY2UoKTtcbiAgfVxufVxuXG4vLyBJbXBvcnQgc2luZ2xldG9uIGluc3RhbmNlcyBmb3Igc2VydmljZXMgb2JqZWN0XG5pbXBvcnQgeyBkZWFsc1NlcnZpY2UgfSBmcm9tICcuL2RlYWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgaW52ZXN0b3JzU2VydmljZSB9IGZyb20gJy4vaW52ZXN0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgZG9jdW1lbnRzU2VydmljZSB9IGZyb20gJy4vZG9jdW1lbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgdHJhbnNhY3Rpb25zU2VydmljZSB9IGZyb20gJy4vdHJhbnNhY3Rpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgZmVlc1NlcnZpY2UgfSBmcm9tICcuL2ZlZXMuc2VydmljZSc7XG5pbXBvcnQgeyByb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9yb3V0ZXIuc2VydmljZSc7XG5cbi8vIEV4cG9ydCBkZWZhdWx0IHNlcnZpY2VzIG9iamVjdCBmb3IgZWFzeSBhY2Nlc3NcbmV4cG9ydCBjb25zdCBzZXJ2aWNlcyA9IHtcbiAgZGVhbHM6IGRlYWxzU2VydmljZSxcbiAgaW52ZXN0b3JzOiBpbnZlc3RvcnNTZXJ2aWNlLFxuICBkb2N1bWVudHM6IGRvY3VtZW50c1NlcnZpY2UsXG4gIHRyYW5zYWN0aW9uczogdHJhbnNhY3Rpb25zU2VydmljZSxcbiAgZmVlczogZmVlc1NlcnZpY2UsXG4gIHJvdXRlcjogcm91dGVyU2VydmljZVxufSBhcyBjb25zdDtcblxuZXhwb3J0IGRlZmF1bHQgc2VydmljZXM7Il0sIm5hbWVzIjpbIkJhc2VTZXJ2aWNlIiwiRGVhbHNTZXJ2aWNlIiwiZGVhbHNTZXJ2aWNlIiwiSW52ZXN0b3JzU2VydmljZSIsImludmVzdG9yc1NlcnZpY2UiLCJEb2N1bWVudHNTZXJ2aWNlIiwiZG9jdW1lbnRzU2VydmljZSIsIlRyYW5zYWN0aW9uc1NlcnZpY2UiLCJ0cmFuc2FjdGlvbnNTZXJ2aWNlIiwiRmVlc1NlcnZpY2UiLCJmZWVzU2VydmljZSIsIlJvdXRlclNlcnZpY2UiLCJyb3V0ZXJTZXJ2aWNlIiwiU2VydmljZUZhY3RvcnkiLCJjcmVhdGVEZWFsc1NlcnZpY2UiLCJjcmVhdGVJbnZlc3RvcnNTZXJ2aWNlIiwiY3JlYXRlRG9jdW1lbnRzU2VydmljZSIsImNyZWF0ZVRyYW5zYWN0aW9uc1NlcnZpY2UiLCJjcmVhdGVGZWVzU2VydmljZSIsImNyZWF0ZVJvdXRlclNlcnZpY2UiLCJzZXJ2aWNlcyIsImRlYWxzIiwiaW52ZXN0b3JzIiwiZG9jdW1lbnRzIiwidHJhbnNhY3Rpb25zIiwiZmVlcyIsInJvdXRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/index.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/investors.service.ts":
/*!*******************************************!*\
  !*** ./lib/services/investors.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvestorsService: () => (/* binding */ InvestorsService),\n/* harmony export */   investorsService: () => (/* binding */ investorsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/**\n * Investors Service\n * Handles all investor-related operations\n */ \nclass InvestorsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    /**\n   * Get current investor (from session/auth)\n   */ async getCurrentInvestor() {\n        const cacheKey = \"investor:current\";\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getCurrentInvestor\");\n            await this.delay();\n            const investor = await this.dataClient.getCurrentInvestor();\n            if (investor) {\n                this.setCache(cacheKey, investor);\n            }\n            return investor;\n        } catch (error) {\n            this.handleError(error, \"getCurrentInvestor\");\n        }\n    }\n    /**\n   * Get investor by ID\n   */ async getInvestorById(id) {\n        const cacheKey = `investor:${id}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getInvestorById\", {\n                id\n            });\n            await this.delay();\n            const investor = await this.dataClient.getInvestorById(id);\n            if (!investor) return null;\n            // Get additional metrics\n            const [commitments, transactions] = await Promise.all([\n                this.dataClient.getCommitments(id),\n                this.dataClient.getTransactions({\n                    investor_id: id\n                })\n            ]);\n            const signedCommitments = commitments.filter((c)=>c.status === \"signed\");\n            const totalCommitted = signedCommitments.reduce((sum, c)=>sum + c.amount, 0);\n            const capitalCalls = transactions.filter((t)=>t.type === \"capital_call\" && t.status === \"completed\");\n            const totalCalled = capitalCalls.reduce((sum, t)=>sum + t.amount, 0);\n            const profile = {\n                ...investor,\n                totalCommitted,\n                totalCalled,\n                activeDeals: signedCommitments.length,\n                portfolioValue: totalCommitted * 1.25 // Mock 25% appreciation\n            };\n            this.setCache(cacheKey, profile);\n            return profile;\n        } catch (error) {\n            this.handleError(error, \"getInvestorById\");\n        }\n    }\n    /**\n   * Get all investors (admin function)\n   */ async getInvestors(options = {}) {\n        const cacheKey = `investors:${JSON.stringify(options)}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        try {\n            this.log(\"getInvestors\", options);\n            await this.delay();\n            let investors = await this.dataClient.getInvestors();\n            // Filter by type\n            if (options.type) {\n                investors = investors.filter((i)=>i.type === options.type);\n            }\n            // Filter by KYC status\n            if (options.kycStatus) {\n                investors = investors.filter((i)=>i.kyc_status === options.kycStatus);\n            }\n            // Search\n            if (options.search) {\n                investors = this.searchFilter(investors, options.search, [\n                    \"name\",\n                    \"email\"\n                ]);\n            }\n            // Sort\n            if (options.sortBy) {\n                investors = this.sortBy(investors, options.sortBy, options.sortOrder);\n            }\n            // Paginate\n            const paginated = this.paginate(investors, options.page || 1, options.limit || 10);\n            const result = this.formatResponse(paginated.data, {\n                pagination: paginated.pagination\n            });\n            this.setCache(cacheKey, result);\n            return result;\n        } catch (error) {\n            this.handleError(error, \"getInvestors\");\n        }\n    }\n    /**\n   * Get investor dashboard data\n   */ async getDashboardData(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return null;\n                id = currentInvestor.id;\n            }\n            const cacheKey = `dashboard:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getDashboardData\", {\n                investorId: id\n            });\n            await this.delay();\n            const dashboardData = await this.dataClient.getDashboardData(id);\n            this.setCache(cacheKey, dashboardData);\n            return dashboardData;\n        } catch (error) {\n            this.handleError(error, \"getDashboardData\");\n        }\n    }\n    /**\n   * Get investor portfolio data\n   */ async getPortfolioData(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return null;\n                id = currentInvestor.id;\n            }\n            const cacheKey = `portfolio:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getPortfolioData\", {\n                investorId: id\n            });\n            await this.delay();\n            const portfolioData = await this.dataClient.getPortfolioData(id);\n            this.setCache(cacheKey, portfolioData);\n            return portfolioData;\n        } catch (error) {\n            this.handleError(error, \"getPortfolioData\");\n        }\n    }\n    /**\n   * Get investor commitments\n   */ async getCommitments(investorId) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return [];\n                id = currentInvestor.id;\n            }\n            const cacheKey = `commitments:${id}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return cached;\n            this.log(\"getCommitments\", {\n                investorId: id\n            });\n            await this.delay();\n            const commitments = await this.dataClient.getCommitments(id);\n            this.setCache(cacheKey, commitments);\n            return commitments;\n        } catch (error) {\n            this.handleError(error, \"getCommitments\");\n        }\n    }\n    /**\n   * Get investor transactions\n   */ async getTransactions(investorId, options = {}) {\n        try {\n            // Use provided ID or get current investor\n            let id = investorId;\n            if (!id) {\n                const currentInvestor = await this.getCurrentInvestor();\n                if (!currentInvestor) return this.formatResponse([], false, \"No investor found\");\n                id = currentInvestor.id;\n            }\n            const cacheKey = `transactions:${id}:${JSON.stringify(options)}`;\n            const cached = this.getCached(cacheKey);\n            if (cached) return this.formatResponse(cached);\n            this.log(\"getTransactions\", {\n                investorId: id,\n                options\n            });\n            await this.delay();\n            const transactions = await this.dataClient.getTransactions({\n                investor_id: id,\n                type: options.type,\n                status: options.status,\n                limit: options.limit\n            });\n            this.setCache(cacheKey, transactions);\n            return this.formatResponse(transactions);\n        } catch (error) {\n            this.handleError(error, \"getTransactions\");\n            return this.formatResponse([], false, \"Failed to fetch transactions\");\n        }\n    }\n    /**\n   * Update investor profile (mock - would integrate with auth)\n   */ async updateProfile(updates) {\n        try {\n            const currentInvestor = await this.getCurrentInvestor();\n            if (!currentInvestor) return null;\n            this.log(\"updateProfile\", updates);\n            // In real implementation, this would update the database\n            // For now, just return the updated investor\n            const updated = {\n                ...currentInvestor,\n                ...updates,\n                updated_at: new Date().toISOString()\n            };\n            // Clear cache\n            this.clearCache();\n            return updated;\n        } catch (error) {\n            this.handleError(error, \"updateProfile\");\n        }\n    }\n    /**\n   * Get investor summary stats\n   */ async getSummaryStats(investorId) {\n        try {\n            const dashboardData = await this.getDashboardData(investorId);\n            if (!dashboardData) return null;\n            return this.formatResponse({\n                totalCommitted: dashboardData.summary.totalCommitted,\n                totalCalled: dashboardData.summary.totalCalled,\n                totalDistributed: dashboardData.summary.totalDistributed,\n                currentValue: dashboardData.summary.currentValue,\n                totalGains: dashboardData.summary.totalGains,\n                irr: dashboardData.summary.portfolioIRR,\n                moic: dashboardData.summary.portfolioMOIC,\n                activeDeals: dashboardData.summary.activeDeals\n            });\n        } catch (error) {\n            this.handleError(error, \"getSummaryStats\");\n        }\n    }\n}\n// Export singleton instance\nconst investorsService = new InvestorsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/investors.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/router.service.ts":
/*!****************************************!*\
  !*** ./lib/services/router.service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterService: () => (/* binding */ RouterService),\n/* harmony export */   routerService: () => (/* binding */ routerService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n\nclass RouterService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    routeDealToDomain(input) {\n        const t = (input.deal_type || \"\").toUpperCase();\n        const c = (input.deal_category || \"\").toUpperCase();\n        if (c === \"ADVISORY\" || t === \"ADVISORY\") return \"Advisory\";\n        if (t === \"PARTNERSHIP\") return \"Partnership\";\n        if (t === \"FACILITATED_DIRECT\") return \"FacilitatedDirect\";\n        return \"Equitie\";\n    }\n    routeInputToStore(inputId) {\n        switch(inputId){\n            case \"I6\":\n                return \"deals\";\n            case \"I7\":\n                return \"companies\";\n            default:\n                return \"documents\";\n        }\n    }\n    routeTxType(domain, opts) {\n        if (domain === \"Advisory\") return \"Advisory\";\n        if (opts?.isSecondary) return \"Secondary\";\n        return \"Primary\";\n    }\n}\nconst routerService = new RouterService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvcm91dGVyLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZDO0FBS3RDLE1BQU1DLHNCQUFzQkQsc0RBQVdBO0lBQzVDRSxrQkFBa0JDLEtBQW1FLEVBQWtCO1FBQ3JHLE1BQU1DLElBQUksQ0FBQ0QsTUFBTUUsU0FBUyxJQUFJLEVBQUMsRUFBR0MsV0FBVztRQUM3QyxNQUFNQyxJQUFJLENBQUNKLE1BQU1LLGFBQWEsSUFBSSxFQUFDLEVBQUdGLFdBQVc7UUFFakQsSUFBSUMsTUFBTSxjQUFjSCxNQUFNLFlBQVksT0FBTztRQUNqRCxJQUFJQSxNQUFNLGVBQWUsT0FBTztRQUNoQyxJQUFJQSxNQUFNLHNCQUFzQixPQUFPO1FBQ3ZDLE9BQU87SUFDVDtJQUVBSyxrQkFBa0JDLE9BQTJDLEVBQXVDO1FBQ2xHLE9BQVFBO1lBQ04sS0FBSztnQkFDSCxPQUFPO1lBQ1QsS0FBSztnQkFDSCxPQUFPO1lBQ1Q7Z0JBQ0UsT0FBTztRQUNYO0lBQ0Y7SUFFQUMsWUFBWUMsTUFBc0IsRUFBRUMsSUFBZ0MsRUFBeUI7UUFDM0YsSUFBSUQsV0FBVyxZQUFZLE9BQU87UUFDbEMsSUFBSUMsTUFBTUMsYUFBYSxPQUFPO1FBQzlCLE9BQU87SUFDVDtBQUNGO0FBRU8sTUFBTUMsZ0JBQWdCLElBQUlkLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2ludmVzdG9yLXBvcnRhbC1kYXNoYm9hcmQvLi9saWIvc2VydmljZXMvcm91dGVyLnNlcnZpY2UudHM/ZjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4vYmFzZS5zZXJ2aWNlJztcblxuZXhwb3J0IHR5cGUgQnVzaW5lc3NEb21haW4gPSAnRXF1aXRpZScgfCAnUGFydG5lcnNoaXAnIHwgJ0ZhY2lsaXRhdGVkRGlyZWN0JyB8ICdBZHZpc29yeSc7XG5leHBvcnQgdHlwZSBUcmFuc2FjdGlvbkRvbWFpblR5cGUgPSAnUHJpbWFyeScgfCAnU2Vjb25kYXJ5JyB8ICdBZHZpc29yeSc7XG5cbmV4cG9ydCBjbGFzcyBSb3V0ZXJTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICByb3V0ZURlYWxUb0RvbWFpbihpbnB1dDogeyBkZWFsX3R5cGU/OiBzdHJpbmcgfCBudWxsOyBkZWFsX2NhdGVnb3J5Pzogc3RyaW5nIHwgbnVsbCB9KTogQnVzaW5lc3NEb21haW4ge1xuICAgIGNvbnN0IHQgPSAoaW5wdXQuZGVhbF90eXBlIHx8ICcnKS50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IGMgPSAoaW5wdXQuZGVhbF9jYXRlZ29yeSB8fCAnJykudG9VcHBlckNhc2UoKTtcblxuICAgIGlmIChjID09PSAnQURWSVNPUlknIHx8IHQgPT09ICdBRFZJU09SWScpIHJldHVybiAnQWR2aXNvcnknO1xuICAgIGlmICh0ID09PSAnUEFSVE5FUlNISVAnKSByZXR1cm4gJ1BhcnRuZXJzaGlwJztcbiAgICBpZiAodCA9PT0gJ0ZBQ0lMSVRBVEVEX0RJUkVDVCcpIHJldHVybiAnRmFjaWxpdGF0ZWREaXJlY3QnO1xuICAgIHJldHVybiAnRXF1aXRpZSc7XG4gIH1cblxuICByb3V0ZUlucHV0VG9TdG9yZShpbnB1dElkOiAnSTEnfCdJMid8J0kzJ3wnSTQnfCdJNSd8J0k2J3wnSTcnKTogJ2RvY3VtZW50cycgfCAnZGVhbHMnIHwgJ2NvbXBhbmllcycge1xuICAgIHN3aXRjaCAoaW5wdXRJZCkge1xuICAgICAgY2FzZSAnSTYnOlxuICAgICAgICByZXR1cm4gJ2RlYWxzJztcbiAgICAgIGNhc2UgJ0k3JzpcbiAgICAgICAgcmV0dXJuICdjb21wYW5pZXMnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdkb2N1bWVudHMnO1xuICAgIH1cbiAgfVxuXG4gIHJvdXRlVHhUeXBlKGRvbWFpbjogQnVzaW5lc3NEb21haW4sIG9wdHM/OiB7IGlzU2Vjb25kYXJ5PzogYm9vbGVhbiB9KTogVHJhbnNhY3Rpb25Eb21haW5UeXBlIHtcbiAgICBpZiAoZG9tYWluID09PSAnQWR2aXNvcnknKSByZXR1cm4gJ0Fkdmlzb3J5JztcbiAgICBpZiAob3B0cz8uaXNTZWNvbmRhcnkpIHJldHVybiAnU2Vjb25kYXJ5JztcbiAgICByZXR1cm4gJ1ByaW1hcnknO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByb3V0ZXJTZXJ2aWNlID0gbmV3IFJvdXRlclNlcnZpY2UoKTtcblxuXG4iXSwibmFtZXMiOlsiQmFzZVNlcnZpY2UiLCJSb3V0ZXJTZXJ2aWNlIiwicm91dGVEZWFsVG9Eb21haW4iLCJpbnB1dCIsInQiLCJkZWFsX3R5cGUiLCJ0b1VwcGVyQ2FzZSIsImMiLCJkZWFsX2NhdGVnb3J5Iiwicm91dGVJbnB1dFRvU3RvcmUiLCJpbnB1dElkIiwicm91dGVUeFR5cGUiLCJkb21haW4iLCJvcHRzIiwiaXNTZWNvbmRhcnkiLCJyb3V0ZXJTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/router.service.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/transactions.service.ts":
/*!**********************************************!*\
  !*** ./lib/services/transactions.service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionsService: () => (/* binding */ TransactionsService),\n/* harmony export */   transactionsService: () => (/* binding */ transactionsService)\n/* harmony export */ });\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.service */ \"(rsc)/./lib/services/base.service.ts\");\n/* harmony import */ var _lib_db_supabase_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db/supabase/client */ \"(rsc)/./lib/db/supabase/client.ts\");\n/* harmony import */ var _lib_db_schema_manager_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db/schema-manager/config */ \"(rsc)/./lib/db/schema-manager/config.ts\");\n\n\n\nclass TransactionsService extends _base_service__WEBPACK_IMPORTED_MODULE_0__.BaseService {\n    constructor(){\n        super();\n        this.direct = new _lib_db_supabase_client__WEBPACK_IMPORTED_MODULE_1__.SupabaseDirectClient(new _lib_db_schema_manager_config__WEBPACK_IMPORTED_MODULE_2__.SchemaConfig());\n    }\n    async createPrimaryTx(input) {\n        this.validateRequired(input, [\n            \"deal_id\",\n            \"investor_id\",\n            \"units\",\n            \"unit_price\"\n        ], \"createPrimaryTx\");\n        const gross_capital = Number(input.units) * Number(input.unit_price);\n        const payload = {\n            deal_id: input.deal_id,\n            investor_id: input.investor_id,\n            transaction_date: input.transaction_date || new Date().toISOString().slice(0, 10),\n            units: input.units,\n            unit_price: input.unit_price,\n            gross_capital,\n            status: input.status || \"PENDING\"\n        };\n        const client = this.direct.getClient();\n        const { data, error } = await client.from(\"transactions.transaction.primary\").insert(payload).select(\"*\").single();\n        if (error) {\n            this.handleError(error, \"createPrimaryTx\");\n        }\n        // Clear caches that may depend on tx state\n        this.clearCache();\n        return data;\n    }\n    async getByDeal(dealId) {\n        const cacheKey = `tx:deal:${dealId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        const list = await this.dataClient.getTransactions({\n            dealId\n        });\n        this.setCache(cacheKey, list);\n        return list;\n    }\n    async getByInvestor(investorId) {\n        const cacheKey = `tx:inv:${investorId}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        const list = await this.dataClient.getTransactions({\n            investorId\n        });\n        this.setCache(cacheKey, list);\n        return list;\n    }\n}\nconst transactionsService = new TransactionsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvdHJhbnNhY3Rpb25zLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDbUI7QUFDRjtBQVd2RCxNQUFNRyw0QkFBNEJILHNEQUFXQTtJQUdsREksYUFBYztRQUNaLEtBQUs7UUFDTCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJSix5RUFBb0JBLENBQUMsSUFBSUMsdUVBQVlBO0lBQ3pEO0lBRUEsTUFBTUksZ0JBQWdCQyxLQUEyQixFQUFFO1FBQ2pELElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNELE9BQU87WUFBQztZQUFXO1lBQWU7WUFBUztTQUFhLEVBQUU7UUFFaEYsTUFBTUUsZ0JBQWdCQyxPQUFPSCxNQUFNSSxLQUFLLElBQUlELE9BQU9ILE1BQU1LLFVBQVU7UUFDbkUsTUFBTUMsVUFBVTtZQUNkQyxTQUFTUCxNQUFNTyxPQUFPO1lBQ3RCQyxhQUFhUixNQUFNUSxXQUFXO1lBQzlCQyxrQkFBa0JULE1BQU1TLGdCQUFnQixJQUFJLElBQUlDLE9BQU9DLFdBQVcsR0FBR0MsS0FBSyxDQUFDLEdBQUc7WUFDOUVSLE9BQU9KLE1BQU1JLEtBQUs7WUFDbEJDLFlBQVlMLE1BQU1LLFVBQVU7WUFDNUJIO1lBQ0FXLFFBQVFiLE1BQU1hLE1BQU0sSUFBSTtRQUMxQjtRQUVBLE1BQU1DLFNBQVMsSUFBSSxDQUFDaEIsTUFBTSxDQUFDaUIsU0FBUztRQUNwQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTUgsT0FDM0JJLElBQUksQ0FBQyxvQ0FDTEMsTUFBTSxDQUFDYixTQUNQYyxNQUFNLENBQUMsS0FDUEMsTUFBTTtRQUVULElBQUlKLE9BQU87WUFDVCxJQUFJLENBQUNLLFdBQVcsQ0FBQ0wsT0FBTztRQUMxQjtRQUVBLDJDQUEyQztRQUMzQyxJQUFJLENBQUNNLFVBQVU7UUFDZixPQUFPUDtJQUNUO0lBRUEsTUFBTVEsVUFBVUMsTUFBYyxFQUFFO1FBQzlCLE1BQU1DLFdBQVcsQ0FBQyxRQUFRLEVBQUVELE9BQU8sQ0FBQztRQUNwQyxNQUFNRSxTQUFTLElBQUksQ0FBQ0MsU0FBUyxDQUFDRjtRQUM5QixJQUFJQyxRQUFRLE9BQU9BO1FBRW5CLE1BQU1FLE9BQU8sTUFBTSxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsZUFBZSxDQUFDO1lBQUVOO1FBQU87UUFDNUQsSUFBSSxDQUFDTyxRQUFRLENBQUNOLFVBQVVHO1FBQ3hCLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNSSxjQUFjQyxVQUFrQixFQUFFO1FBQ3RDLE1BQU1SLFdBQVcsQ0FBQyxPQUFPLEVBQUVRLFdBQVcsQ0FBQztRQUN2QyxNQUFNUCxTQUFTLElBQUksQ0FBQ0MsU0FBUyxDQUFDRjtRQUM5QixJQUFJQyxRQUFRLE9BQU9BO1FBRW5CLE1BQU1FLE9BQU8sTUFBTSxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsZUFBZSxDQUFDO1lBQUVHO1FBQVc7UUFDaEUsSUFBSSxDQUFDRixRQUFRLENBQUNOLFVBQVVHO1FBQ3hCLE9BQU9BO0lBQ1Q7QUFDRjtBQUVPLE1BQU1NLHNCQUFzQixJQUFJdkMsc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52ZXN0b3ItcG9ydGFsLWRhc2hib2FyZC8uL2xpYi9zZXJ2aWNlcy90cmFuc2FjdGlvbnMuc2VydmljZS50cz85MWM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3VwYWJhc2VEaXJlY3RDbGllbnQgfSBmcm9tICdAL2xpYi9kYi9zdXBhYmFzZS9jbGllbnQnO1xuaW1wb3J0IHsgU2NoZW1hQ29uZmlnIH0gZnJvbSAnQC9saWIvZGIvc2NoZW1hLW1hbmFnZXIvY29uZmlnJztcblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVQcmltYXJ5VHhJbnB1dCB7XG4gIGRlYWxfaWQ6IG51bWJlcjtcbiAgaW52ZXN0b3JfaWQ6IG51bWJlcjtcbiAgdHJhbnNhY3Rpb25fZGF0ZT86IHN0cmluZzsgLy8gSVNPXG4gIHVuaXRzOiBudW1iZXI7XG4gIHVuaXRfcHJpY2U6IG51bWJlcjtcbiAgc3RhdHVzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25zU2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBkaXJlY3Q6IFN1cGFiYXNlRGlyZWN0Q2xpZW50O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kaXJlY3QgPSBuZXcgU3VwYWJhc2VEaXJlY3RDbGllbnQobmV3IFNjaGVtYUNvbmZpZygpKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVByaW1hcnlUeChpbnB1dDogQ3JlYXRlUHJpbWFyeVR4SW5wdXQpIHtcbiAgICB0aGlzLnZhbGlkYXRlUmVxdWlyZWQoaW5wdXQsIFsnZGVhbF9pZCcsICdpbnZlc3Rvcl9pZCcsICd1bml0cycsICd1bml0X3ByaWNlJ10sICdjcmVhdGVQcmltYXJ5VHgnKTtcblxuICAgIGNvbnN0IGdyb3NzX2NhcGl0YWwgPSBOdW1iZXIoaW5wdXQudW5pdHMpICogTnVtYmVyKGlucHV0LnVuaXRfcHJpY2UpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICBkZWFsX2lkOiBpbnB1dC5kZWFsX2lkLFxuICAgICAgaW52ZXN0b3JfaWQ6IGlucHV0LmludmVzdG9yX2lkLFxuICAgICAgdHJhbnNhY3Rpb25fZGF0ZTogaW5wdXQudHJhbnNhY3Rpb25fZGF0ZSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApLFxuICAgICAgdW5pdHM6IGlucHV0LnVuaXRzLFxuICAgICAgdW5pdF9wcmljZTogaW5wdXQudW5pdF9wcmljZSxcbiAgICAgIGdyb3NzX2NhcGl0YWwsXG4gICAgICBzdGF0dXM6IGlucHV0LnN0YXR1cyB8fCAnUEVORElORydcbiAgICB9IGFzIGNvbnN0O1xuXG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5kaXJlY3QuZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgY2xpZW50XG4gICAgICAuZnJvbSgndHJhbnNhY3Rpb25zLnRyYW5zYWN0aW9uLnByaW1hcnknKVxuICAgICAgLmluc2VydChwYXlsb2FkKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsICdjcmVhdGVQcmltYXJ5VHgnKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhciBjYWNoZXMgdGhhdCBtYXkgZGVwZW5kIG9uIHR4IHN0YXRlXG4gICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBhc3luYyBnZXRCeURlYWwoZGVhbElkOiBudW1iZXIpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGB0eDpkZWFsOiR7ZGVhbElkfWA7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWQoY2FjaGVLZXkpO1xuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG5cbiAgICBjb25zdCBsaXN0ID0gYXdhaXQgdGhpcy5kYXRhQ2xpZW50LmdldFRyYW5zYWN0aW9ucyh7IGRlYWxJZCB9KTtcbiAgICB0aGlzLnNldENhY2hlKGNhY2hlS2V5LCBsaXN0KTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGFzeW5jIGdldEJ5SW52ZXN0b3IoaW52ZXN0b3JJZDogbnVtYmVyKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgdHg6aW52OiR7aW52ZXN0b3JJZH1gO1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkKGNhY2hlS2V5KTtcbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkO1xuXG4gICAgY29uc3QgbGlzdCA9IGF3YWl0IHRoaXMuZGF0YUNsaWVudC5nZXRUcmFuc2FjdGlvbnMoeyBpbnZlc3RvcklkIH0pO1xuICAgIHRoaXMuc2V0Q2FjaGUoY2FjaGVLZXksIGxpc3QpO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFuc2FjdGlvbnNTZXJ2aWNlID0gbmV3IFRyYW5zYWN0aW9uc1NlcnZpY2UoKTtcblxuXG4iXSwibmFtZXMiOlsiQmFzZVNlcnZpY2UiLCJTdXBhYmFzZURpcmVjdENsaWVudCIsIlNjaGVtYUNvbmZpZyIsIlRyYW5zYWN0aW9uc1NlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImRpcmVjdCIsImNyZWF0ZVByaW1hcnlUeCIsImlucHV0IiwidmFsaWRhdGVSZXF1aXJlZCIsImdyb3NzX2NhcGl0YWwiLCJOdW1iZXIiLCJ1bml0cyIsInVuaXRfcHJpY2UiLCJwYXlsb2FkIiwiZGVhbF9pZCIsImludmVzdG9yX2lkIiwidHJhbnNhY3Rpb25fZGF0ZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNsaWNlIiwic3RhdHVzIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiZGF0YSIsImVycm9yIiwiZnJvbSIsImluc2VydCIsInNlbGVjdCIsInNpbmdsZSIsImhhbmRsZUVycm9yIiwiY2xlYXJDYWNoZSIsImdldEJ5RGVhbCIsImRlYWxJZCIsImNhY2hlS2V5IiwiY2FjaGVkIiwiZ2V0Q2FjaGVkIiwibGlzdCIsImRhdGFDbGllbnQiLCJnZXRUcmFuc2FjdGlvbnMiLCJzZXRDYWNoZSIsImdldEJ5SW52ZXN0b3IiLCJpbnZlc3RvcklkIiwidHJhbnNhY3Rpb25zU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/transactions.service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&page=%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finvestors%2F%5Bid%5D%2Fdashboard%2Froute.ts&appDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fahmedelhamawy%2FDesktop%2F15.1.1%20investor-portal-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();